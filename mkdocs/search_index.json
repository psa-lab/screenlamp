{
    "docs": [
        {
            "location": "/index.html",
            "text": "A toolkit for ligand-based virtual screening\n\n\nScreenlamp is a Python package for facilitating ligand-based virtual screening workflows and toolkits with hypothesis-driven filtering steps.\n\n\nAbout\n\n\nThe screenlamp toolkit was developed in the \nProtein Structure Analysis & Design Laboratory\n at Michigan State University. For additional information about screenlamp, please refer to the accompanying research publication, which is currently under revision:\n\n\n\n\nRaschka, Sebastian, Anne M. Scott, Nan Liu, Santosh Gunturu, Mar Huertas, Weiming Li, and Leslie A. Kuhn (2017). \"Enabling the hypothesis-driven prioritization of ligand candidates in big databases: \nScreenlamp and its application to GPCR inhibitor discovery for invasive species control\"\n\n\n\n\nScreenlamp is research software and has been made available to other researchers under a permissive \nApache v2 open source license\n. If you use screenlamp in your scientific projects or any derivative work, the authors of the screenlamp software must be acknowledged and the publication listed above should be cited.",
            "title": "Home"
        },
        {
            "location": "/index.html#a-toolkit-for-ligand-based-virtual-screening",
            "text": "Screenlamp is a Python package for facilitating ligand-based virtual screening workflows and toolkits with hypothesis-driven filtering steps.",
            "title": "A toolkit for ligand-based virtual screening"
        },
        {
            "location": "/index.html#about",
            "text": "The screenlamp toolkit was developed in the  Protein Structure Analysis & Design Laboratory  at Michigan State University. For additional information about screenlamp, please refer to the accompanying research publication, which is currently under revision:   Raschka, Sebastian, Anne M. Scott, Nan Liu, Santosh Gunturu, Mar Huertas, Weiming Li, and Leslie A. Kuhn (2017). \"Enabling the hypothesis-driven prioritization of ligand candidates in big databases: \nScreenlamp and its application to GPCR inhibitor discovery for invasive species control\"   Screenlamp is research software and has been made available to other researchers under a permissive  Apache v2 open source license . If you use screenlamp in your scientific projects or any derivative work, the authors of the screenlamp software must be acknowledged and the publication listed above should be cited.",
            "title": "About"
        },
        {
            "location": "/installation/index.html",
            "text": "Installing screenlamp\n\n\n\n\nObtaining screenlamp\n\n\nYou can download the latest version of screenlamp from the \nGitHub repository\n by clicking on \"Download ZIP\" or download the latest stable release from the \n\"release\" list\n:\n\n\n\n\nSetting up your Python environment for screenlamp\n\n\nPython package dependencies of screenlamp are listed in the \nrequirements.txt\n file located in the screenlamp directory. To install all of these dependencies most conveniently, you can execute the following command:\n\n\npip install -r requirements.txt\n\n\n\nThe the main modules of screenlamp are located in the \ntools/\n subdirectory, and after satisfying the Python package requirements (see \nrequirements.txt\n), they are ready to use. If you haven't used screenlamp before, it is recommended that to read the screenlamp \ntutorial\n.\n\n\nOther software requirements\n\n\nCertain submodules within screenlamp require external software to sample low-energy conformations of molecules and to generate pair-wise overlays. The tools that are currently being used in the \npre-built, automated screening pipeline\n are \nOpenEye OMEGA\n and \nOpenEye ROCS\n to accomplish those tasks. However, screenlamp does not strictly require OMEGA and ROCS, and you are free to use any open source alternative that provided that the output files are compatible with screenlamp tools, which uses the MOL2 file format.\n\n\nIf you don't have access to OpenEye toolkits, yet, you can visit the \nOpenEye website\n for more details on their licensing terms (for example, OpenEye offers a free licensing model for academics engaged in public domain research or teaching).\n\n\nObtaining older versions of screenlamp\n\n\nTo obtain one of the previous versions of screenlamp, please see the \nRelease Notes\n, which contains download links for all release versions of screenlamp.\n\n\nDevelopment version\n\n\nYou can download the latest development version of screenlamp as \nZIP\n file directly from GitHub:\n\n\n\n\n\n\nAlternatively, you can clone the screenlamp development version to your local machine by executing the following command:\n\n\ngit clone https://github.com/psa-lab/screenlamp.git",
            "title": "Installation"
        },
        {
            "location": "/installation/index.html#installing-screenlamp",
            "text": "",
            "title": "Installing screenlamp"
        },
        {
            "location": "/installation/index.html#obtaining-screenlamp",
            "text": "You can download the latest version of screenlamp from the  GitHub repository  by clicking on \"Download ZIP\" or download the latest stable release from the  \"release\" list :",
            "title": "Obtaining screenlamp"
        },
        {
            "location": "/installation/index.html#setting-up-your-python-environment-for-screenlamp",
            "text": "Python package dependencies of screenlamp are listed in the  requirements.txt  file located in the screenlamp directory. To install all of these dependencies most conveniently, you can execute the following command:  pip install -r requirements.txt  The the main modules of screenlamp are located in the  tools/  subdirectory, and after satisfying the Python package requirements (see  requirements.txt ), they are ready to use. If you haven't used screenlamp before, it is recommended that to read the screenlamp  tutorial .",
            "title": "Setting up your Python environment for screenlamp"
        },
        {
            "location": "/installation/index.html#other-software-requirements",
            "text": "Certain submodules within screenlamp require external software to sample low-energy conformations of molecules and to generate pair-wise overlays. The tools that are currently being used in the  pre-built, automated screening pipeline  are  OpenEye OMEGA  and  OpenEye ROCS  to accomplish those tasks. However, screenlamp does not strictly require OMEGA and ROCS, and you are free to use any open source alternative that provided that the output files are compatible with screenlamp tools, which uses the MOL2 file format.  If you don't have access to OpenEye toolkits, yet, you can visit the  OpenEye website  for more details on their licensing terms (for example, OpenEye offers a free licensing model for academics engaged in public domain research or teaching).",
            "title": "Other software requirements"
        },
        {
            "location": "/installation/index.html#obtaining-older-versions-of-screenlamp",
            "text": "To obtain one of the previous versions of screenlamp, please see the  Release Notes , which contains download links for all release versions of screenlamp.",
            "title": "Obtaining older versions of screenlamp"
        },
        {
            "location": "/installation/index.html#development-version",
            "text": "You can download the latest development version of screenlamp as  ZIP  file directly from GitHub:    Alternatively, you can clone the screenlamp development version to your local machine by executing the following command:  git clone https://github.com/psa-lab/screenlamp.git",
            "title": "Development version"
        },
        {
            "location": "/user_guide/doc-overview/index.html",
            "text": "Overview\n\n\nThe screenlamp toolkit is designed in a modular way to provide the building blocks for constructing efficient and flexible virtual screening pipelines. The user documentation consists of three parts:\n\n\n\n\nTools\n: An overview of the different tools within screenlamp and a summary of their usage commands.\n\n\nToolkit Tutorial\n: An example showing how to combine the different tools summarized in the Toolkit API to perform a typical virtual screening run.\n\n\nPipeline Tutorial\n: A preconstructed, automated virtual pipeline based on the tools listed in the Toolkit API and the virtual screening run explained in the Toolkit Tutorial. \n\n\n\n\nIf you are new to screenlamp and would like to get a top-down perspective of what you can do with this toolkit, I recommend starting with the \nPipeline Tutorial\n, which presents you with an automated virtual screening run on a small example dataset. To construct your own virtual screening pipelines and see how the different modules within screenlamp can be used in tandem, please read the \nToolkit Tutorial\n. While reading through the tutorials, the \nTools\n page can be used as a reference for more detailed descriptions of the tools that are available within screenlamp.",
            "title": "Overview"
        },
        {
            "location": "/user_guide/doc-overview/index.html#overview",
            "text": "The screenlamp toolkit is designed in a modular way to provide the building blocks for constructing efficient and flexible virtual screening pipelines. The user documentation consists of three parts:   Tools : An overview of the different tools within screenlamp and a summary of their usage commands.  Toolkit Tutorial : An example showing how to combine the different tools summarized in the Toolkit API to perform a typical virtual screening run.  Pipeline Tutorial : A preconstructed, automated virtual pipeline based on the tools listed in the Toolkit API and the virtual screening run explained in the Toolkit Tutorial.    If you are new to screenlamp and would like to get a top-down perspective of what you can do with this toolkit, I recommend starting with the  Pipeline Tutorial , which presents you with an automated virtual screening run on a small example dataset. To construct your own virtual screening pipelines and see how the different modules within screenlamp can be used in tandem, please read the  Toolkit Tutorial . While reading through the tutorials, the  Tools  page can be used as a reference for more detailed descriptions of the tools that are available within screenlamp.",
            "title": "Overview"
        },
        {
            "location": "/user_guide/tools/index.html",
            "text": "Tools\n\n\nThis page serves as a quick lookup reference for the different modules within screenlamp. Please see the \nToolkit Tutorial\n for a more detailed explanation of the different modules and how they can be combined in a typical virtual screening pipeline.\n\n\ngenerate_conformers_omega.py\n\n\nUsage:\n\n\n generate_conformers_omega.py [-h] -i INPUT -o OUTPUT --executable\n\n\n\nEXECUTABLE [--settings SETTINGS]\n\n[--processes PROCESSES] [-v]\n\nWrapper running OpenEye OMEGA on one\nor more database partitions.\n\n\nArguments:\n\n\n\n\n-h, --help\n\nShow this help message and exit\n\n\n-i INPUT, --input INPUT\n\nInput directory with \n.mol2\n and \n.mol2.gz\n files.\n\n\n-o OUTPUT, --output OUTPUT\n\nDirectory for writing the output files.\n\n\n--executable EXECUTABLE\n\n(Required.) The path or command for running\nOpenEye OMEGA2 on your system.\n\n\n--settings SETTINGS   (Optional.) OMEGA settings to use.\n  \n\n\n--processes PROCESSES\n\n(Optional, default: \n1\n.) Number of processes to run in parallel.\nIf processes > 0, the specified number of CPUs\nwill be used.\nIf processes = 0, all available CPUs will\nbe used.\nIf processes = -1, all available CPUs\nminus \nprocesses\n will be used.\n\n\n-v, --version\n\nShow program's version number and exit\n\n\n\n\nExample:\n\n\npython generate_conformers_omega.py\\\n--input dbase_mol2\\\n--output dbase_conformers/\\\n--executable /.../omega2-2.5.1.4\\\n--processes 0\n\n\n\n\ngenerate_conformers_obabel.py\n\n\nUsage:\n\n\n generate_conformers_obabel.py [-h] -i INPUT -o OUTPUT --executable\n\n\n\nEXECUTABLE [--settings SETTINGS] [-v]\nWrapper running OpenBabel Confab on one\nor more database partitions. Please see\nhttp://open-babel.readthedocs.io/en/latest/3DStructureGen/multipleconformers.html\nif you want to learn more about OpenBabel Confab.\n\n\nArguments:\n\n\n\n\n-h, --help\n\nShow this help message and exit\n\n\n-i INPUT, --input INPUT\n\nInput directory with \n.mol2\n and \n.mol2.gz\n files.\n\n\n-o OUTPUT, --output OUTPUT\n\nDirectory for writing the output files.\n\n\n--executable EXECUTABLE\n\n(Required.) The path or command for running\nOpenBabel Confab on your system.\n\n\n--settings SETTINGS   (Optional.) OpenBabel settings to use.\n  \n\n\n-v, --version\n\nShow program's version number and exit\n\n\n\n\nExample:\n\n\npython generate_conformers_obabel.py\\\n--input dbase_mol2/\\\n--output dbase_conformers/\\\n--executable /.../obabel\n\n\n\n\nmerge_id_files.py\n\n\nUsage:\n\n\n merge_id_files.py [-h] -i1 INPUT1 -i2 INPUT2 -o OUTPUT [--version]\n\n\n\nMerges two Molecule ID files\n(e.g., created via \ndatatable_to_id.py\n, \nfuncgroup_presence_to_id.py\n\nor \nmol2_to_id.py\n) into a single ID file\nwhile preventing duplicate entries.\n\n\nArguments:\n\n\n\n\n-h, --help\n\nShow this help message and exit\n\n\n-i1 INPUT1, --input1 INPUT1\n\n(Required.) Input ID file that contains molecule\nIDs (one ID per line).\n\n\n-i2 INPUT2, --input2 INPUT2\n\n(Required.) Input ID file that contains molecule\nIDs (one ID per line).\n\n\n-o OUTPUT, --output OUTPUT\n\n(Required.) Path to the output ID file.\n\n\n--version             show program's version number and exit\n  \n\n\n\n\nExample:\n\n\npython merge_id_files.py\\\n--input1 mol2s_1.txt\\\n--input2 mol2s_2.txt\\\n--output merged.txt\n\n\n\n\noverlay_molecules_shapeit.py\n\n\nUsage:\n\n\n overlay_molecules_shapeit.py [-h] -i INPUT -o OUTPUT --query QUERY\n\n\n\n--executable EXECUTABLE\n\n[--settings SETTINGS] [-v]\n\nWrapper running Silicos-it Shape-it on one\nor more database partitions.\nFor more information about Shape-it, please see http://silicos-it.be.s3-website-eu-west-1.amazonaws.com/software/shape-it/1.0.1/shape-it.html\n\n\nArguments:\n\n\n\n\n-h, --help\n\nShow this help message and exit\n\n\n-i INPUT, --input INPUT\n\nPath to input directory containing the database\nmolecules in \n.mol2\n and/or \n.mol2.gz\n format.\n\n\n-o OUTPUT, --output OUTPUT\n\n(Required.) Directory path for writing the \n.mol2\n\noverlays and Shape-it score/report (\n.rpt\n) files.\n\n\n--query QUERY         (Required.) Path to the query molecule\n\nin \n.mol2\n and/or \n.mol2.gz\n format.\nThe query molecule file could be a single\nstructure of multiple-conformers of the same\nstructure. If a multi-conformer file is\nsubmitted, please make sure that all\nconformers in the mol2 file have the same\nmolecule ID/Name.\n\n\n--executable EXECUTABLE\n\n(Required.) The path or command for running\nSlicos-it Shape-it on your system.\n\n\n--settings SETTINGS   (Optional, default:\" --rankBy Tanimoto\")\n\nshape-it settings to use.\n\n\n-v, --version\n\nShow program's version number and exit\n\n\n\n\nExample:\n\n\npython overlay_molecules_shapeit.py\\\n--input database_conformers/\\\n--output shapeit_overlays/\\\n--executable 'shape-it'\\\n--query query.mol2\\\n--settings \"--rankby Tanimoto\n\n\n\n\noverlay_molecules_rocs.py\n\n\nUsage:\n\n\n overlay_molecules_rocs.py [-h] -i INPUT -o OUTPUT --query QUERY\n\n\n\n--executable EXECUTABLE [--settings SETTINGS]\n\n[--processes PROCESSES] [-v]\n\nWrapper running OpenEye ROCS on one\nor more database partitions.\n\n\nArguments:\n\n\n\n\n-h, --help\n\nShow this help message and exit\n\n\n-i INPUT, --input INPUT\n\nPath to input directory containing the database\nmolecules in \n.mol2\n and/or \n.mol2.gz\n format.\n\n\n-o OUTPUT, --output OUTPUT\n\n(Required.) Directory path for writing the \n.mol2\n\noverlay ROCS status and ROCS report (\n.rpt\n) files.\n\n\n--query QUERY         (Required.) Path to the query molecule\n\nin \n.mol2\n and/or \n.mol2.gz\n format.\nThe query molecule file could be a single\nstructure of multiple-conformers of the same\nstructure. If a multi-conformer file is\nsubmitted, please make sure that all\nconformers in the mol2 file have the same\nmolecule ID/Name.\n\n\n--executable EXECUTABLE\n\n(Required.) The path or command for running\nOpenEye ROCS on your system.\n\n\n--settings SETTINGS   (Optional, default:\" -rankby TanimotoCombo -maxhits 0 -besthits 0 -progress percent\")\n\nROCS settings to use.\n\n\n--processes PROCESSES\n\n(Optional, default: \n1\n.) Number of processes to run in parallel.\nIf processes > 0, the specified number of CPUs\nwill be used.\nIf processes = 0, all available CPUs will\nbe used.\nIf processes = -1, all available CPUs\nminus \nprocesses\n will be used.\n\n\n-v, --version\n\nShow program's version number and exit\n\n\n\n\nExample:\n\n\npython overlay_molecules_rocs.py\\\n--input database_conformers/\\\n--output rocs_overlays/\\\n--executable /.../rocs-3.2.1.4\\\n--query query.mol2\\\n--settings \"-rankby TanimotoCombo -maxhits 0 -besthits 0 -progress percent\"\\\n--processes 0\n\n\n\n\nfuncgroup_matching.py\n\n\nUsage:\n\n\n funcgroup_matching.py [-h] -i INPUT -o OUTPUT [-d MAX_DISTANCE]\n\n\n\n[--processes PROCESSES] [-v VERBOSE] [--version]\n\nGenerates tab-separated tables with containing atom\ntype and charge information from matching\natoms in pair-wise overlays.\n\n\nArguments:\n\n\n\n\n-h, --help\n\nShow this help message and exit\n\n\n-i INPUT, --input INPUT\n\n(Required.) Path to a directory containing pairs\nof \n*_query.mol2\n/\n.mol2.gz\n\nand \n*_dbase.mol2\n/\n.mol2.gz\n files\n\n\n-o OUTPUT, --output OUTPUT\n\n(Required.) Path to a directory for writing\nthe output files\n\n\n-d MAX_DISTANCE, --max_distance MAX_DISTANCE\n\n(Optional, default: \n1.3\n.) The maximum distance,\nin angstroms, the\noverlayed atoms can be apart from each\nother for being considered a match.\nFor instance, a --max_distance 1.3 (default)\nwould count atoms as a match if they\nare within 0 and 1.3 angstroms\nto the target atom.\n\n\n--processes PROCESSES\n\n(Optional, default: \n1\n.) Number of processes to run in parallel.\nIf processes > 0, the specified number of CPUs\nwill be used.\nIf processes = 0, all available CPUs will\nbe used.\nIf processes = -1, all available CPUs\nminus \nprocesses\n will be used.\n\n\n-v VERBOSE, --verbose VERBOSE\n\n(Optional, default: \n1\n.) Verbosity level. If 0, does not print any output.\nIf 1 (default), prints the file currently processing.\n\n\n--version             show program's version number and exit\n  \n\n\n\n\nExample:\n\n\npython funcgroup_matching.py\\\n--input rocs_overlays_sorted/\\\n--output matching_tables/\\\n--max_distance 1.3\\\n--processes 0\n\n\n\n\nsort_rocs_mol2.py\n\n\nUsage:\n\n\n sort_rocs_mol2.py [-h] -i INPUT -o OUTPUT --query QUERY [-s SORTBY]\n\n\n\n[--selection SELECTION] [--separator SEPARATOR]\n\n\n[--id_suffix ID_SUFFIX] [-v VERBOSE] [--version]\n\nSorts ROCS results by score and creates\nseparate .mol2 files for the database and query molecules.\n\n\nArguments:\n\n\n\n\n-h, --help\n\nShow this help message and exit\n\n\n-i INPUT, --input INPUT\n\n(Required.) Input directory with results from a ROCS run.\n\n\n-o OUTPUT, --output OUTPUT\n\n(Required.) Directory path for writing the \n.mol2\n overlay\nROCS status and ROCS report (\n.rpt\n) files\n\n\n--query QUERY         (Required.) Path to the query molecule\n\nin \n.mol2\n and/or \n.mol2.gz\n format.\nThe query molecule file could be a single\nstructure of multiple-conformers of the same\nstructure. If a multi-conformer file is\nsubmitted, please make sure that all\nconformers in the mol2 file have the same\nmolecule ID/Name.\n\n\n-s SORTBY, --sortby SORTBY\n\n(Optional, default: \n\"TanimotoCombo,ColorTanimoto\"\n)\nScore column(s) in ROCS report files that\nthe structures should be sorted by.\n\n\n--selection SELECTION\n\n(Optional, default: \n\"(TanimotoCombo >= 1.0)) & (ColorTanimoto >= 0.25)\"\n)\nSelection string to exclude molecules above\nor below a certain score threshold. By default\nall molecules with a ColorTanimoto score smaller than 0.25\nand a TanimotoCombo score smaller than 1.0 will be disregarded.\n\n\n--separator SEPARATOR\n\n(Optional, default: \n\"\\t\"\n.) Column separator used\nin the input table.\nAssumes tab-separated values by default.\n\n\n--id_suffix ID_SUFFIX\n\n(Optional, default: \n\"False\"\n.)\nIf \n--id_suffix \"True\"\n, a molecule ID suffix\nwill be added to the query\nmolecules in the order the ROCS query molecules\nappear in a multi-conformer query file.\nFor instance, if all query molecules are labeled \"3kPZS\",\nthen the same structures in the output file are labeled\n3kPZS_1, 3kPZS_2, ... Note that those modified conformer\nwill correspond to the conformer names in the ROCS report\ntables. However, they may appear in an unsorted order in\nthe _query files, which are sorted by the overlay score\nof the database molecules. For example, if the\ndatabase molecule is called ZINC123_112, first\nentry in the _query file that corresponds to *_dbase\nfile may by labeled 3kPZS_11 if the 11th 3kPZS conformer\nis the best match according to ROCS.\n\n\n-v VERBOSE, --verbose VERBOSE\n\nVerbosity level. If 0, does not print any output.\nIf 1 (default), prints the file currently\nprocessing.\n\n\n--version             show program's version number and exit\n  \n\n\n\n\nExample:\n\n\npython sort_rocs_mol2.py -i rocs_results/\\\n--output rocs_sorted/ --query mol.mol2\\\n--sortby TanimotoCombo,ColorTanimoto\\\n--selection \"(TanimotoCombo >= 0.75) & (ColorTanimoto >= 0.1)\"\n\n\n\n\ncount_mol2.py\n\n\nUsage:\n\n\n count_mol2.py [-h] -i INPUT [-v]\n\n\n\nA command line tool for counting the number of molecules in MOL2 files.\n\n\nArguments:\n\n\n\n\n-h, --help\n\nShow this help message and exit\n\n\n-i INPUT, --input INPUT\n\n(Required.) Path to a \n.mol2\n or \n.mol2.gz\nfile,\nor a directory containing \n.mol2\n/\n.mol2.gz\n files.\n\n\n-v, --version\n\nShow program's version number and exit\n\n\n\n\nExample:\n\n\npython count_mol2.py -i mol2_dir/\npython count_mol2.py -i partition_1.mol2\n\n\n\n\nfuncgroup_matching_selection.py\n\n\nUsage:\n\n\n funcgroup_matching_selection.py [-h] -i INPUT [--input_mol2 INPUT_MOL2]\n\n\n\n-o OUTPUT\n\n[--atomtype_selection ATOMTYPE_SELECTION]\n\n\n[--charge_selection CHARGE_SELECTION]\n\n\n[-v VERBOSE] [--version]\n\nSelects molecules with certain functional group matching patterns after functional group matching.\n\n\nArguments:\n\n\n\n\n-h, --help\n\nShow this help message and exit\n\n\n-i INPUT, --input INPUT\n\n(Required.) Input directory with input \n.tsv\n tables (functional group files generated via \nfuncgroup_matching.py\n).\n\n\n--input_mol2 INPUT_MOL2\n\n(Optional.) Input directory with input \n.mol2\n structures (ROCS overlays\ngenerated via \nsort_rocs_mol2.py\n). If provided, the MOL2 structures\ncorresponding to the selected matches will be extracted from the\ninput_mol2 directory and written to the output directory for visual inspection,\nfor example, using PyMOL.\n\n\n-o OUTPUT, --output OUTPUT\n\n(Required.) Directory for writing the output files.\n\n\n--atomtype_selection ATOMTYPE_SELECTION\n\n(Optional, default=\"\") Selection condition for the atom types.\nFor example, the following selection query will make a selection based on\nmatching 2 atoms in the reference molecule, S1 and O2:\n\"((S1 == 'S.3') | (S1 == 'S.o2')) --> (O2 == 'O.2')\".\nHere, S1 can either match an S.3 or an S.o2 atom in the database molecule.\nThe second atom, O2, must match an atom of type O.2.\n\n\n--charge_selection CHARGE_SELECTION\n\n(Optional, default=\"\") Selection condition for the atom charges.\nFor example, the following selection query will make a selection based on\nmatching the charges in 2 atoms in the reference molecule, S1 and O2:\n\"((S1 >= 1.0)) --> (O2 <= -0.5)\".\nHere, the atom that matches S1 has to have a positive charge, 1 or greater. The charge\nmatching the second atom, O2, must be (partially) negative (-0.5 or smaller).\n\n\n-v VERBOSE, --verbose VERBOSE\n\n(Optional, default: \n1\n.) Verbosity level. If 0, does not print any\noutput.\nIf 1 (default), prints the file currently\nprocessing.\n\n\n--version             show program's version number and exit\n  \n\n\n\n\nExample:\n\n\npython funcgroup_matching_selection.py\\\n--input 07_fgroup_matching_tables # generated via funcgroup_matching.py\\\n--input_mol2 06_rocs_overlays_sorted # generated via sort_rocs_mol2.py\\\n--output 08_funcgroup_selection\\\n--atomtype_selection \"((S1 == 'S.3') | (S1 == 'S.o2')) --> (O2 == 'O.2')\"\\\n--charge_selection FGROUP_CHARGE \"((S1 >= 1.0)) --> (O2 <= -0.5)\"\n\n\n\n\nenumerate_conformers.py\n\n\nUsage:\n\n\n enumerate_conformers.py [-h] -i INPUT -o OUTPUT [-v VERBOSE]\n\n\n\n[--version]\n\nNumbers molecules in MOL2 files by adding a suffix as index. For example, if there are three molecules in a MOL2 file, moleculeabc_0, moleculeabc_1, and moleculedef_0,\nthose molecules will be relabeled to moleculeabc_0, moleculeabc_1, and moleculedef_0.\n\n\nArguments:\n\n\n\n\n-h, --help\n\nShow this help message and exit\n\n\n-i INPUT, --input INPUT\n\n(Required.) Path to a \n.mol2\n or \n.mol2.gz\nfile,\nor a directory containing \n.mol2\n/\n.mol2.gz\n files.\n\n\n-o OUTPUT, --output OUTPUT\n\n(Required.) Directory path for writing the numbered MOL2s\n\n\n-v VERBOSE, --verbose VERBOSE\n\nVerbosity level. If 0, does not print any output.\nIf 1 (default), prints the file currently\nprocessing.\n\n\n--version             show program's version number and exit\n  \n\n\n\n\nExample:\n\n\npython enumerate_conformers.py -i conformer_mol2s/\\\n--output numbered_conformers/\n\n\n\n\nid_to_mol2.py\n\n\nUsage:\n\n\n id_to_mol2.py [-h] -i INPUT --id_file ID_FILE -o OUTPUT\n\n\n\n[-w INCLUDELIST] [-v VERBOSE] [--version]\n\nCreate filtered MOL2 files from ID and input MOL2 files.\n\n\nArguments:\n\n\n\n\n-h, --help\n\nShow this help message and exit\n\n\n-i INPUT, --input INPUT\n\n(Required.) Input \n.mol2\n or \n.mol2.gz\n file, or a directory of MOL2 files.\n\n\n--id_file ID_FILE     (Required.) Input ID file that contains molecule\n\nIDs (one ID per line).\n\n\n-o OUTPUT, --output OUTPUT\n\n(Required.) Output directory path for the\nfiltered MOL2 files.\n\n\n-w INCLUDELIST, --includelist INCLUDELIST\n\n(Optional, default: \nTrue\n.) Uses ID file as includelist if True (default).\nUses ID file as excludelist if False.\n\n\n-v VERBOSE, --verbose VERBOSE\n\n(Optional, default: \n1\n.) Verbosity level. If 0, does not print any\noutput.\nIf 1 (default), prints the file currently\nprocessing.\n\n\n--version             show program's version number and exit\n  \n\n\n\n\nExample:\n\n\npython id_to_mol2.py --input mol2_dir/\\\n--id_file ids.txt\\\n--includelist True\\\n--output filtered_mol2_dir/\n\n\n\n\nfuncgroup_distance_to_id.py\n\n\nUsage:\n\n\n funcgroup_distance_to_id.py [-h] -i INPUT -o OUTPUT -s SELECTION -d\n\n\n\nDISTANCE [--processes PROCESSES]\n\n[-v VERBOSE] [--version]\n\nA command line tool for filtering mol2 files\nby the distance of two atoms or functional groups.\n\n\nArguments:\n\n\n\n\n-h, --help\n\nShow this help message and exit\n\n\n-i INPUT, --input INPUT\n\n(Required.) Path to a \n.mol2\n or \n.mol2.gz\n file,\nor a directory containing \n.mol2\n/\n.mol2.gz\nfiles.\n\n\n-o OUTPUT, --output OUTPUT\n\n(Required.) Directory for writing the output files.\n\n\n-s SELECTION, --selection SELECTION\n\n(Required.) Selection condition for the atom distance checks.\n1) Selection example to compare 2 atom types:\n\n\"(atom_type == 'S.o2') --> (atom_type == 'O.2')\"\n.\n2) Selection example to consider either an S.o2 or S.3 atom to an O.2 atom:\n\n\"((atom_type == 'S.3') | (atom_type == 'S.o2')) --> (atom_type == 'O.2')\"\n.\n3) Selection example using logical ORs on both sides:\n\n\"((atom_type == 'S.3') | (atom_type == 'S.o2')) -->  ((atom_type == 'O.2') | (atom_type == 'O.3'))\"\n.\n\n\n-d DISTANCE, --distance DISTANCE\n\n(Required.) A distance range formatted\nas \"lowerbound-upperbound\".\nFor example, if 13-20 is provided as an\nargument, two atoms are considered a match\nif they are not closer than 13 angstroms and\nnot farther than 20 angstroms.\n\n\n--processes PROCESSES\n\n(Optional, default: \n1\n.) Number of processes to run in parallel.\nIf processes > 0, the specified number of CPUs\nwill be used.\nIf processes = 0, all available CPUs will\nbe used.\nIf processes = -1, all available CPUs\nminus \nprocesses\n will be used.\n\n\n-v VERBOSE, --verbose VERBOSE\n\n(Optional, default: \n1\n.) Verbosity level. If 0, does not print any output.\nIf 1 (default), prints the file currently processing.\n\n\n--version             show program's version number and exit\n  \n\n\n\n\nExample:\n\n\npython funcgroup_distance_to_id.py\\\n--input mol2_dir/\\\n--output ids.txt\\\n--selection \"((atom_type == 'S.3') | (atom_type == 'S.o2')) --> (atom_type == 'O.2')\"\\\n--distance 13-20\\\n--processes 0\n\\# The example above selects those molecules\n\\# that contain S.2 or S.o2 atom that is within\n\\# a 13-20 angstroms distance to an 'O.2' (sp2/keto oxygen) atom\n\n\n\n\nmol2_to_id.py\n\n\nUsage:\n\n\n mol2_to_id.py [-h] -i INPUT -o OUTPUT [-v VERBOSE] [--version]\n\n\n\nWrites a file with molecule IDs from MOL2 files.\n\n\nArguments:\n\n\n\n\n-h, --help\n\nShow this help message and exit\n\n\n-i INPUT, --input INPUT\n\n(Required.) Input \n.mol2\n or \n.mol2.gz\n file,or a directory of MOL2 files.\n\n\n-o OUTPUT, --output OUTPUT\n\n(Required.) Output path for the ID file. For example, \nids.txt\n.\n\n\n-v VERBOSE, --verbose VERBOSE\n\n(Optional, default: \n1\n.) Verbosity level. If 0, does not print any output. If 1 (default), prints the file currently processing.\n\n\n--version             show program's version number and exit\n  \n\n\n\n\nExample:\n\n\npython mol2_to_id.py\\\n--input mol2_dir\\\n--output ids.txt\n\n\n\n\ndatatable_to_id.py\n\n\nUsage:\n\n\n datatable_to_id.py [-h] -i INPUT -o OUTPUT --id_column ID_COLUMN\n\n\n\n[--separator SEPARATOR] [-s SELECTION] [-v VERBOSE]\n\n\n[--version]\n\nCreate a text file with molecule IDs from MOL2 files.\n\n\nArguments:\n\n\n\n\n-h, --help\n\nShow this help message and exit\n\n\n-i INPUT, --input INPUT\n\n(Required.) Path to a datatable file where each\nrow represents a molecule and each columns\nstore the molecular features.\n\n\n-o OUTPUT, --output OUTPUT\n\n(Required.) Output path for the ID file (for example, \nids.txt\n).\n\n\n--id_column ID_COLUMN\n\n(Required.) Name of the Molecule ID column.\n\n\n--separator SEPARATOR\n\n(Optional, default: \n\"  \"\n.) Column separator used\nin the input table.\nAssumes tab-separated values by default.\n\n\n-s SELECTION, --selection SELECTION\n\n(Optional, default: \nNone\n.) A conditional selection string:\nSingle column selection example: \n\"(MWT > 500)\"\n.  Logical OR example: \n\"(MWT > 500) | (MWT < 200)\"\n. Logical AND example: \n\"(NRB <= 7) & (MWT > 200)\"\n.\n\n\n-v VERBOSE, --verbose VERBOSE\n\n(Optional, default: \n1\n.) Verbosity level. If 0, does not print any\noutput.\nIf 1 (default), prints the file currently\nprocessing.\n\n\n--version             show program's version number and exit\n  \n\n\n\n\nExample:\n\n\npython datatable_to_id.py\\\n--input table.txt\\\n--output ids.txt\\\n--id_column ZINC_ID\\\n--selection \"(NRB <= 7) & (MWT > 200)\"\n\n\n\n\nfuncgroup_presence_to_id.py\n\n\nUsage:\n\n\n funcgroup_presence_to_id.py [-h] -i INPUT -o OUTPUT -s SELECTION\n\n\n\n[--processes PROCESSES] [-v VERBOSE]\n\n\n[--version]\n\nChecking molecules base on the presence\nof certain atoms or functional groups and writing the results to a text file.\n\n\nArguments:\n\n\n\n\n-h, --help\n\nShow this help message and exit\n\n\n-i INPUT, --input INPUT\n\n(Required.) Input directory with \n.mol2\n and \n.mol2.gz\n files.\n\n\n-o OUTPUT, --output OUTPUT\n\n(Required.) Directory for writing the output files.\n\n\n-s SELECTION, --selection SELECTION\n\nSelection condition for the atom presence checks.\n1) Require 2 atom types to be present:\n\"(atom_type == 'S.o2') --> (atom_type == 'O.2')\"\n2) Selection example to consider either an S.o2 or S.3 atom and a O.2 atom to be present:\n\"((atom_type == 'S.3') | (atom_type == 'S.o2')) --> (atom_type == 'O.2')\"\n3) Selection example using logical ORs on both sides:\n\"((atom_type == 'S.3') | (atom_type == 'S.o2')) -->  ((atom_type == 'O.2') | (atom_type == 'O.3'))\"\n\n\n--processes PROCESSES\n\n(Optional, default: \n1\n.) Number of processes to run in parallel.\nIf processes > 0, the specified number of CPUs\nwill be used.\nIf processes = 0, all available CPUs will\nbe used.\nIf processes = -1, all available CPUs\nminus \nprocesses\n will be used.\n\n\n-v VERBOSE, --verbose VERBOSE\n\n(Optional, default: \n1\n.) Verbosity level. If 0, does not print any\noutput.\nIf 1 (default), prints the file currently\nprocessing.\n\n\n--version             show program's version number and exit\n  \n\n\n\n\nExample:\n\n\npython funcgroup_presence_to_id.py --input mol2s/\\\n--output mol2ids.txt\\\n--selection \"((atom_type == 'S.3') | (atom_type == 'S.o2')) --> (atom_type == 'O.2')\"\\\n--processes 0",
            "title": "Tools"
        },
        {
            "location": "/user_guide/tools/index.html#tools",
            "text": "This page serves as a quick lookup reference for the different modules within screenlamp. Please see the  Toolkit Tutorial  for a more detailed explanation of the different modules and how they can be combined in a typical virtual screening pipeline.",
            "title": "Tools"
        },
        {
            "location": "/user_guide/tools/index.html#generate_conformers_omegapy",
            "text": "Usage:   generate_conformers_omega.py [-h] -i INPUT -o OUTPUT --executable  EXECUTABLE [--settings SETTINGS] [--processes PROCESSES] [-v] \nWrapper running OpenEye OMEGA on one\nor more database partitions.  Arguments:   -h, --help \nShow this help message and exit  -i INPUT, --input INPUT \nInput directory with  .mol2  and  .mol2.gz  files.  -o OUTPUT, --output OUTPUT \nDirectory for writing the output files.  --executable EXECUTABLE \n(Required.) The path or command for running\nOpenEye OMEGA2 on your system.  --settings SETTINGS   (Optional.) OMEGA settings to use.     --processes PROCESSES \n(Optional, default:  1 .) Number of processes to run in parallel.\nIf processes > 0, the specified number of CPUs\nwill be used.\nIf processes = 0, all available CPUs will\nbe used.\nIf processes = -1, all available CPUs\nminus  processes  will be used.  -v, --version \nShow program's version number and exit   Example:  python generate_conformers_omega.py\\\n--input dbase_mol2\\\n--output dbase_conformers/\\\n--executable /.../omega2-2.5.1.4\\\n--processes 0",
            "title": "generate_conformers_omega.py"
        },
        {
            "location": "/user_guide/tools/index.html#generate_conformers_obabelpy",
            "text": "Usage:   generate_conformers_obabel.py [-h] -i INPUT -o OUTPUT --executable  EXECUTABLE [--settings SETTINGS] [-v]\nWrapper running OpenBabel Confab on one\nor more database partitions. Please see\nhttp://open-babel.readthedocs.io/en/latest/3DStructureGen/multipleconformers.html\nif you want to learn more about OpenBabel Confab.  Arguments:   -h, --help \nShow this help message and exit  -i INPUT, --input INPUT \nInput directory with  .mol2  and  .mol2.gz  files.  -o OUTPUT, --output OUTPUT \nDirectory for writing the output files.  --executable EXECUTABLE \n(Required.) The path or command for running\nOpenBabel Confab on your system.  --settings SETTINGS   (Optional.) OpenBabel settings to use.     -v, --version \nShow program's version number and exit   Example:  python generate_conformers_obabel.py\\\n--input dbase_mol2/\\\n--output dbase_conformers/\\\n--executable /.../obabel",
            "title": "generate_conformers_obabel.py"
        },
        {
            "location": "/user_guide/tools/index.html#merge_id_filespy",
            "text": "Usage:   merge_id_files.py [-h] -i1 INPUT1 -i2 INPUT2 -o OUTPUT [--version]  Merges two Molecule ID files\n(e.g., created via  datatable_to_id.py ,  funcgroup_presence_to_id.py \nor  mol2_to_id.py ) into a single ID file\nwhile preventing duplicate entries.  Arguments:   -h, --help \nShow this help message and exit  -i1 INPUT1, --input1 INPUT1 \n(Required.) Input ID file that contains molecule\nIDs (one ID per line).  -i2 INPUT2, --input2 INPUT2 \n(Required.) Input ID file that contains molecule\nIDs (one ID per line).  -o OUTPUT, --output OUTPUT \n(Required.) Path to the output ID file.  --version             show program's version number and exit      Example:  python merge_id_files.py\\\n--input1 mol2s_1.txt\\\n--input2 mol2s_2.txt\\\n--output merged.txt",
            "title": "merge_id_files.py"
        },
        {
            "location": "/user_guide/tools/index.html#overlay_molecules_shapeitpy",
            "text": "Usage:   overlay_molecules_shapeit.py [-h] -i INPUT -o OUTPUT --query QUERY  --executable EXECUTABLE [--settings SETTINGS] [-v] \nWrapper running Silicos-it Shape-it on one\nor more database partitions.\nFor more information about Shape-it, please see http://silicos-it.be.s3-website-eu-west-1.amazonaws.com/software/shape-it/1.0.1/shape-it.html  Arguments:   -h, --help \nShow this help message and exit  -i INPUT, --input INPUT \nPath to input directory containing the database\nmolecules in  .mol2  and/or  .mol2.gz  format.  -o OUTPUT, --output OUTPUT \n(Required.) Directory path for writing the  .mol2 \noverlays and Shape-it score/report ( .rpt ) files.  --query QUERY         (Required.) Path to the query molecule \nin  .mol2  and/or  .mol2.gz  format.\nThe query molecule file could be a single\nstructure of multiple-conformers of the same\nstructure. If a multi-conformer file is\nsubmitted, please make sure that all\nconformers in the mol2 file have the same\nmolecule ID/Name.  --executable EXECUTABLE \n(Required.) The path or command for running\nSlicos-it Shape-it on your system.  --settings SETTINGS   (Optional, default:\" --rankBy Tanimoto\") \nshape-it settings to use.  -v, --version \nShow program's version number and exit   Example:  python overlay_molecules_shapeit.py\\\n--input database_conformers/\\\n--output shapeit_overlays/\\\n--executable 'shape-it'\\\n--query query.mol2\\\n--settings \"--rankby Tanimoto",
            "title": "overlay_molecules_shapeit.py"
        },
        {
            "location": "/user_guide/tools/index.html#overlay_molecules_rocspy",
            "text": "Usage:   overlay_molecules_rocs.py [-h] -i INPUT -o OUTPUT --query QUERY  --executable EXECUTABLE [--settings SETTINGS] [--processes PROCESSES] [-v] \nWrapper running OpenEye ROCS on one\nor more database partitions.  Arguments:   -h, --help \nShow this help message and exit  -i INPUT, --input INPUT \nPath to input directory containing the database\nmolecules in  .mol2  and/or  .mol2.gz  format.  -o OUTPUT, --output OUTPUT \n(Required.) Directory path for writing the  .mol2 \noverlay ROCS status and ROCS report ( .rpt ) files.  --query QUERY         (Required.) Path to the query molecule \nin  .mol2  and/or  .mol2.gz  format.\nThe query molecule file could be a single\nstructure of multiple-conformers of the same\nstructure. If a multi-conformer file is\nsubmitted, please make sure that all\nconformers in the mol2 file have the same\nmolecule ID/Name.  --executable EXECUTABLE \n(Required.) The path or command for running\nOpenEye ROCS on your system.  --settings SETTINGS   (Optional, default:\" -rankby TanimotoCombo -maxhits 0 -besthits 0 -progress percent\") \nROCS settings to use.  --processes PROCESSES \n(Optional, default:  1 .) Number of processes to run in parallel.\nIf processes > 0, the specified number of CPUs\nwill be used.\nIf processes = 0, all available CPUs will\nbe used.\nIf processes = -1, all available CPUs\nminus  processes  will be used.  -v, --version \nShow program's version number and exit   Example:  python overlay_molecules_rocs.py\\\n--input database_conformers/\\\n--output rocs_overlays/\\\n--executable /.../rocs-3.2.1.4\\\n--query query.mol2\\\n--settings \"-rankby TanimotoCombo -maxhits 0 -besthits 0 -progress percent\"\\\n--processes 0",
            "title": "overlay_molecules_rocs.py"
        },
        {
            "location": "/user_guide/tools/index.html#funcgroup_matchingpy",
            "text": "Usage:   funcgroup_matching.py [-h] -i INPUT -o OUTPUT [-d MAX_DISTANCE]  [--processes PROCESSES] [-v VERBOSE] [--version] \nGenerates tab-separated tables with containing atom\ntype and charge information from matching\natoms in pair-wise overlays.  Arguments:   -h, --help \nShow this help message and exit  -i INPUT, --input INPUT \n(Required.) Path to a directory containing pairs\nof  *_query.mol2 / .mol2.gz \nand  *_dbase.mol2 / .mol2.gz  files  -o OUTPUT, --output OUTPUT \n(Required.) Path to a directory for writing\nthe output files  -d MAX_DISTANCE, --max_distance MAX_DISTANCE \n(Optional, default:  1.3 .) The maximum distance,\nin angstroms, the\noverlayed atoms can be apart from each\nother for being considered a match.\nFor instance, a --max_distance 1.3 (default)\nwould count atoms as a match if they\nare within 0 and 1.3 angstroms\nto the target atom.  --processes PROCESSES \n(Optional, default:  1 .) Number of processes to run in parallel.\nIf processes > 0, the specified number of CPUs\nwill be used.\nIf processes = 0, all available CPUs will\nbe used.\nIf processes = -1, all available CPUs\nminus  processes  will be used.  -v VERBOSE, --verbose VERBOSE \n(Optional, default:  1 .) Verbosity level. If 0, does not print any output.\nIf 1 (default), prints the file currently processing.  --version             show program's version number and exit      Example:  python funcgroup_matching.py\\\n--input rocs_overlays_sorted/\\\n--output matching_tables/\\\n--max_distance 1.3\\\n--processes 0",
            "title": "funcgroup_matching.py"
        },
        {
            "location": "/user_guide/tools/index.html#sort_rocs_mol2py",
            "text": "Usage:   sort_rocs_mol2.py [-h] -i INPUT -o OUTPUT --query QUERY [-s SORTBY]  [--selection SELECTION] [--separator SEPARATOR]  [--id_suffix ID_SUFFIX] [-v VERBOSE] [--version] \nSorts ROCS results by score and creates\nseparate .mol2 files for the database and query molecules.  Arguments:   -h, --help \nShow this help message and exit  -i INPUT, --input INPUT \n(Required.) Input directory with results from a ROCS run.  -o OUTPUT, --output OUTPUT \n(Required.) Directory path for writing the  .mol2  overlay\nROCS status and ROCS report ( .rpt ) files  --query QUERY         (Required.) Path to the query molecule \nin  .mol2  and/or  .mol2.gz  format.\nThe query molecule file could be a single\nstructure of multiple-conformers of the same\nstructure. If a multi-conformer file is\nsubmitted, please make sure that all\nconformers in the mol2 file have the same\nmolecule ID/Name.  -s SORTBY, --sortby SORTBY \n(Optional, default:  \"TanimotoCombo,ColorTanimoto\" )\nScore column(s) in ROCS report files that\nthe structures should be sorted by.  --selection SELECTION \n(Optional, default:  \"(TanimotoCombo >= 1.0)) & (ColorTanimoto >= 0.25)\" )\nSelection string to exclude molecules above\nor below a certain score threshold. By default\nall molecules with a ColorTanimoto score smaller than 0.25\nand a TanimotoCombo score smaller than 1.0 will be disregarded.  --separator SEPARATOR \n(Optional, default:  \"\\t\" .) Column separator used\nin the input table.\nAssumes tab-separated values by default.  --id_suffix ID_SUFFIX \n(Optional, default:  \"False\" .)\nIf  --id_suffix \"True\" , a molecule ID suffix\nwill be added to the query\nmolecules in the order the ROCS query molecules\nappear in a multi-conformer query file.\nFor instance, if all query molecules are labeled \"3kPZS\",\nthen the same structures in the output file are labeled\n3kPZS_1, 3kPZS_2, ... Note that those modified conformer\nwill correspond to the conformer names in the ROCS report\ntables. However, they may appear in an unsorted order in\nthe _query files, which are sorted by the overlay score\nof the database molecules. For example, if the\ndatabase molecule is called ZINC123_112, first\nentry in the _query file that corresponds to *_dbase\nfile may by labeled 3kPZS_11 if the 11th 3kPZS conformer\nis the best match according to ROCS.  -v VERBOSE, --verbose VERBOSE \nVerbosity level. If 0, does not print any output.\nIf 1 (default), prints the file currently\nprocessing.  --version             show program's version number and exit      Example:  python sort_rocs_mol2.py -i rocs_results/\\\n--output rocs_sorted/ --query mol.mol2\\\n--sortby TanimotoCombo,ColorTanimoto\\\n--selection \"(TanimotoCombo >= 0.75) & (ColorTanimoto >= 0.1)\"",
            "title": "sort_rocs_mol2.py"
        },
        {
            "location": "/user_guide/tools/index.html#count_mol2py",
            "text": "Usage:   count_mol2.py [-h] -i INPUT [-v]  A command line tool for counting the number of molecules in MOL2 files.  Arguments:   -h, --help \nShow this help message and exit  -i INPUT, --input INPUT \n(Required.) Path to a  .mol2  or  .mol2.gz file,\nor a directory containing  .mol2 / .mol2.gz  files.  -v, --version \nShow program's version number and exit   Example:  python count_mol2.py -i mol2_dir/\npython count_mol2.py -i partition_1.mol2",
            "title": "count_mol2.py"
        },
        {
            "location": "/user_guide/tools/index.html#funcgroup_matching_selectionpy",
            "text": "Usage:   funcgroup_matching_selection.py [-h] -i INPUT [--input_mol2 INPUT_MOL2]  -o OUTPUT [--atomtype_selection ATOMTYPE_SELECTION]  [--charge_selection CHARGE_SELECTION]  [-v VERBOSE] [--version] \nSelects molecules with certain functional group matching patterns after functional group matching.  Arguments:   -h, --help \nShow this help message and exit  -i INPUT, --input INPUT \n(Required.) Input directory with input  .tsv  tables (functional group files generated via  funcgroup_matching.py ).  --input_mol2 INPUT_MOL2 \n(Optional.) Input directory with input  .mol2  structures (ROCS overlays\ngenerated via  sort_rocs_mol2.py ). If provided, the MOL2 structures\ncorresponding to the selected matches will be extracted from the\ninput_mol2 directory and written to the output directory for visual inspection,\nfor example, using PyMOL.  -o OUTPUT, --output OUTPUT \n(Required.) Directory for writing the output files.  --atomtype_selection ATOMTYPE_SELECTION \n(Optional, default=\"\") Selection condition for the atom types.\nFor example, the following selection query will make a selection based on\nmatching 2 atoms in the reference molecule, S1 and O2:\n\"((S1 == 'S.3') | (S1 == 'S.o2')) --> (O2 == 'O.2')\".\nHere, S1 can either match an S.3 or an S.o2 atom in the database molecule.\nThe second atom, O2, must match an atom of type O.2.  --charge_selection CHARGE_SELECTION \n(Optional, default=\"\") Selection condition for the atom charges.\nFor example, the following selection query will make a selection based on\nmatching the charges in 2 atoms in the reference molecule, S1 and O2:\n\"((S1 >= 1.0)) --> (O2 <= -0.5)\".\nHere, the atom that matches S1 has to have a positive charge, 1 or greater. The charge\nmatching the second atom, O2, must be (partially) negative (-0.5 or smaller).  -v VERBOSE, --verbose VERBOSE \n(Optional, default:  1 .) Verbosity level. If 0, does not print any\noutput.\nIf 1 (default), prints the file currently\nprocessing.  --version             show program's version number and exit      Example:  python funcgroup_matching_selection.py\\\n--input 07_fgroup_matching_tables # generated via funcgroup_matching.py\\\n--input_mol2 06_rocs_overlays_sorted # generated via sort_rocs_mol2.py\\\n--output 08_funcgroup_selection\\\n--atomtype_selection \"((S1 == 'S.3') | (S1 == 'S.o2')) --> (O2 == 'O.2')\"\\\n--charge_selection FGROUP_CHARGE \"((S1 >= 1.0)) --> (O2 <= -0.5)\"",
            "title": "funcgroup_matching_selection.py"
        },
        {
            "location": "/user_guide/tools/index.html#enumerate_conformerspy",
            "text": "Usage:   enumerate_conformers.py [-h] -i INPUT -o OUTPUT [-v VERBOSE]  [--version] \nNumbers molecules in MOL2 files by adding a suffix as index. For example, if there are three molecules in a MOL2 file, moleculeabc_0, moleculeabc_1, and moleculedef_0,\nthose molecules will be relabeled to moleculeabc_0, moleculeabc_1, and moleculedef_0.  Arguments:   -h, --help \nShow this help message and exit  -i INPUT, --input INPUT \n(Required.) Path to a  .mol2  or  .mol2.gz file,\nor a directory containing  .mol2 / .mol2.gz  files.  -o OUTPUT, --output OUTPUT \n(Required.) Directory path for writing the numbered MOL2s  -v VERBOSE, --verbose VERBOSE \nVerbosity level. If 0, does not print any output.\nIf 1 (default), prints the file currently\nprocessing.  --version             show program's version number and exit      Example:  python enumerate_conformers.py -i conformer_mol2s/\\\n--output numbered_conformers/",
            "title": "enumerate_conformers.py"
        },
        {
            "location": "/user_guide/tools/index.html#id_to_mol2py",
            "text": "Usage:   id_to_mol2.py [-h] -i INPUT --id_file ID_FILE -o OUTPUT  [-w INCLUDELIST] [-v VERBOSE] [--version] \nCreate filtered MOL2 files from ID and input MOL2 files.  Arguments:   -h, --help \nShow this help message and exit  -i INPUT, --input INPUT \n(Required.) Input  .mol2  or  .mol2.gz  file, or a directory of MOL2 files.  --id_file ID_FILE     (Required.) Input ID file that contains molecule \nIDs (one ID per line).  -o OUTPUT, --output OUTPUT \n(Required.) Output directory path for the\nfiltered MOL2 files.  -w INCLUDELIST, --includelist INCLUDELIST \n(Optional, default:  True .) Uses ID file as includelist if True (default).\nUses ID file as excludelist if False.  -v VERBOSE, --verbose VERBOSE \n(Optional, default:  1 .) Verbosity level. If 0, does not print any\noutput.\nIf 1 (default), prints the file currently\nprocessing.  --version             show program's version number and exit      Example:  python id_to_mol2.py --input mol2_dir/\\\n--id_file ids.txt\\\n--includelist True\\\n--output filtered_mol2_dir/",
            "title": "id_to_mol2.py"
        },
        {
            "location": "/user_guide/tools/index.html#funcgroup_distance_to_idpy",
            "text": "Usage:   funcgroup_distance_to_id.py [-h] -i INPUT -o OUTPUT -s SELECTION -d  DISTANCE [--processes PROCESSES] [-v VERBOSE] [--version] \nA command line tool for filtering mol2 files\nby the distance of two atoms or functional groups.  Arguments:   -h, --help \nShow this help message and exit  -i INPUT, --input INPUT \n(Required.) Path to a  .mol2  or  .mol2.gz  file,\nor a directory containing  .mol2 / .mol2.gz files.  -o OUTPUT, --output OUTPUT \n(Required.) Directory for writing the output files.  -s SELECTION, --selection SELECTION \n(Required.) Selection condition for the atom distance checks.\n1) Selection example to compare 2 atom types: \"(atom_type == 'S.o2') --> (atom_type == 'O.2')\" .\n2) Selection example to consider either an S.o2 or S.3 atom to an O.2 atom: \"((atom_type == 'S.3') | (atom_type == 'S.o2')) --> (atom_type == 'O.2')\" .\n3) Selection example using logical ORs on both sides: \"((atom_type == 'S.3') | (atom_type == 'S.o2')) -->  ((atom_type == 'O.2') | (atom_type == 'O.3'))\" .  -d DISTANCE, --distance DISTANCE \n(Required.) A distance range formatted\nas \"lowerbound-upperbound\".\nFor example, if 13-20 is provided as an\nargument, two atoms are considered a match\nif they are not closer than 13 angstroms and\nnot farther than 20 angstroms.  --processes PROCESSES \n(Optional, default:  1 .) Number of processes to run in parallel.\nIf processes > 0, the specified number of CPUs\nwill be used.\nIf processes = 0, all available CPUs will\nbe used.\nIf processes = -1, all available CPUs\nminus  processes  will be used.  -v VERBOSE, --verbose VERBOSE \n(Optional, default:  1 .) Verbosity level. If 0, does not print any output.\nIf 1 (default), prints the file currently processing.  --version             show program's version number and exit      Example:  python funcgroup_distance_to_id.py\\\n--input mol2_dir/\\\n--output ids.txt\\\n--selection \"((atom_type == 'S.3') | (atom_type == 'S.o2')) --> (atom_type == 'O.2')\"\\\n--distance 13-20\\\n--processes 0\n\\# The example above selects those molecules\n\\# that contain S.2 or S.o2 atom that is within\n\\# a 13-20 angstroms distance to an 'O.2' (sp2/keto oxygen) atom",
            "title": "funcgroup_distance_to_id.py"
        },
        {
            "location": "/user_guide/tools/index.html#mol2_to_idpy",
            "text": "Usage:   mol2_to_id.py [-h] -i INPUT -o OUTPUT [-v VERBOSE] [--version]  Writes a file with molecule IDs from MOL2 files.  Arguments:   -h, --help \nShow this help message and exit  -i INPUT, --input INPUT \n(Required.) Input  .mol2  or  .mol2.gz  file,or a directory of MOL2 files.  -o OUTPUT, --output OUTPUT \n(Required.) Output path for the ID file. For example,  ids.txt .  -v VERBOSE, --verbose VERBOSE \n(Optional, default:  1 .) Verbosity level. If 0, does not print any output. If 1 (default), prints the file currently processing.  --version             show program's version number and exit      Example:  python mol2_to_id.py\\\n--input mol2_dir\\\n--output ids.txt",
            "title": "mol2_to_id.py"
        },
        {
            "location": "/user_guide/tools/index.html#datatable_to_idpy",
            "text": "Usage:   datatable_to_id.py [-h] -i INPUT -o OUTPUT --id_column ID_COLUMN  [--separator SEPARATOR] [-s SELECTION] [-v VERBOSE]  [--version] \nCreate a text file with molecule IDs from MOL2 files.  Arguments:   -h, --help \nShow this help message and exit  -i INPUT, --input INPUT \n(Required.) Path to a datatable file where each\nrow represents a molecule and each columns\nstore the molecular features.  -o OUTPUT, --output OUTPUT \n(Required.) Output path for the ID file (for example,  ids.txt ).  --id_column ID_COLUMN \n(Required.) Name of the Molecule ID column.  --separator SEPARATOR \n(Optional, default:  \"  \" .) Column separator used\nin the input table.\nAssumes tab-separated values by default.  -s SELECTION, --selection SELECTION \n(Optional, default:  None .) A conditional selection string:\nSingle column selection example:  \"(MWT > 500)\" .  Logical OR example:  \"(MWT > 500) | (MWT < 200)\" . Logical AND example:  \"(NRB <= 7) & (MWT > 200)\" .  -v VERBOSE, --verbose VERBOSE \n(Optional, default:  1 .) Verbosity level. If 0, does not print any\noutput.\nIf 1 (default), prints the file currently\nprocessing.  --version             show program's version number and exit      Example:  python datatable_to_id.py\\\n--input table.txt\\\n--output ids.txt\\\n--id_column ZINC_ID\\\n--selection \"(NRB <= 7) & (MWT > 200)\"",
            "title": "datatable_to_id.py"
        },
        {
            "location": "/user_guide/tools/index.html#funcgroup_presence_to_idpy",
            "text": "Usage:   funcgroup_presence_to_id.py [-h] -i INPUT -o OUTPUT -s SELECTION  [--processes PROCESSES] [-v VERBOSE]  [--version] \nChecking molecules base on the presence\nof certain atoms or functional groups and writing the results to a text file.  Arguments:   -h, --help \nShow this help message and exit  -i INPUT, --input INPUT \n(Required.) Input directory with  .mol2  and  .mol2.gz  files.  -o OUTPUT, --output OUTPUT \n(Required.) Directory for writing the output files.  -s SELECTION, --selection SELECTION \nSelection condition for the atom presence checks.\n1) Require 2 atom types to be present:\n\"(atom_type == 'S.o2') --> (atom_type == 'O.2')\"\n2) Selection example to consider either an S.o2 or S.3 atom and a O.2 atom to be present:\n\"((atom_type == 'S.3') | (atom_type == 'S.o2')) --> (atom_type == 'O.2')\"\n3) Selection example using logical ORs on both sides:\n\"((atom_type == 'S.3') | (atom_type == 'S.o2')) -->  ((atom_type == 'O.2') | (atom_type == 'O.3'))\"  --processes PROCESSES \n(Optional, default:  1 .) Number of processes to run in parallel.\nIf processes > 0, the specified number of CPUs\nwill be used.\nIf processes = 0, all available CPUs will\nbe used.\nIf processes = -1, all available CPUs\nminus  processes  will be used.  -v VERBOSE, --verbose VERBOSE \n(Optional, default:  1 .) Verbosity level. If 0, does not print any\noutput.\nIf 1 (default), prints the file currently\nprocessing.  --version             show program's version number and exit      Example:  python funcgroup_presence_to_id.py --input mol2s/\\\n--output mol2ids.txt\\\n--selection \"((atom_type == 'S.3') | (atom_type == 'S.o2')) --> (atom_type == 'O.2')\"\\\n--processes 0",
            "title": "funcgroup_presence_to_id.py"
        },
        {
            "location": "/user_guide/tools-tutorial-1/index.html",
            "text": "Screenlamp Toolkit Tutorial\n\n\nThis tutorial explains how the individual screenlamp tools (located in the \nscreenlamp/tools\n subdirectory) work in the context of a small virtual screening example. \n\n\nThe workflow we are going to use is similar to the \nPipeline Tutorial\n, which uses a pre-constructed, automated virtual pipeline based using the tools explained in this tutorial. While the \nPipeline Tutorial\n provides a high-level overview and a more convenient, pre-constructed pipeline, this tool aims to explain the building blocks behind it so that users can understand and learn how to construct their own pipelines and/or modify the existing pipeline presented in the \nPipeline Tutorial\n.\n\n\nTo explain the main steps in a typical filtering pipeline using screenlamp, this tutorial will work through the following individual steps performed by the pipeline in the \nPipeline Tutorial\n incrementally:\n\n\n\n\n(A higher-resolution PDF version of this flowchart is available \nhere\n.)\n\n\nObtaining and Preparing the Dataset\n\n\nMOL2 Input Files\n\n\nThe tools presented in this tutorial are compatible with MOL2 files of arbitrary size. However, to minimize the computation time for illustration throughout this tutorial, we are only going to use a small subset of molecules.\n\n\nA typical use case for these would be the screening of all ~18,000,000 \nDrug-Like\n molecules from \nZINC\n, which is available in MOL2 format on ZINC \nhere\n. Please note that screenlamp supports both Tripos MOL2 (\n*.mol2\n) files and gzipped Tripos MOL2 files (\n*.mol2.gz\n) out of the box. Thus, if your input dataset is in gzipped format, you can use it right away without having to make any adjustments or decompressing it. However, please note that the decompressing and compressing operations that are performed when working with gzipped files have an additional toll on computational performance.\n\n\nWith kind permission from John Irwin and the ZINC team, we are using a random subset of 70,000 small molecules that we prepared for this tutorial. This subset from ZINC is split into 7 multi-MOL2 file with 10,000 molecules each: \npartition_mol2_1.mol2\n to \npartition_mol2_7.mol2\n. \n\n\nFor this tutorial, please download the dataset by clicking the following link and unzip it on your machine that you are using for the virtual screening run: \nhttps://sebastianraschka.com/datasets/screenlamp/pipeline-tutorial_1/partition_1-7.zip\n\n\nDatatable for Prefiltering\n\n\nFor this particular tutorial, you'll also need a data table containing general information about these molecules. Although the partitions you downloaded above are only a small, modified subset of the \nZINC\n drug-like molecules, we could use the full ~18,000,000 molecule Drug-like table available for download at \nhttp://zinc.docking.org/subsets/drug-like\n. To download the tab-separated table, click the \nProperties\n link on the \nZINC Drug-like\n page. \n\n\nHowever, Please note that the size of the data table is about ~1.8 Gb, and thus, the download may take a while depending on your internet connection. Alternatively, we recommend using a smaller data table containing only ~170,000 molecules; to download this table, please use the following link: \nhttps://sebastianraschka.com/datasets/screenlamp/pipeline-tutorial_1/small_table_p1-7.txt\n\n\nQuery Molecule\n\n\nThe third data file you'll need for ligand-based virtual screening is the query molecule. For this tutorial, please download the following multi-conformer MOL2 file: \nhttps://sebastianraschka.com/datasets/screenlamp/pipeline-tutorial_1/3kpzs_query.mol2\n\n\n\n\nImportant Note\n\n\nAll code in this tutorial is executed using a Python 3.6 interpreter. The code has not been tested in Python 2.7.\n\n\n\n\nData Storage and Project Layout\n\n\nAfter downloading the files described in the previous subsection, create a new directory called \ntk-tutorial_data\n to store these files. Before you continue with the tutorial, please make sure that the \ntk-tutorial_data\n directory contains the following files and adheres to the following directory structure:\n\n\n\n\nNext, we are going to create a new directory, \ntutorial-results\n, to store the results we are going to generate in this tutorial:\n\n\n! mkdir tutorial-results\n\n\n\n\n \u26a0 Throughout this tutorial, the '!' command denotes a new command line terminal prompt (for example, bash shell).\n\n\n\n \u26a0 This tutorial assumes that the screenlamp tools are available from a directory called 'tools', but you can store the screenlamp tools in any directory you like as long as you replace 'tools' with the correct path to this directory.\n\n\n\nBefore we start exploring the tools contained in screenlamp's \ntools\n folder, let's start with a simple script that we are going to use throughout this tutorial to count the number of structures in a mol2 file or directory containing mol2 files.\n\n\nUsing the \ncount_mol2.py\n script, we can now count the number of structures in each mol2 file in our input directory like so:\n\n\n! python tools/count_mol2.py -i tk-tutorial_data/partition_1-7/\n\n\n\n\npartition_1.mol2 : 10000\npartition_2.mol2 : 10000\npartition_3.mol2 : 10000\npartition_4.mol2 : 10000\npartition_5.mol2 : 10000\npartition_6.mol2 : 10000\npartition_7.mol2 : 10000\nTotal : 70000\n\n\n\nAs we can see, each of the 7 partitions in our dataset contains 10,000 molecules; we will be working with 70,000 structures in total.\n\n\nGeneral Blacklist & Whitelist Filtering\n\n\nThis section provides a brief introduction to the general concept of how the filtering of structures is performed within screenlamp. The general workflow consists of two step\n\n\n\n\nCreating an \"ID file\" (more about this later)\n\n\nUse the \"ID file\" to select the corresponding 3D-structures from MOL2 files\n\n\n\n\nFurthermore, there are 2 kinds of filtering procedures. Via whitelist-filtering, we select all molecules that are \nlisted in\n the ID file. Vice versa, blacklist-filtering is used to select all molecules that are \nnot listed in\n the ID file.\n\n\nGenerating ID Files from Molecules\n\n\nFirst, we are going to generate an ID file of all structures in the mol2 files of the 7 partitions. \n\n\n \u26a0 \nIn the context of this tutorial, an \"ID file\" is a plaintext file that contains the molecule identifiers fetched from the mol2 files.\n\n\n\n\nWe can create such an ID file using the \nmol2_to_id.py\n screenlamp script as shown below:\n\n\n! python tools/mol2_to_id.py \\\n  --input tk-tutorial_data/partition_1-7/ \\\n  --output tutorial-results/all-mol2ids.txt\n\n\n\n\nProcessing partition_1.mol2 | scanned 10000 molecules | 9992 mol/sec\nProcessing partition_2.mol2 | scanned 10000 molecules | 13691 mol/sec\nProcessing partition_3.mol2 | scanned 10000 molecules | 17576 mol/sec\nProcessing partition_4.mol2 | scanned 10000 molecules | 15460 mol/sec\nProcessing partition_5.mol2 | scanned 10000 molecules | 13929 mol/sec\nProcessing partition_6.mol2 | scanned 10000 molecules | 14212 mol/sec\nProcessing partition_7.mol2 | scanned 10000 molecules | 14279 mol/sec\nFinished\n\n\n\nTo check that the creation of the ID file was successful and to see how it looks like, we will use the Unix/Linux \nhead\n command line tool to display the first 10 rows of the newly created ID file:\n\n\n! head tutorial-results/all-mol2ids.txt\n\n\n\n\nZINC57271411\nZINC50764925\nZINC65255333\nZINC06394508\nZINC65292537\nZINC65375610\nZINC31820077\nZINC65395084\nZINC00205726\nZINC01458151\n\n\n\nTo illustrate the concept of whitelist and blacklist filtering in the following sections, let us now create a small ID list file, we name it \n5-mol2ids.txt\n, that contains 5 IDs only, using the \necho\n command in a Unix/Linux terminal:\n\n\n! echo \"\\\nZINC65255333\\n\\\nZINC06394508\\n\\\nZINC65292537\\n\\\nZINC65375610\\n\\\nZINC31820077\" > tutorial-results/5-mol2ids.txt\n\n\n\n\nThe execution of the preceeding command will create a text file that looks as follows:\n\n\n\n\nWhitelist Filtering\n\n\nNow, using the script \nid_to_mol2.py\n, we can filter a directory of mol2 files for molecules that are listed in an ID file using the \n--whitefilter True\n option. Executing the following command will look for the structures corresponding to the five molecule IDs included in the \n5-mol2ids.txt\n that we created in the previous section, and write the corresponding structure files to a new directory that we will call \nwhitelist_example\n:\n\n\n! python tools/id_to_mol2.py \\\n  --input tk-tutorial_data/partition_1-7/ \\\n  --output tutorial-results/whitelist-example \\\n  --id_file tutorial-results/5-mol2ids.txt \\\n  --whitelist True\n\n\n\n\nProcessing partition_1.mol2 | scanned 10000 molecules | 15319 mol/sec\nProcessing partition_2.mol2 | scanned 10000 molecules | 14400 mol/sec\nProcessing partition_3.mol2 | scanned 10000 molecules | 14980 mol/sec\nProcessing partition_4.mol2 | scanned 10000 molecules | 14893 mol/sec\nProcessing partition_5.mol2 | scanned 10000 molecules | 14170 mol/sec\nProcessing partition_6.mol2 | scanned 10000 molecules | 12873 mol/sec\nProcessing partition_7.mol2 | scanned 10000 molecules | 12457 mol/sec\nFinished\n\n\n\nThe output directory, \ntutorial-results/whitelist-example\n, should now contain only mol2 structures that are labeled with IDs contained in the \n5-mol2ids.txt\n text file.\n\n\nPlease note that \nid_to_mol2.py\n creates a new file for each mol2 file it scanned; however, the creation of such a file does not imply that structures were found for this particular partition via whitelist filtering and could remain empty. For example, the five structure IDs in the \n5-mol2ids.txt\n all refer to structures from \npartition_1\n as we can check by running the already familiar \ncount_mol2.py\n script:\n\n\n! python tools/count_mol2.py \\\n  --input tutorial-results/whitelist-example\n\n\n\n\npartition_1.mol2 : 5\npartition_2.mol2 : 0\npartition_3.mol2 : 0\npartition_4.mol2 : 0\npartition_5.mol2 : 0\npartition_6.mol2 : 0\npartition_7.mol2 : 0\nTotal : 5\n\n\n\nBlacklist Filtering\n\n\nSimilar to the whitelisting example in the previous section, we can use a ID file for blacklist filtering. Blacklist filtering means that all molecules that are \nnot\n listed in an ID file will be selected. In order to perform blacklist filtering, we use the setting \n--whitelist False\n as shown below:\n\n\n! python tools/id_to_mol2.py \\\n  --input tk-tutorial_data/partition_1-7/ \\\n  --output tutorial-results/blacklist-example \\\n  --id_file tutorial-results/5-mol2ids.txt \\\n  --whitelist False\n\n\n\n\nProcessing partition_1.mol2 | scanned 10000 molecules | 12772 mol/sec\nProcessing partition_2.mol2 | scanned 10000 molecules | 8715 mol/sec\nProcessing partition_3.mol2 | scanned 10000 molecules | 9105 mol/sec\nProcessing partition_4.mol2 | scanned 10000 molecules | 13333 mol/sec\nProcessing partition_5.mol2 | scanned 10000 molecules | 9869 mol/sec\nProcessing partition_6.mol2 | scanned 10000 molecules | 12444 mol/sec\nProcessing partition_7.mol2 | scanned 10000 molecules | 12276 mol/sec\nFinished\n\n\n\nThis time, we expect 69995 structures to be obtained after the filtering, since we scanned 70,000 molecules and had 5 molecules on our ID blacklist:\n\n\n! python tools/count_mol2.py \\\n  --input tutorial-results/blacklist-example\n\n\n\n\npartition_1.mol2 : 9995\npartition_2.mol2 : 10000\npartition_3.mol2 : 10000\npartition_4.mol2 : 10000\npartition_5.mol2 : 10000\npartition_6.mol2 : 10000\npartition_7.mol2 : 10000\nTotal : 69995\n\n\n\nStep 1 -- Filtering via Features from Data Tables\n\n\nIn this section, we will apply the first filtering step, which constitutes step 1 in the pipeline overview:\n\n\n\n\nFiltering via screenlamp is typically done in 2 steps:\n\n\n\n\nStep 1: Create an ID file containing the names of the molecules of interest.\n\n\nStep 2: Obtain the structures of molecules of interest, using the ID file, from MOL2 files.\n\n\n\n\nIn this filtering step, we are going to create an ID file of molecules of interest from a pre-existing data table, for instance, the \"properties\" files available on \nZINC\n. For this example, we are going to use the \nsmall_table_p1-7.txt\n subset that we downloaded earlier (see \n\"Obtaining and Preparing the Dataset\"\n), since the whole data table of drug like molecules is ~2 Gb in size, and thus it may take a long time to download it on machines with a low-bandwidth internet connection. However, in case you have already downloaded the drug-like properties file (3_prop.xls) from ZINC, please feel free to use it instead. \n\n\n \u26a0 Note that while 3_prop.xls has a file ending that is typical for Microsoft Excel, it is not an Excel file but a plain text file with tab-separated columns.\n\n\n\nTo get a brief impression of the file contents, we use the \nhead\n tool to display the first ten entries:\n\n\n! head tk-tutorial_data/small_table_p1-7.txt\n\n\n\n\nZINC_ID MWT LogP    Desolv_apolar   Desolv_polar    HBD HBA tPSA    Charge  NRB SMILES\nZINC00000010    217.2   1.42    5.57    -41.98  0   4   66  -1  2   C[C@@]1(C(=O)C=C(O1)C(=O)[O-])c2ccccc2\nZINC00000012    289.356 1.28    4.89    -24.55  2   4   66  0   5   c1ccc(cc1)C(c2ccccc2)[S@](=O)CC(=O)NO\nZINC00000017    281.337 1.33    3.06    -23.33  2   6   87  0   4   CCC[S@](=O)c1ccc2c(c1)[nH]/c(=N\\C(=O)OC)/[nH]2\nZINC00000017    281.337 1.33    3.07    -19.2   2   6   87  0   4   CCC[S@](=O)c1ccc2c(c1)[nH]/c(=N/C(=O)OC)/[nH]2\nZINC00000018    212.31799999999998  2.0 5.87    -8.2    1   3   32  0   4   CC(C)C[C@@H]1C(=O)N(C(=S)N1)CC=C\nZINC00000021    288.411 3.85    4.02    -40.52  1   3   30  1   6   CCC(=O)O[C@]1(CC[NH+](C[C@@H]1CC=C)C)c2ccccc2\nZINC00000022    218.27599999999998  3.21    0.47    -48.57  1   3   52  -1  5   C[C@@H](c1ccc(cc1)NCC(=C)C)C(=O)[O-]\nZINC00000025    251.35299999999998  3.6 2.4 -41.56  2   2   40  1   5   C[C@H](Cc1ccccc1)[NH2+][C@@H](C#N)c2ccccc2\nZINC00000030    297.422 2.94    0.89    -37.97  3   3   47  1   6   C[C@@H](CC(c1ccccc1)(c2ccccc2)C(=O)N)[NH+](C)C\n\n\n\nSince it can sometimes be hard to read tab-separated tables as regular text output, the screenshot below shows the same table excerpt opened in a spreadsheet program such as LibreOffice Calc or Microsoft Excel:\n\n\n\n\nUsing the \ndatatable_to_id.py\n script, we can select only those molecule IDs (here: stored in the ZINC_ID column) that match certain criteria, which we can flexibly define based on the column data in this table. For example, we can select only those molecules that have at most 7 rotatable bonds and have a molecular weight of at least 200 g/mol using the selection string \n\"(NRB <= 7) & (MWT >= 200)\"\n as follows:\n\n\n! python tools/datatable_to_id.py \\\n  --input tk-tutorial_data/small_table_p1-7.txt \\\n  --output tutorial-results/01_selected_mol2s.txt \\\n  --id_column \"ZINC_ID\" \\\n  --selection \"(NRB <= 7) & (MWT >= 200)\"\n\n\n\n\nUsing columns: ['ZINC_ID', 'NRB', 'MWT']\nUsing selection: (chunk.NRB <= 7) & (chunk.MWT >= 200)\nProcessed 169984 rows | 351943 rows/sec\nSelected: 162622\n\n\n\nThe selection syntax is quite simple: Parentheses must surround each criterion, and multiple criteria can be chained together using the logical AND symbol \n'&'\n. For example, to add a third criterion to the selection string to exclude larger molecules that are heavier than 400 g/mol, the selection string becomes \n\"(NRB <= 7) & (MWT >= 200) & (MWT <= 400)\"\n.\n\n\nThe following relational operators are supported in the selection string:\n\n\n\n\n!=\n : not equal to\n\n\n==\n : equal to\n\n\n<\n  : less than\n\n\n>\n  : greater than\n\n\n>=\n : equal to or greater than\n\n\n<=\n : equal to or greater than\n\n\n\n\nIf you encounter issues with individual selection strings, please check that the specified column is indeed present in the table you provided. Also, the \ndatatable_to_id.py\n tool assumes that the input table is tab-separated. If you have tables that use a different delimiter to separate columns, please specify the column separator using the \n--separator\n parameter. For example, if our input table was a CSV file, we would pass the following, additional argument to the \ntools/datatable_to_id.py\n function: \n--separator \",\"\n.\n\n\nBelow are some additional examples of correct and incorrect selection strings that can help you with debugging the selection strings if you should encounter problems:\n\n\n\n\nCorrect: \n\"(MWT >= 200) & (NRB <= 7)\"\n\n\nWrong: \n\"( MWT >= 200) & ( NRB <= 7)\"\n [spacing between parentheses and column names]\n\n\nWrong: \n\"MWT >= 200 & NRB <= 7\"\n [expressions seperated by logical '&' operator not enclosed in parentheses]\n\n\nWrong: \n\"(mwt >= 200) & (nrb <= 7)\"\n [column names don't match the columns in the data table file]\n\n\nWrong: \n\"(mwt>=200) & (nrb<=7)\"\n [no whitespace before and after operators for comparison]\n\n\n\n\nAs mentioned at the beginning of this section, filtering consists of two steps:\n\n\n\n\nCreating an ID file of molecule names\n\n\nSelecting molecules from MOL2 files using the ID file from step 1\n\n\n\n\nWe already completed step 1, and now, we are going the ID file we just created to create MOL2 files that only contain the molecules of interest (i.e., molecules with a maximum number of 7 rotatable bonds and a molecular weight of at least 200 g/mol2). Consequently, we use the ID file \ntutorial-results/01_selected_mol2s.txt\n to select the molecules of interest from out MOL2 database at \ntk-tutorial_data/partition_1-7/\n as follows:\n\n\n! python tools/id_to_mol2.py \\\n  --input tk-tutorial_data/partition_1-7/ \\\n  --output tutorial-results/01_selected_mol2s/ \\\n  --id_file tutorial-results/01_selected_mol2s.txt \\\n  --whitelist True\n\n\n\n\nProcessing partition_1.mol2 | scanned 10000 molecules | 12021 mol/sec\nProcessing partition_2.mol2 | scanned 10000 molecules | 9435 mol/sec\nProcessing partition_3.mol2 | scanned 10000 molecules | 7823 mol/sec\nProcessing partition_4.mol2 | scanned 10000 molecules | 10801 mol/sec\nProcessing partition_5.mol2 | scanned 10000 molecules | 8901 mol/sec\nProcessing partition_6.mol2 | scanned 10000 molecules | 8661 mol/sec\nProcessing partition_7.mol2 | scanned 10000 molecules | 8167 mol/sec\nFinished\n\n\n\n! python tools/count_mol2.py \\\n  --input tutorial-results/01_selected_mol2s/\n\n\n\n\npartition_1.mol2 : 8628\npartition_2.mol2 : 8501\npartition_3.mol2 : 8537\npartition_4.mol2 : 8476\npartition_5.mol2 : 8535\npartition_6.mol2 : 8518\npartition_7.mol2 : 8555\nTotal : 59750\n\n\n\nAs we can see from the output of \ncount_mol2.py\n, we now have a slightly smaller database consisting of 59750 molecules -- we started with 70,000 structures to which we applied the selection criteria \n\"(NRB <= 7) & (MWT >= 200)\"\n.\n\n\nFiltering Step 2 -- Presence and Absence of Functional Groups\n\n\nIn this second filtering step, we will select molecules that contain certain types of atoms and functional groups.\n\n\n\n\nIn the simple example presented in this section, we will consider molecules that contain at least one sp3 sulfur atom (as it can be found in sulfate groups) and at least one sp2 oxygen atom (keto group). \n\n\nWhen we filter by atom type, we can use the following MOL2 labels to specify filtering criteria:\n\n\n\n\natom_id\n\n\natom_name\n\n\natom_type\n\n\nsubst_id\n\n\nsubst_name\n\n\ncharge\n\n\n\n\nNote that the most useful specifiers are \natom_type\n and \ncharge\n in the context of selecting atoms and functional groups of interest. The \natom_type\n specifier is used to refer to the atom types in MOL2 structures (for example, O.2, O.3, H, S.2, and so forth). The \ncharge\n specifier refers to the partial charge column in MOL2 files.\n\n\nBefore we discuss the selection string syntax in more detail, let us execute an example where we select only those molecules that contain at least one sp3 sulfur atom (as it can be found in sulfate groups) and at least one sp2 oxygen atom (keto-group):\n\n\n! python tools/funcgroup_presence_to_id.py \\\n  --input tutorial-results/01_selected_mol2s/ \\\n  --output tutorial-results/02_fgroup_presence_mol2s.txt \\\n  --selection \"((atom_type == 'S.3') | (atom_type == 'S.o2')) --> (atom_type == 'O.2')\" \\\n  --processes 0\n\n\n\n\nUsing selection: [\"((pdmol.df.atom_type == 'S.3') | (pdmol.df.atom_type == 'S.o2'))\", \"(pdmol.df.atom_type == 'O.2')\"]\nProcessing partition_1.mol2 | 276 mol/sec\nProcessing partition_2.mol2 | 270 mol/sec\nProcessing partition_3.mol2 | 278 mol/sec\nProcessing partition_4.mol2 | 270 mol/sec\nProcessing partition_5.mol2 | 267 mol/sec\nProcessing partition_6.mol2 | 280 mol/sec\nProcessing partition_7.mol2 | 253 mol/sec\nFinished\n\n\n\nNote that we used all available processes on our machine by setting \n--processes 0\n, to speed up the computation. Alternatively, if you don't want to utilize all available CPUs, you can specify the number of CPUs to use manually, for example, by setting \n--processes 1\n to only use 1 CPU.\n\n\nTo better understand how the selection string \"((atom_type == 'S.3') | (atom_type == 'S.o2')) --> (atom_type == 'O.2')\" works, let us break it down into 2 parts:\n\n\n\n\n\"((atom_type == 'S.3') | (atom_type == 'S.o2'))\"\n\n\n\"--> (atom_type == 'O.2')\"\n\n\n\n\nIn the first part, we use the logical OR operator '|' to select molecules that either contain an 'S.3' atom OR an 'S.o2' atom. Then, after this criterion has been applied to select the specified subset of molecules, the next criterion will be used, which is the criterion followed by the '-->' string. In this case, the remaining molecules will be checked for the presence of an 'O.2' atom. \n\n\n \u26a0 In this context, you can think of the '-->' string as a \"THEN\" conditional statement. E.g., \"select via filter ((atom_type == 'S.3') | (atom_type == 'S.o2')) THEN select via filter (atom_type == 'O.2')\" \n\n\n\nNote that you can string an arbitrary number of criteria using the '-->' operator. For example, if we additionally require molecules to contain a fluor atom, we can modify the selection string as follows (the modification is highlighted in bold font):\n\n\n\"((atom_type == 'S.3') | (atom_type == 'S.o2')) --> (atom_type == 'O.2') \n--> (atom_type == 'F')\n\"\n\n\nLastly, we can also incorporate partial charge information. For instance, if we want to specify a partial charge range for the O.2 atom type, we could do it as follows, using the logical \"&\" operator:\n\n\n\"((atom_type == 'S.3') | (atom_type == 'S.o2')) --> ((atom_type == 'O.2') \n& (charge <= -0.3) & (charge >= -0.9))\n\"\n\n\nPlease note that it doesn't make sense to use the logical AND operator (&) on the same column. For example, the selection string \"((atom_type == 'S.3') | (atom_type == 'S.o2'))\" means that a molecule must contain an atom that is either of type S.3 OR S.o2. However, the selection string \"((atom_type == 'S.3') & (atom_type == 'S.o2'))\" would mean that a molecule must contain an atom that has the type S.3 AND S.o2 at the same time, which is impossible, because an atom can only have 1 type at the same time (in the MOL2 file format).\n\n\n\n\nBelow, you can find a short list of Dos and Don'ts regarding the selection syntax\n:\n\n\na) Don't use the AND operator (&) on the same column within a selection: \"((atom_type == 'S.3') | (atom_type == 'S.o2')) & (atom_type == 'O.2')\"\n\n\n\n\nThis selects molecules with an S.3 or S.o2 atom that is also an O.2 atom at the same time. This is impossible!\n\n\n\n\nb) Use the AND operator on different columns within a slection: \"((atom_type == 'S.3') | (atom_type == 'S.o2')) & (charge < 0.0)\"\n\n\n\n\nThis selects molecules with an S.3 or S.o2 atom that also has a negative charge.\n\n\n\n\nc) Filter for multiple atoms by chaining criteria via the \n-->\n string: \"((atom_type == 'S.3') | (atom_type == 'S.o2')) --> (atom_type == 'O.2')\"\n\n\n\n\nThis selects molecules with an S.3 or S.o2 atom. Then, based on those molecules, it selects only those molecules that also contain an O.2 atom.\n\n\n\n\n\n\nAs you remember from the \"\nStep 1 -- Filtering via Features from Data Tables\n\" section, filtering in screenlamp consists of two stages:\n\n\n\n\nCreating an ID file of molecule names\n\n\nSelecting molecules from MOL2 files using the ID file from step 1\n\n\n\n\nWe have already completed step 1 so that we can use the ID file we created to select the MOL2 structures from the MOL2 directory as follows:\n\n\n! python tools/id_to_mol2.py \\\n  --input tutorial-results/01_selected_mol2s/ \\\n  --output tutorial-results/02_fgroup_presence_mol2s \\\n  --id_file tutorial-results/02_fgroup_presence_mol2s.txt \\\n  --whitelist True\n\n\n\n\nProcessing partition_1.mol2 | scanned 8628 molecules | 13872 mol/sec\nProcessing partition_2.mol2 | scanned 8501 molecules | 12075 mol/sec\nProcessing partition_3.mol2 | scanned 8537 molecules | 9794 mol/sec\nProcessing partition_4.mol2 | scanned 8476 molecules | 12817 mol/sec\nProcessing partition_5.mol2 | scanned 8535 molecules | 15391 mol/sec\nProcessing partition_6.mol2 | scanned 8518 molecules | 12703 mol/sec\nProcessing partition_7.mol2 | scanned 8555 molecules | 11566 mol/sec\nFinished\n\n\n\n! python tools/count_mol2.py \\\n--input tutorial-results/02_fgroup_presence_mol2s\n\n\n\n\npartition_1.mol2 : 2140\npartition_2.mol2 : 2118\npartition_3.mol2 : 2064\npartition_4.mol2 : 2107\npartition_5.mol2 : 2068\npartition_6.mol2 : 2189\npartition_7.mol2 : 2186\nTotal : 14872\n\n\n\nAs we can see, we only have 14,872 by applying the atom- and functional group based selection criteria. To summarize the steps so far, in \"Filtering Step 1\" we selected 59,750 (molecules that have fewer than 7 rotatable bonds and are heavier than 200 g/mol) out of 70,000 molecules. Then, in this section (\"Filtering Step 2\"), we selected 14,872 out of those 59,750, molecules that have at least 1 keto and 1 sp3 sulfur atom.\n\n\nStep 3 -- Filtering by Distance between Functional Groups\n\n\nIn this third step, we will now select only those molecules that have a sp3 sulfur atom and a keto-group within a 13-20 angstrom distance.\n\n\n\n\n \u26a0 Technically, we could have skipped the section \"Filtering Step 2\" and directly proceeded with the distance-based atom selection described in this section. However, note that distance calculations are computationally more expensive than merely checking for the presence of certain atoms and functional groups. Thus, but separating those two tasks, we can filter out molecules that don't contain a keto and a sp3 sulfur atoms first.\n\n\n\nThe selection string syntax is analogous to the \n--selection\n parameter described in the \"Filtering Step 2\" --  please revisit this section if you need a refresher. However, it shall be noted that the distance selection only works for a pair of atoms. For example, the following string\n\n\n\"((atom_type == 'S.3') | (atom_type == 'S.o2')) --> (atom_type == 'O.2')\"\n\n\nchecks the distance between an atom A, which is either an S.3 or an S.o2 atom, and an atom B, which is an O.2 atom. If you want to compute the distance between multiple atoms, for example, the distance of atom A to atoms B and C, you need to repeat the distance selection multiple times. For example, you would perform the distance selection between A and B first, and then, in a second iteration, you would perform the distance selection on the results of the first selection, to select molecules based on the distance between atom A and C.\n\n\nNow, let us execute the first step of a filtering step in screenlamp and create an ID file of molecules that have an sp3 sulfur and an O.2 atom within a 13-20 angstrom distance. \n\n\n! python tools/funcgroup_distance_to_id.py \\\n  --input tutorial-results/02_fgroup_presence_mol2s \\\n  --output tutorial-results/03_fgroup_distance_mol2s.txt \\\n  --selection \"((atom_type == 'S.3') | (atom_type == 'S.o2')) --> (atom_type == 'O.2')\" \\\n  --distance \"13-20\" \\\n  --processes 0\n\n\n\n\nUsing selection: [\"((pdmol.df.atom_type == 'S.3') | (pdmol.df.atom_type == 'S.o2'))\", \"(pdmol.df.atom_type == 'O.2')\"]\nProcessing partition_1.mol2 | 196 mol/sec\nProcessing partition_2.mol2 | 235 mol/sec\nProcessing partition_3.mol2 | 244 mol/sec\nProcessing partition_4.mol2 | 228 mol/sec\nProcessing partition_5.mol2 | 226 mol/sec\nProcessing partition_6.mol2 | 228 mol/sec\nProcessing partition_7.mol2 | 220 mol/sec\nFinished\n\n\n\nFollowing the already familiar procedure, we can now select the MOL2 structures using the generated ID file:\n\n\n! python tools/id_to_mol2.py \\\n  --input tutorial-results/02_fgroup_presence_mol2s \\\n  --output tutorial-results/03_fgroup_distance_mol2s \\\n  --id_file tutorial-results/03_fgroup_distance_mol2s.txt \\\n  --whitelist True\n\n\n\n\nProcessing partition_1.mol2 | scanned 2140 molecules | 18214 mol/sec\nProcessing partition_2.mol2 | scanned 2118 molecules | 16030 mol/sec\nProcessing partition_3.mol2 | scanned 2064 molecules | 12371 mol/sec\nProcessing partition_4.mol2 | scanned 2107 molecules | 14275 mol/sec\nProcessing partition_5.mol2 | scanned 2068 molecules | 14494 mol/sec\nProcessing partition_6.mol2 | scanned 2189 molecules | 12596 mol/sec\nProcessing partition_7.mol2 | scanned 2186 molecules | 14133 mol/sec\nFinished\n\n\n\n! python tools/count_mol2.py \\\n  --input tutorial-results/03_fgroup_distance_mol2s\n\n\n\n\npartition_1.mol2 : 16\npartition_2.mol2 : 16\npartition_3.mol2 : 13\npartition_4.mol2 : 15\npartition_5.mol2 : 12\npartition_6.mol2 : 20\npartition_7.mol2 : 15\nTotal : 107\n\n\n\nAfter applying this distance-based filtering step, we can see that only 107 molecules out of the 14,872 from \"\nFiltering Step 2 -- Presence and Absence of Functional Groups\n\" remain.\n\n\nStep 4 -- Generating Conformers\n\n\nIn this section, we are going to generate low-energy conformers of the molecules we have selected so far. In the next section, we are going to use these favorable-energy conformations and overlay them with a query molecule.\n\n\n\n\nGenerating low-energy conformers of either database or reference molecule is highly recommended to account for the flexibility of molecules (for instance, rotatable bonds) when overlaying molecules (in the next step, \"Step 5 -- Overlaying Reference and Database molecules\"). However, note that working with low-energy conformers increases the computational cost involved in computing the optimal overlays. For example, assuming that we have 10,000 database molecules and one reference molecule, generating 200 low-energy conformers of each of those database molecules would result in a database of 10,000x200 = 2,000,000 molecules. Consequently, we will have to sample 2,000,000x1 overlays (200 overlays per database molecule) instead of 10,000 overlays to obtain the best-overlaying pairs. To take it a step further, we could also consider multiple conformers of the reference molecule. For example, if we create 200 conformers of the one reference molecule as well, we will have to overlay 2000,000x200 = 40,000,000 pairs. To summarize, the three different options as input for overlaying the reference molecule with the database molecule are given below, in increasing order of computational cost, which is proportional to the thoroughness of the sampling procedure:\n\n\n1) Overlay a single conformer for both database and the reference molecule\n2) Overlay a single reference molecule conformer with multiple database molecule conformers\n3) Overlay multiple reference molecule conformers with multiple database molecule conformers\n\n\nIn this tutorial, we will use option 3), where we create up to 200 conformers of each database molecule using OpenEye Omega and overlay them with an existing multi-conformer reference molecule that is already provided with the tutorial files (\n3kpzs_query.mol2\n, which contains 35 favorable-energy conformers of the reference molecule 3kPZS).\n\n\nAgain, please note the creating multiple conformers of a molecule is optional. The program we are going to use is OpenEye Omega, but you may use alternative tools as well, as long as they can output those conformer structures in MOL2 file format. \n\n\n \u26a0 Please also note that the conformers of a given molecule (database or reference molecule) files should have the same molecule ID in the MOL2 files to parse the output of \"[Step 5 -- Overlaying Reference and Database molecules](#Step-5----Overlaying-Reference-and-Database-molecules)\" without additional workarounds. For example, if you have a multi-conformer MOL2 file such as 3kpzs_query.mol2, make sure that the molecule IDs in the MOL2 file are all \"3kPZS\" and don't have any suffixes or prefixes such as \"3kPZS_1, 3KPZS_2, ...\". The reason why we want to avoid prefixes and suffixes in those conformer names is that the overlay tool OpenEye ROCS identifies conformers by their structure, not their names, and such molecule IDs would only result in annoying name mangling, which makes the results harder to parse downstream in the analysis pipeline. \n\n\n\n \u26a0  Optionally, [\"Step 3 -- Filtering by Distance between Functional Groups\"](Step-3----Filtering-by-Distance-between-Functional-Groups) can also be repeated on the output of this step, the low-energy conformers, to sort out conformers where functional groups are in a spatial arrangement that may not be consistent with prior knowledge -- for example, experimental insights that a molecule interacts via certain groups in a particular way with its binding partner.\n\n\n\nWhile you can use OpenEye Omega directly from the command line as described in the documentation at https://www.eyesopen.com/omega, screenlamp provides a wrapper tool that generates multiconformer files of all mol2 files in a given directory using its default settings, which can be used as shown below (note that you need to provide an \n--executable\n path pointing to the Omega program on your machine:\n\n\n! python tools/run_omega.py \\\n  --input tutorial-results/03_fgroup_distance_mol2s \\\n  --output tutorial-results/04_omega_confomers/ \\\n  --executable \"/Applications/OMEGA 2.5.1.4.app/Contents/MacOS/omega2-2.5.1.4\" \\\n  --processes 0\n\n\n\n\nProcessing tutorial-results/03_fgroup_distance_mol2s/partition_1.mol2\nSlave started on host Sebastians-MacBook-Pro\nSlave started on host Sebastians-MacBook-Pro\nSlave started on host Sebastians-MacBook-Pro\n\n          :jGf:             .d8888b. 88d8b.d8b. .d8888b. .d8888b. .d8888b.\n        :jGDDDDf:           88'  `88 88'`88'`88 88ooood8 88'  `88 88'  `88\n      ,fDDDGjLDDDf,         88.  .88 88  88  88 88.  ... 88.  .88 88.  .88\n    ,fDDLt:   :iLDDL;       `88888P' dP  dP  dP `88888P' `8888P88 `88888P8\n  ;fDLt:         :tfDG;                                       .88\n,jft:   ,ijfffji,   :iff                                  d8888P\n     .jGDDDDDDDDDGt.      \n    ;GDDGt:''':tDDDG,          Copyright (c) 2004-2013\n   .DDDG:       :GDDG.         OpenEye Scientific Software, Inc.\n   ;DDDj         tDDDi    \n   ,DDDf         fDDD,         Version: 2.5.1.4\n    LDDDt.     .fDDDj          Built:   20130515\n    .tDDDDfjtjfDDDGt           OEChem version: 1.9.1\n      :ifGDDDDDGfi.            Platform: osx-10.8-clang++4-x64\n          .:::.                \n  ......................       \n  DDDDDDDDDDDDDDDDDDDDDD       \n  DDDDDDDDDDDDDDDDDDDDDD\n\nSupported run modes:\n  Single processor\n  MPI Multiprocessor\n\n  Licensed for the exclusive use of The Laboratory of Leslie Kuhn.\n  Licensed for use only in Michigan State University.\n  License expires on October 20, 2017.\n\n\nTo cite OMEGA please use the following:\n  OMEGA 2.5.1.4: OpenEye Scientific Software, Santa Fe, NM.\n  http://www.eyesopen.com.\n\n  Hawkins, P.C.D.; Skillman, A.G.; Warren, G.L.; Ellingson, B.A.; Stahl, M.T.\n  Conformer Generation with OMEGA: Algorithm and Validation Using High\n  Quality Structures from the Protein Databank and the Cambridge \n  Structural Database. J. Chem. Inf. Model. 2010, 50, 572-584.\n\nRunning as MPI Master\n...ce_mol2s/partition_1.mol2|****************************************|100.00%\nProcessing tutorial-results/03_fgroup_distance_mol2s/partition_2.mol2\nSlave started on host Sebastians-MacBook-Pro\nSlave started on host Sebastians-MacBook-Pro\n\n          :jGf:             .d8888b. 88d8b.d8b. .d8888b. .d8888b. .d8888b.\n        :jGDDDDf:           88'  `88 88'`88'`88 88ooood8 88'  `88 88'  `88\n      ,fDDDGjLDDDf,         88.  .88 88  88  88 88.  ... 88.  .88 88.  .88\n    ,fDDLt:   :iLDDL;       `88888P' dP  dP  dP `88888P' `8888P88 `88888P8\n  ;fDLt:         :tfDG;                                       .88\n,jft:   ,ijfffji,   :iff                                  d8888P\n     .jGDDDDDDDDDGt.      \n    ;GDDGt:''':tDDDG,          Copyright (c) 2004-2013\n   .DDDG:       :GDDG.         OpenEye Scientific Software, Inc.\n   ;DDDj         tDDDi    \n   ,DDDf         fDDD,         Version: 2.5.1.4\n    LDDDt.     .fDDDj          Built:   20130515\n    .tDDDDfjtjfDDDGt           OEChem version: 1.9.1\n      :ifGDDDDDGfi.            Platform: osx-10.8-clang++4-x64\n          .:::.                \n  ......................       \n  DDDDDDDDDDDDDDDDDDDDDD       \n  DDDDDDDDDDDDDDDDDDDDDD\n\nSupported run modes:\n  Single processor\n  MPI Multiprocessor\n\n  Licensed for the exclusive use of The Laboratory of Leslie Kuhn.\n  Licensed for use only in Michigan State University.\n  License expires on October 20, 2017.\n\n\nTo cite OMEGA please use the following:\n  OMEGA 2.5.1.4: OpenEye Scientific Software, Santa Fe, NM.\n  http://www.eyesopen.com.\n\n  Hawkins, P.C.D.; Skillman, A.G.; Warren, G.L.; Ellingson, B.A.; Stahl, M.T.\n  Conformer Generation with OMEGA: Algorithm and Validation Using High\n  Quality Structures from the Protein Databank and the Cambridge \n  Structural Database. J. Chem. Inf. Model. 2010, 50, 572-584.\n\nRunning as MPI Master\nSlave started on host Sebastians-MacBook-Pro\n...ce_mol2s/partition_2.mol2|****************************************|100.00%\nProcessing tutorial-results/03_fgroup_distance_mol2s/partition_3.mol2\nSlave started on host Sebastians-MacBook-Pro\nSlave started on host Sebastians-MacBook-Pro\nSlave started on host Sebastians-MacBook-Pro\n\n          :jGf:             .d8888b. 88d8b.d8b. .d8888b. .d8888b. .d8888b.\n        :jGDDDDf:           88'  `88 88'`88'`88 88ooood8 88'  `88 88'  `88\n      ,fDDDGjLDDDf,         88.  .88 88  88  88 88.  ... 88.  .88 88.  .88\n    ,fDDLt:   :iLDDL;       `88888P' dP  dP  dP `88888P' `8888P88 `88888P8\n  ;fDLt:         :tfDG;                                       .88\n,jft:   ,ijfffji,   :iff                                  d8888P\n     .jGDDDDDDDDDGt.      \n    ;GDDGt:''':tDDDG,          Copyright (c) 2004-2013\n   .DDDG:       :GDDG.         OpenEye Scientific Software, Inc.\n   ;DDDj         tDDDi    \n   ,DDDf         fDDD,         Version: 2.5.1.4\n    LDDDt.     .fDDDj          Built:   20130515\n    .tDDDDfjtjfDDDGt           OEChem version: 1.9.1\n      :ifGDDDDDGfi.            Platform: osx-10.8-clang++4-x64\n          .:::.                \n  ......................       \n  DDDDDDDDDDDDDDDDDDDDDD       \n  DDDDDDDDDDDDDDDDDDDDDD\n\nSupported run modes:\n  Single processor\n  MPI Multiprocessor\n\n  Licensed for the exclusive use of The Laboratory of Leslie Kuhn.\n  Licensed for use only in Michigan State University.\n  License expires on October 20, 2017.\n\n\nTo cite OMEGA please use the following:\n  OMEGA 2.5.1.4: OpenEye Scientific Software, Santa Fe, NM.\n  http://www.eyesopen.com.\n\n  Hawkins, P.C.D.; Skillman, A.G.; Warren, G.L.; Ellingson, B.A.; Stahl, M.T.\n  Conformer Generation with OMEGA: Algorithm and Validation Using High\n  Quality Structures from the Protein Databank and the Cambridge \n  Structural Database. J. Chem. Inf. Model. 2010, 50, 572-584.\n\nRunning as MPI Master\n...ce_mol2s/partition_3.mol2|****************************************|100.00%\nProcessing tutorial-results/03_fgroup_distance_mol2s/partition_4.mol2\nSlave started on host Sebastians-MacBook-Pro\nSlave started on host Sebastians-MacBook-Pro\nSlave started on host Sebastians-MacBook-Pro\n\n          :jGf:             .d8888b. 88d8b.d8b. .d8888b. .d8888b. .d8888b.\n        :jGDDDDf:           88'  `88 88'`88'`88 88ooood8 88'  `88 88'  `88\n      ,fDDDGjLDDDf,         88.  .88 88  88  88 88.  ... 88.  .88 88.  .88\n    ,fDDLt:   :iLDDL;       `88888P' dP  dP  dP `88888P' `8888P88 `88888P8\n  ;fDLt:         :tfDG;                                       .88\n,jft:   ,ijfffji,   :iff                                  d8888P\n     .jGDDDDDDDDDGt.      \n    ;GDDGt:''':tDDDG,          Copyright (c) 2004-2013\n   .DDDG:       :GDDG.         OpenEye Scientific Software, Inc.\n   ;DDDj         tDDDi    \n   ,DDDf         fDDD,         Version: 2.5.1.4\n    LDDDt.     .fDDDj          Built:   20130515\n    .tDDDDfjtjfDDDGt           OEChem version: 1.9.1\n      :ifGDDDDDGfi.            Platform: osx-10.8-clang++4-x64\n          .:::.                \n  ......................       \n  DDDDDDDDDDDDDDDDDDDDDD       \n  DDDDDDDDDDDDDDDDDDDDDD\n\nSupported run modes:\n  Single processor\n  MPI Multiprocessor\n\n  Licensed for the exclusive use of The Laboratory of Leslie Kuhn.\n  Licensed for use only in Michigan State University.\n  License expires on October 20, 2017.\n\n\nTo cite OMEGA please use the following:\n  OMEGA 2.5.1.4: OpenEye Scientific Software, Santa Fe, NM.\n  http://www.eyesopen.com.\n\n  Hawkins, P.C.D.; Skillman, A.G.; Warren, G.L.; Ellingson, B.A.; Stahl, M.T.\n  Conformer Generation with OMEGA: Algorithm and Validation Using High\n  Quality Structures from the Protein Databank and the Cambridge \n  Structural Database. J. Chem. Inf. Model. 2010, 50, 572-584.\n\nRunning as MPI Master\n...ce_mol2s/partition_4.mol2|****************************************|100.00%\nProcessing tutorial-results/03_fgroup_distance_mol2s/partition_5.mol2\nSlave started on host Sebastians-MacBook-Pro\nSlave started on host Sebastians-MacBook-Pro\nSlave started on host Sebastians-MacBook-Pro\n\n          :jGf:             .d8888b. 88d8b.d8b. .d8888b. .d8888b. .d8888b.\n        :jGDDDDf:           88'  `88 88'`88'`88 88ooood8 88'  `88 88'  `88\n      ,fDDDGjLDDDf,         88.  .88 88  88  88 88.  ... 88.  .88 88.  .88\n    ,fDDLt:   :iLDDL;       `88888P' dP  dP  dP `88888P' `8888P88 `88888P8\n  ;fDLt:         :tfDG;                                       .88\n,jft:   ,ijfffji,   :iff                                  d8888P\n     .jGDDDDDDDDDGt.      \n    ;GDDGt:''':tDDDG,          Copyright (c) 2004-2013\n   .DDDG:       :GDDG.         OpenEye Scientific Software, Inc.\n   ;DDDj         tDDDi    \n   ,DDDf         fDDD,         Version: 2.5.1.4\n    LDDDt.     .fDDDj          Built:   20130515\n    .tDDDDfjtjfDDDGt           OEChem version: 1.9.1\n      :ifGDDDDDGfi.            Platform: osx-10.8-clang++4-x64\n          .:::.                \n  ......................       \n  DDDDDDDDDDDDDDDDDDDDDD       \n  DDDDDDDDDDDDDDDDDDDDDD\n\nSupported run modes:\n  Single processor\n  MPI Multiprocessor\n\n  Licensed for the exclusive use of The Laboratory of Leslie Kuhn.\n  Licensed for use only in Michigan State University.\n  License expires on October 20, 2017.\n\n\nTo cite OMEGA please use the following:\n  OMEGA 2.5.1.4: OpenEye Scientific Software, Santa Fe, NM.\n  http://www.eyesopen.com.\n\n  Hawkins, P.C.D.; Skillman, A.G.; Warren, G.L.; Ellingson, B.A.; Stahl, M.T.\n  Conformer Generation with OMEGA: Algorithm and Validation Using High\n  Quality Structures from the Protein Databank and the Cambridge \n  Structural Database. J. Chem. Inf. Model. 2010, 50, 572-584.\n\nRunning as MPI Master\n...ce_mol2s/partition_5.mol2|****************************************|100.00%\nProcessing tutorial-results/03_fgroup_distance_mol2s/partition_6.mol2\nSlave started on host Sebastians-MacBook-Pro\nSlave started on host Sebastians-MacBook-Pro\nSlave started on host Sebastians-MacBook-Pro\n\n          :jGf:             .d8888b. 88d8b.d8b. .d8888b. .d8888b. .d8888b.\n        :jGDDDDf:           88'  `88 88'`88'`88 88ooood8 88'  `88 88'  `88\n      ,fDDDGjLDDDf,         88.  .88 88  88  88 88.  ... 88.  .88 88.  .88\n    ,fDDLt:   :iLDDL;       `88888P' dP  dP  dP `88888P' `8888P88 `88888P8\n  ;fDLt:         :tfDG;                                       .88\n,jft:   ,ijfffji,   :iff                                  d8888P\n     .jGDDDDDDDDDGt.      \n    ;GDDGt:''':tDDDG,          Copyright (c) 2004-2013\n   .DDDG:       :GDDG.         OpenEye Scientific Software, Inc.\n   ;DDDj         tDDDi    \n   ,DDDf         fDDD,         Version: 2.5.1.4\n    LDDDt.     .fDDDj          Built:   20130515\n    .tDDDDfjtjfDDDGt           OEChem version: 1.9.1\n      :ifGDDDDDGfi.            Platform: osx-10.8-clang++4-x64\n          .:::.                \n  ......................       \n  DDDDDDDDDDDDDDDDDDDDDD       \n  DDDDDDDDDDDDDDDDDDDDDD\n\nSupported run modes:\n  Single processor\n  MPI Multiprocessor\n\n  Licensed for the exclusive use of The Laboratory of Leslie Kuhn.\n  Licensed for use only in Michigan State University.\n  License expires on October 20, 2017.\n\n\nTo cite OMEGA please use the following:\n  OMEGA 2.5.1.4: OpenEye Scientific Software, Santa Fe, NM.\n  http://www.eyesopen.com.\n\n  Hawkins, P.C.D.; Skillman, A.G.; Warren, G.L.; Ellingson, B.A.; Stahl, M.T.\n  Conformer Generation with OMEGA: Algorithm and Validation Using High\n  Quality Structures from the Protein Databank and the Cambridge \n  Structural Database. J. Chem. Inf. Model. 2010, 50, 572-584.\n\nRunning as MPI Master\n...ce_mol2s/partition_6.mol2|****************************************|100.00%\nProcessing tutorial-results/03_fgroup_distance_mol2s/partition_7.mol2\nSlave started on host Sebastians-MacBook-Pro\nSlave started on host Sebastians-MacBook-Pro\nSlave started on host Sebastians-MacBook-Pro\n\n          :jGf:             .d8888b. 88d8b.d8b. .d8888b. .d8888b. .d8888b.\n        :jGDDDDf:           88'  `88 88'`88'`88 88ooood8 88'  `88 88'  `88\n      ,fDDDGjLDDDf,         88.  .88 88  88  88 88.  ... 88.  .88 88.  .88\n    ,fDDLt:   :iLDDL;       `88888P' dP  dP  dP `88888P' `8888P88 `88888P8\n  ;fDLt:         :tfDG;                                       .88\n,jft:   ,ijfffji,   :iff                                  d8888P\n     .jGDDDDDDDDDGt.      \n    ;GDDGt:''':tDDDG,          Copyright (c) 2004-2013\n   .DDDG:       :GDDG.         OpenEye Scientific Software, Inc.\n   ;DDDj         tDDDi    \n   ,DDDf         fDDD,         Version: 2.5.1.4\n    LDDDt.     .fDDDj          Built:   20130515\n    .tDDDDfjtjfDDDGt           OEChem version: 1.9.1\n      :ifGDDDDDGfi.            Platform: osx-10.8-clang++4-x64\n          .:::.                \n  ......................       \n  DDDDDDDDDDDDDDDDDDDDDD       \n  DDDDDDDDDDDDDDDDDDDDDD\n\nSupported run modes:\n  Single processor\n  MPI Multiprocessor\n\n  Licensed for the exclusive use of The Laboratory of Leslie Kuhn.\n  Licensed for use only in Michigan State University.\n  License expires on October 20, 2017.\n\n\nTo cite OMEGA please use the following:\n  OMEGA 2.5.1.4: OpenEye Scientific Software, Santa Fe, NM.\n  http://www.eyesopen.com.\n\n  Hawkins, P.C.D.; Skillman, A.G.; Warren, G.L.; Ellingson, B.A.; Stahl, M.T.\n  Conformer Generation with OMEGA: Algorithm and Validation Using High\n  Quality Structures from the Protein Databank and the Cambridge \n  Structural Database. J. Chem. Inf. Model. 2010, 50, 572-584.\n\nRunning as MPI Master\n...ce_mol2s/partition_7.mol2|****************************************|100.00%\n\n\n\nBy default, Omega samples up to 50,000 conformer structures and keeps up to 200 conformers with favorable energy per molecule. Additional arguments can be provided using \n--settings\n flag of \nrun_omega.py\n. For example, to increase the maximum number of conformers to keep from 200 to 500, you can provide the following argument: \n\"--settings -maxconfs 500 \\\"\n.\n\n\nNow that we created the conformers of the database molecules, let us count the number of structures that we would consider for the pair-wise overlays in the next step:\n\n\n! python tools/count_mol2.py \\\n  --input tutorial-results/04_omega_confomers/\n\n\n\n\npartition_1.mol2 : 2940\npartition_2.mol2 : 2768\npartition_3.mol2 : 2263\npartition_4.mol2 : 2550\npartition_5.mol2 : 2394\npartition_6.mol2 : 3433\npartition_7.mol2 : 2693\nTotal : 19041\n\n\n\nAs we can see, we now have 19,041 structures to consider, which means Omega created ~200 low-energy (favorable) conformers of the 107 single-conformer input structures in \n03_fgroup_distance_mol2s\n.\n\n\nStep 5 -- Overlaying Reference and Database Molecules\n\n\nIn this section we are going to overlay the database conformers we generated in \ntutorial-results/04_omega_confomers/\n that we generated in the previous step (\"\nStep 4 -- Generating Conformers\n\") with 35 conformers of the reference molecule (called 3kPZS), which are provided in the tutorial dataset as \n3kpzs_query.mol2\n. \n\n\n \u26a0 Note that if you are working with your own reference molecule, conformers can be generated similar to generating database molecules as described in section \"[Step 4 -- Generating Conformers](Step-4----Generating-Conformers)\".\n\n\n\n\n\nScreenlamp provides a wrapper tool \nrun_rocs.py\n that wraps OpenEye ROCS for generating molecular overlays. For more information about ROCS, please see https://www.eyesopen.com/rocs. The \nrun_rocs.py\n wrapper uses ROCS's default settings plus additional settings provided as arguments to the \n--settings\n parameter of \nrun_rocs.py\n. For more information about the ROCS settings, please refer to the official documentation at https://www.eyesopen.com/rocs. The settings we are going to use will overlay each query conformer with each database conformer, and it will only keep the best overlay for each multi-conformer per. For instance, if we have 200 conformers of a database molecule A and 200 conformers of a reference molecule B, only the single best overlay out of the 200x200 overlays will be kept.\n\n\n! python tools/run_rocs.py \\\n  --input tutorial-results/04_omega_confomers/ \\\n  --output tutorial-results/05_rocs_overlays/ \\\n  --query tk-tutorial_data/3kpzs_query.mol2 \\\n  --executable \"/Applications/ROCS 3.2.1.4.app/Contents/MacOS/rocs-3.2.1.4\" \\\n  --settings \"-rankby TanimotoCombo -maxhits 0 -besthits 0 -progress percent\" \\\n  --processes 0\n\n\n\n\nProcessing partition_1.mol2\n          :jGf:               \n        :jGDDDDf:             \n      ,fDDDGjLDDDf,           'a8  ,a'8b   a''8b    a''8b  a8f'8\n    ,fDDLt:   :iLDDL;          88 a/  88  d'   8b  d'  88  88'  \n  ;fDLt:         :tfDG;        88P    8f d8    88 d8       '88aa\n,jft:   ,ijfffji,   :iff       8P        88    8P 88      a  '888\n     .jGDDDDDDDDDGt.           8i        88   d8  Y8   ,d 8    8P\n    ;GDDGt:''':tDDDG,          a8/        `88aa'    '8aa'  'baa8'\n   .DDDG:       :GDDG.    \n   ;DDDj         tDDDi    \n   ,DDDf         fDDD,         Copyright (C) 1997-2015\n    LDDDt.     .fDDDj          OpenEye Scientific Software, Inc.\n    .tDDDDfjtjfDDDGt      \n      :ifGDDDDDGfi.            Version: 3.2.1.4\n          .:::.                Built:   20150831\n  ......................       OEChem version: 2.0.4\n  DDDDDDDDDDDDDDDDDDDDDD       Platform: osx-10.10-clang++6-x64\n  DDDDDDDDDDDDDDDDDDDDDD\n\nSupported run modes:\n  Single processor\n  MPI Multiprocessor\n\n  Licensed for the exclusive use of The Laboratory of Leslie Kuhn.\n  Licensed for use only in Michigan State University.\n  License expires on October 20, 2017.\n\n\nTo cite ROCS please use the following:\n  ROCS 3.2.1.4: OpenEye Scientific Software, Santa Fe, NM.\n  http://www.eyesopen.com.\n\n  Hawkins, P.C.D.; Skillman, A.G.; Nicholls, A. Comparison of Shape-Matching\n  and Docking as Virtual Screening Tools. J. Med. Chem., 2007, 50, 74.\n\nSlave started on host Sebastians-MacBook-Pro\nSlave started on host Sebastians-MacBook-Pro\nSlave started on host Sebastians-MacBook-Pro\nRunning as MPI Master\n  database file: tutorial-results/04_omega_confomers/partition_1.mol2\n\nQuery being read from:          tk-tutorial_data/3kpzs_query.mol2\nFile prefix is:                 tutorial-results/05_rocs_overlays/partition_1\nOutput directory:               /Users/sebastian/code/screenlamp/docs/sources/user_guide\nLog file will be written to:    tutorial-results/05_rocs_overlays/partition_1.log\nStatistics will be written to:  tutorial-results/05_rocs_overlays/partition_1_1.rpt\nHit structures will written to: tutorial-results/05_rocs_overlays/partition_1_hits_1.mol2\nStatus file will be written to: tutorial-results/05_rocs_overlays/partition_1_1.status\n\nQuery(#1): 3KPZS has 35 conformer(s)\nDatabase 1 of 1:                tutorial-results/04_omega_confomers/partition_1.mol2\n...onfomers/partition_1.mol2|****************************************|100.00%\n\n16 molecules in 41 seconds -> 0.4 molecules/sec\n                              2510 overlays/sec\n\n16 hits found\n=================================================\n\nMolecule read failures: 0\n#warnings             : 0\n#errors               : 0\n#queries processed    : 1\nProcessing partition_2.mol2\nSlave started on host Sebastians-MacBook-Pro\nSlave started on host Sebastians-MacBook-Pro\n          :jGf:               \n        :jGDDDDf:             \n      ,fDDDGjLDDDf,           'a8  ,a'8b   a''8b    a''8b  a8f'8\n    ,fDDLt:   :iLDDL;          88 a/  88  d'   8b  d'  88  88'  \n  ;fDLt:         :tfDG;        88P    8f d8    88 d8       '88aa\n,jft:   ,ijfffji,   :iff       8P        88    8P 88      a  '888\n     .jGDDDDDDDDDGt.           8i        88   d8  Y8   ,d 8    8P\n    ;GDDGt:''':tDDDG,          a8/        `88aa'    '8aa'  'baa8'\n   .DDDG:       :GDDG.    \n   ;DDDj         tDDDi    \n   ,DDDf         fDDD,         Copyright (C) 1997-2015\n    LDDDt.     .fDDDj          OpenEye Scientific Software, Inc.\n    .tDDDDfjtjfDDDGt      \n      :ifGDDDDDGfi.            Version: 3.2.1.4\n          .:::.                Built:   20150831\n  ......................       OEChem version: 2.0.4\n  DDDDDDDDDDDDDDDDDDDDDD       Platform: osx-10.10-clang++6-x64\n  DDDDDDDDDDDDDDDDDDDDDD\n\nSupported run modes:\n  Single processor\n  MPI Multiprocessor\n\n  Licensed for the exclusive use of The Laboratory of Leslie Kuhn.\n  Licensed for use only in Michigan State University.\n  License expires on October 20, 2017.\n\n\nTo cite ROCS please use the following:\n  ROCS 3.2.1.4: OpenEye Scientific Software, Santa Fe, NM.\n  http://www.eyesopen.com.\n\n  Hawkins, P.C.D.; Skillman, A.G.; Nicholls, A. Comparison of Shape-Matching\n  and Docking as Virtual Screening Tools. J. Med. Chem., 2007, 50, 74.\n\nSlave started on host Sebastians-MacBook-Pro\nRunning as MPI Master\n  database file: tutorial-results/04_omega_confomers/partition_2.mol2\n\nQuery being read from:          tk-tutorial_data/3kpzs_query.mol2\nFile prefix is:                 tutorial-results/05_rocs_overlays/partition_2\nOutput directory:               /Users/sebastian/code/screenlamp/docs/sources/user_guide\nLog file will be written to:    tutorial-results/05_rocs_overlays/partition_2.log\nStatistics will be written to:  tutorial-results/05_rocs_overlays/partition_2_1.rpt\nHit structures will written to: tutorial-results/05_rocs_overlays/partition_2_hits_1.mol2\nStatus file will be written to: tutorial-results/05_rocs_overlays/partition_2_1.status\n\nQuery(#1): 3KPZS has 35 conformer(s)\nDatabase 1 of 1:                tutorial-results/04_omega_confomers/partition_2.mol2\n...onfomers/partition_2.mol2|****************************************|100.00%\n\n16 molecules in 47 seconds -> 0.3 molecules/sec\n                              2061 overlays/sec\n\n16 hits found\n=================================================\n\nMolecule read failures: 0\n#warnings             : 0\n#errors               : 0\n#queries processed    : 1\nProcessing partition_3.mol2\nSlave started on host Sebastians-MacBook-Pro\nSlave started on host Sebastians-MacBook-Pro\nSlave started on host Sebastians-MacBook-Pro\n          :jGf:               \n        :jGDDDDf:             \n      ,fDDDGjLDDDf,           'a8  ,a'8b   a''8b    a''8b  a8f'8\n    ,fDDLt:   :iLDDL;          88 a/  88  d'   8b  d'  88  88'  \n  ;fDLt:         :tfDG;        88P    8f d8    88 d8       '88aa\n,jft:   ,ijfffji,   :iff       8P        88    8P 88      a  '888\n     .jGDDDDDDDDDGt.           8i        88   d8  Y8   ,d 8    8P\n    ;GDDGt:''':tDDDG,          a8/        `88aa'    '8aa'  'baa8'\n   .DDDG:       :GDDG.    \n   ;DDDj         tDDDi    \n   ,DDDf         fDDD,         Copyright (C) 1997-2015\n    LDDDt.     .fDDDj          OpenEye Scientific Software, Inc.\n    .tDDDDfjtjfDDDGt      \n      :ifGDDDDDGfi.            Version: 3.2.1.4\n          .:::.                Built:   20150831\n  ......................       OEChem version: 2.0.4\n  DDDDDDDDDDDDDDDDDDDDDD       Platform: osx-10.10-clang++6-x64\n  DDDDDDDDDDDDDDDDDDDDDD\n\nSupported run modes:\n  Single processor\n  MPI Multiprocessor\n\n  Licensed for the exclusive use of The Laboratory of Leslie Kuhn.\n  Licensed for use only in Michigan State University.\n  License expires on October 20, 2017.\n\n\nTo cite ROCS please use the following:\n  ROCS 3.2.1.4: OpenEye Scientific Software, Santa Fe, NM.\n  http://www.eyesopen.com.\n\n  Hawkins, P.C.D.; Skillman, A.G.; Nicholls, A. Comparison of Shape-Matching\n  and Docking as Virtual Screening Tools. J. Med. Chem., 2007, 50, 74.\n\nRunning as MPI Master\n  database file: tutorial-results/04_omega_confomers/partition_3.mol2\n\nQuery being read from:          tk-tutorial_data/3kpzs_query.mol2\nFile prefix is:                 tutorial-results/05_rocs_overlays/partition_3\nOutput directory:               /Users/sebastian/code/screenlamp/docs/sources/user_guide\nLog file will be written to:    tutorial-results/05_rocs_overlays/partition_3.log\nStatistics will be written to:  tutorial-results/05_rocs_overlays/partition_3_1.rpt\nHit structures will written to: tutorial-results/05_rocs_overlays/partition_3_hits_1.mol2\nStatus file will be written to: tutorial-results/05_rocs_overlays/partition_3_1.status\n\nQuery(#1): 3KPZS has 35 conformer(s)\nDatabase 1 of 1:                tutorial-results/04_omega_confomers/partition_3.mol2\n...onfomers/partition_3.mol2|****************************************|100.00%\n\n13 molecules in 30 seconds -> 0.4 molecules/sec\n                              2640 overlays/sec\n\n13 hits found\n=================================================\n\nMolecule read failures: 0\n#warnings             : 0\n#errors               : 0\n#queries processed    : 1\nProcessing partition_4.mol2\nSlave started on host Sebastians-MacBook-Pro\nSlave started on host Sebastians-MacBook-Pro\n          :jGf:               \n        :jGDDDDf:             \n      ,fDDDGjLDDDf,           'a8  ,a'8b   a''8b    a''8b  a8f'8\n    ,fDDLt:   :iLDDL;          88 a/  88  d'   8b  d'  88  88'  \n  ;fDLt:         :tfDG;        88P    8f d8    88 d8       '88aa\n,jft:   ,ijfffji,   :iff       8P        88    8P 88      a  '888\n     .jGDDDDDDDDDGt.           8i        88   d8  Y8   ,d 8    8P\n    ;GDDGt:''':tDDDG,          a8/        `88aa'    '8aa'  'baa8'\n   .DDDG:       :GDDG.    \n   ;DDDj         tDDDi    \n   ,DDDf         fDDD,         Copyright (C) 1997-2015\n    LDDDt.     .fDDDj          OpenEye Scientific Software, Inc.\n    .tDDDDfjtjfDDDGt      \n      :ifGDDDDDGfi.            Version: 3.2.1.4\n          .:::.                Built:   20150831\n  ......................       OEChem version: 2.0.4\n  DDDDDDDDDDDDDDDDDDDDDD       Platform: osx-10.10-clang++6-x64\n  DDDDDDDDDDDDDDDDDDDDDD\n\nSupported run modes:\n  Single processor\n  MPI Multiprocessor\n\n  Licensed for the exclusive use of The Laboratory of Leslie Kuhn.\n  Licensed for use only in Michigan State University.\n  License expires on October 20, 2017.\n\n\nTo cite ROCS please use the following:\n  ROCS 3.2.1.4: OpenEye Scientific Software, Santa Fe, NM.\n  http://www.eyesopen.com.\n\n  Hawkins, P.C.D.; Skillman, A.G.; Nicholls, A. Comparison of Shape-Matching\n  and Docking as Virtual Screening Tools. J. Med. Chem., 2007, 50, 74.\n\nSlave started on host Sebastians-MacBook-Pro\nRunning as MPI Master\n  database file: tutorial-results/04_omega_confomers/partition_4.mol2\n\nQuery being read from:          tk-tutorial_data/3kpzs_query.mol2\nFile prefix is:                 tutorial-results/05_rocs_overlays/partition_4\nOutput directory:               /Users/sebastian/code/screenlamp/docs/sources/user_guide\nLog file will be written to:    tutorial-results/05_rocs_overlays/partition_4.log\nStatistics will be written to:  tutorial-results/05_rocs_overlays/partition_4_1.rpt\nHit structures will written to: tutorial-results/05_rocs_overlays/partition_4_hits_1.mol2\nStatus file will be written to: tutorial-results/05_rocs_overlays/partition_4_1.status\n\nQuery(#1): 3KPZS has 35 conformer(s)\nDatabase 1 of 1:                tutorial-results/04_omega_confomers/partition_4.mol2\n...onfomers/partition_4.mol2|****************************************|100.00%\n\n15 molecules in 42 seconds -> 0.4 molecules/sec\n                              2125 overlays/sec\n\n15 hits found\n=================================================\n\nMolecule read failures: 0\n#warnings             : 0\n#errors               : 0\n#queries processed    : 1\nProcessing partition_5.mol2\nSlave started on host Sebastians-MacBook-Pro\nSlave started on host Sebastians-MacBook-Pro\n          :jGf:               \n        :jGDDDDf:             \n      ,fDDDGjLDDDf,           'a8  ,a'8b   a''8b    a''8b  a8f'8\n    ,fDDLt:   :iLDDL;          88 a/  88  d'   8b  d'  88  88'  \n  ;fDLt:         :tfDG;        88P    8f d8    88 d8       '88aa\n,jft:   ,ijfffji,   :iff       8P        88    8P 88      a  '888\n     .jGDDDDDDDDDGt.           8i        88   d8  Y8   ,d 8    8P\n    ;GDDGt:''':tDDDG,          a8/        `88aa'    '8aa'  'baa8'\n   .DDDG:       :GDDG.    \n   ;DDDj         tDDDi    \n   ,DDDf         fDDD,         Copyright (C) 1997-2015\n    LDDDt.     .fDDDj          OpenEye Scientific Software, Inc.\n    .tDDDDfjtjfDDDGt      \n      :ifGDDDDDGfi.            Version: 3.2.1.4\n          .:::.                Built:   20150831\n  ......................       OEChem version: 2.0.4\n  DDDDDDDDDDDDDDDDDDDDDD       Platform: osx-10.10-clang++6-x64\n  DDDDDDDDDDDDDDDDDDDDDD\n\nSupported run modes:\n  Single processor\n  MPI Multiprocessor\n\n  Licensed for the exclusive use of The Laboratory of Leslie Kuhn.\n  Licensed for use only in Michigan State University.\n  License expires on October 20, 2017.\n\n\nTo cite ROCS please use the following:\n  ROCS 3.2.1.4: OpenEye Scientific Software, Santa Fe, NM.\n  http://www.eyesopen.com.\n\n  Hawkins, P.C.D.; Skillman, A.G.; Nicholls, A. Comparison of Shape-Matching\n  and Docking as Virtual Screening Tools. J. Med. Chem., 2007, 50, 74.\n\nSlave started on host Sebastians-MacBook-Pro\nRunning as MPI Master\n  database file: tutorial-results/04_omega_confomers/partition_5.mol2\n\nQuery being read from:          tk-tutorial_data/3kpzs_query.mol2\nFile prefix is:                 tutorial-results/05_rocs_overlays/partition_5\nOutput directory:               /Users/sebastian/code/screenlamp/docs/sources/user_guide\nLog file will be written to:    tutorial-results/05_rocs_overlays/partition_5.log\nStatistics will be written to:  tutorial-results/05_rocs_overlays/partition_5_1.rpt\nHit structures will written to: tutorial-results/05_rocs_overlays/partition_5_hits_1.mol2\nStatus file will be written to: tutorial-results/05_rocs_overlays/partition_5_1.status\n\nQuery(#1): 3KPZS has 35 conformer(s)\nDatabase 1 of 1:                tutorial-results/04_omega_confomers/partition_5.mol2\n...onfomers/partition_5.mol2|****************************************|100.00%\n\n12 molecules in 40 seconds -> 0.3 molecules/sec\n                              2095 overlays/sec\n\n12 hits found\n=================================================\n\nMolecule read failures: 0\n#warnings             : 0\n#errors               : 0\n#queries processed    : 1\nProcessing partition_6.mol2\nSlave started on host Sebastians-MacBook-Pro\nSlave started on host Sebastians-MacBook-Pro\nSlave started on host Sebastians-MacBook-Pro\n          :jGf:               \n        :jGDDDDf:             \n      ,fDDDGjLDDDf,           'a8  ,a'8b   a''8b    a''8b  a8f'8\n    ,fDDLt:   :iLDDL;          88 a/  88  d'   8b  d'  88  88'  \n  ;fDLt:         :tfDG;        88P    8f d8    88 d8       '88aa\n,jft:   ,ijfffji,   :iff       8P        88    8P 88      a  '888\n     .jGDDDDDDDDDGt.           8i        88   d8  Y8   ,d 8    8P\n    ;GDDGt:''':tDDDG,          a8/        `88aa'    '8aa'  'baa8'\n   .DDDG:       :GDDG.    \n   ;DDDj         tDDDi    \n   ,DDDf         fDDD,         Copyright (C) 1997-2015\n    LDDDt.     .fDDDj          OpenEye Scientific Software, Inc.\n    .tDDDDfjtjfDDDGt      \n      :ifGDDDDDGfi.            Version: 3.2.1.4\n          .:::.                Built:   20150831\n  ......................       OEChem version: 2.0.4\n  DDDDDDDDDDDDDDDDDDDDDD       Platform: osx-10.10-clang++6-x64\n  DDDDDDDDDDDDDDDDDDDDDD\n\nSupported run modes:\n  Single processor\n  MPI Multiprocessor\n\n  Licensed for the exclusive use of The Laboratory of Leslie Kuhn.\n  Licensed for use only in Michigan State University.\n  License expires on October 20, 2017.\n\n\nTo cite ROCS please use the following:\n  ROCS 3.2.1.4: OpenEye Scientific Software, Santa Fe, NM.\n  http://www.eyesopen.com.\n\n  Hawkins, P.C.D.; Skillman, A.G.; Nicholls, A. Comparison of Shape-Matching\n  and Docking as Virtual Screening Tools. J. Med. Chem., 2007, 50, 74.\n\nRunning as MPI Master\n  database file: tutorial-results/04_omega_confomers/partition_6.mol2\n\nQuery being read from:          tk-tutorial_data/3kpzs_query.mol2\nFile prefix is:                 tutorial-results/05_rocs_overlays/partition_6\nOutput directory:               /Users/sebastian/code/screenlamp/docs/sources/user_guide\nLog file will be written to:    tutorial-results/05_rocs_overlays/partition_6.log\nStatistics will be written to:  tutorial-results/05_rocs_overlays/partition_6_1.rpt\nHit structures will written to: tutorial-results/05_rocs_overlays/partition_6_hits_1.mol2\nStatus file will be written to: tutorial-results/05_rocs_overlays/partition_6_1.status\n\nQuery(#1): 3KPZS has 35 conformer(s)\nDatabase 1 of 1:                tutorial-results/04_omega_confomers/partition_6.mol2\n...onfomers/partition_6.mol2|****************************************|100.00%\n\n20 molecules in 66 seconds -> 0.3 molecules/sec\n                              1821 overlays/sec\n\n20 hits found\n=================================================\n\nMolecule read failures: 0\n#warnings             : 0\n#errors               : 0\n#queries processed    : 1\nProcessing partition_7.mol2\nSlave started on host Sebastians-MacBook-Pro\nSlave started on host Sebastians-MacBook-Pro\nSlave started on host Sebastians-MacBook-Pro\n          :jGf:               \n        :jGDDDDf:             \n      ,fDDDGjLDDDf,           'a8  ,a'8b   a''8b    a''8b  a8f'8\n    ,fDDLt:   :iLDDL;          88 a/  88  d'   8b  d'  88  88'  \n  ;fDLt:         :tfDG;        88P    8f d8    88 d8       '88aa\n,jft:   ,ijfffji,   :iff       8P        88    8P 88      a  '888\n     .jGDDDDDDDDDGt.           8i        88   d8  Y8   ,d 8    8P\n    ;GDDGt:''':tDDDG,          a8/        `88aa'    '8aa'  'baa8'\n   .DDDG:       :GDDG.    \n   ;DDDj         tDDDi    \n   ,DDDf         fDDD,         Copyright (C) 1997-2015\n    LDDDt.     .fDDDj          OpenEye Scientific Software, Inc.\n    .tDDDDfjtjfDDDGt      \n      :ifGDDDDDGfi.            Version: 3.2.1.4\n          .:::.                Built:   20150831\n  ......................       OEChem version: 2.0.4\n  DDDDDDDDDDDDDDDDDDDDDD       Platform: osx-10.10-clang++6-x64\n  DDDDDDDDDDDDDDDDDDDDDD\n\nSupported run modes:\n  Single processor\n  MPI Multiprocessor\n\n  Licensed for the exclusive use of The Laboratory of Leslie Kuhn.\n  Licensed for use only in Michigan State University.\n  License expires on October 20, 2017.\n\n\nTo cite ROCS please use the following:\n  ROCS 3.2.1.4: OpenEye Scientific Software, Santa Fe, NM.\n  http://www.eyesopen.com.\n\n  Hawkins, P.C.D.; Skillman, A.G.; Nicholls, A. Comparison of Shape-Matching\n  and Docking as Virtual Screening Tools. J. Med. Chem., 2007, 50, 74.\n\nRunning as MPI Master\n  database file: tutorial-results/04_omega_confomers/partition_7.mol2\n\nQuery being read from:          tk-tutorial_data/3kpzs_query.mol2\nFile prefix is:                 tutorial-results/05_rocs_overlays/partition_7\nOutput directory:               /Users/sebastian/code/screenlamp/docs/sources/user_guide\nLog file will be written to:    tutorial-results/05_rocs_overlays/partition_7.log\nStatistics will be written to:  tutorial-results/05_rocs_overlays/partition_7_1.rpt\nHit structures will written to: tutorial-results/05_rocs_overlays/partition_7_hits_1.mol2\nStatus file will be written to: tutorial-results/05_rocs_overlays/partition_7_1.status\n\nQuery(#1): 3KPZS has 35 conformer(s)\nDatabase 1 of 1:                tutorial-results/04_omega_confomers/partition_7.mol2\n...onfomers/partition_7.mol2|****************************************|100.00%\n\n15 molecules in 40 seconds -> 0.4 molecules/sec\n                              2356 overlays/sec\n\n15 hits found\n=================================================\n\nMolecule read failures: 0\n#warnings             : 0\n#errors               : 0\n#queries processed    : 1\n\n\n\nAlthough we had 19,041 database conformers, our conformer database only consists 107 unique structures (see \" Filtering Step 3 -- Distance between Functional Groups\"), so we expect ROCS to yield 107 best-overlay pairs, which we can check via the familiar \ncount_mol2.py\n tool. \n\n\n \u26a0 Note that in your own analyses, the number of input structures to Omega and output overlays from ROCS is not always the same. Potential sources for this, which we observed, is either that Omega cannot parse certain input structures and/or ROCS sometimes includes duplicates in the results. \n\n\n\n! python tools/count_mol2.py \\\n  --input tutorial-results/05_rocs_overlays/\n\n\n\n\npartition_1_hits_1.mol2 : 16\npartition_2_hits_1.mol2 : 16\npartition_3_hits_1.mol2 : 13\npartition_4_hits_1.mol2 : 15\npartition_5_hits_1.mol2 : 12\npartition_6_hits_1.mol2 : 20\npartition_7_hits_1.mol2 : 15\nTotal : 107\n\n\n\nStep 6 -- Sorting Molecular Overlays\n\n\nIn this section, we are going to sort the pair-wise overlays be overlay score and select only those molecules that meet at certain similarity threshold before we continue with the functional group matching in \"\nStep 7 -- Matching Functional Groups\n\".\n\n\n\n\nTo make screenlamp's functional group matching procedure (\"\nStep 7 -- Matching Functional Groups\n\") requires a general data input format to support a variety of overlay tools (other than ROCS). To bring the ROCS results into a more general format, we are going to use the \nsort_rocs_mol2.py\n utility tool provided in screenlamp.\n\n\nEssentially, the \nsort_rocs_mol2.py\n tool will create a pair of \n\\*_query.mol2\n and \n\\*_dbase.mol2\n files that contain the same number of structures each based on the ROCS overlays. The \n\\*_dbase.mol2\n file contains the database molecule and the \n\\*_query.mol2\n contains the conformer of the reference molecule that corresponds to the best-matching database-reference pair. Besides, we use the \n--sortby\n parameter to sort the molecules by TanimotoCombo and ColorTanimoto score (in descending order, best matches come first) for visualization and remove bad overlays by setting minimum score thresholds based on the TanimotoCombo and ColorTanimoto similarity scores. The TanimotoCombo score measures the similarity between a pair of molecules based on the overall volumetric match (ShapeTanimoto) and the electrostatic similarity (ColorTanimoto). For more information about the different scoring metrics implemented in ROCS, please refer to the official ROCS documentation at https://www.eyesopen.com/rocs.\n\n\n! python tools/sort_rocs_mol2.py \\\n  --input tutorial-results/05_rocs_overlays/ \\\n  --query tk-tutorial_data/3kpzs_query.mol2 \\\n  --output tutorial-results/06_rocs_overlays_sorted \\\n  --sortby TanimotoCombo,ColorTanimoto \\\n  --selection \"(TanimotoCombo >= 0.75) & (ColorTanimoto >= 0.1)\"\\\n  --id_suffix True\n\n\n\n\nProcessing partition_1_hits_1.mol2 | scanned 12 molecules | 2039 mol/sec\nProcessing partition_2_hits_1.mol2 | scanned 14 molecules | 5392 mol/sec\nProcessing partition_3_hits_1.mol2 | scanned 11 molecules | 3583 mol/sec\nProcessing partition_4_hits_1.mol2 | scanned 13 molecules | 5349 mol/sec\nProcessing partition_5_hits_1.mol2 | scanned 11 molecules | 4619 mol/sec\nProcessing partition_6_hits_1.mol2 | scanned 19 molecules | 4531 mol/sec\nProcessing partition_7_hits_1.mol2 | scanned 13 molecules | 5286 mol/sec\n\n\n\n\n\nNote about the id_suffix parameter\n\n\nNote that if \n--id_suffix True\n, a molecule ID suffix will be added to the query molecules in the order the ROCS query molecules appear in a multi-conformer query file. For instance, if all query molecules are labeled \"3kPZS\", then the same structures in the output file are labeled 3kPZS_1, 3kPZS_2, and so on. Note that those modified conformer will correspond to the conformer names in the ROCS report tables. However, they may appear in an unsorted order in the _query files, which are sorted by the overlay score of the database molecules. For example, if the database molecule is called ZINC123_112, first entry in the _query file that corresponds to *_dbase file may by labeled 3kPZS_11 if the 11th 3kPZS conformer is the best match according to ROCS.\n\n\n\n\nAfter using the \nsort_rocs_mol2.py\n utility script, we have a new directory that contains pairs of \n*_dbase.mol2\n and \n*_query.mol2\n conformers from the ROCS overlays:\n\n\n! python tools/count_mol2.py \\\n  --input tutorial-results/06_rocs_overlays_sorted\n\n\n\n\npartition_1_hits_1_dbase.mol2 : 11\npartition_1_hits_1_query.mol2 : 11\npartition_2_hits_1_dbase.mol2 : 13\npartition_2_hits_1_query.mol2 : 13\npartition_3_hits_1_dbase.mol2 : 10\npartition_3_hits_1_query.mol2 : 10\npartition_4_hits_1_dbase.mol2 : 12\npartition_4_hits_1_query.mol2 : 12\npartition_5_hits_1_dbase.mol2 : 10\npartition_5_hits_1_query.mol2 : 10\npartition_6_hits_1_dbase.mol2 : 18\npartition_6_hits_1_query.mol2 : 18\npartition_7_hits_1_dbase.mol2 : 12\npartition_7_hits_1_query.mol2 : 12\nTotal : 172\n\n\n\nStep 7 -- Matching Functional Groups\n\n\nNow that we have generated the multi-mol2 file pairs of the pair-wise overlays ('*_query.mol2', and '*_dbase.mol2') in \"\nStep 6 -- Sorting Molecular Overlays\n,\" we can proceed with the tabulation of functional group matches.\n\n\n\n\n\n\n \u26a0\n**Note about file suffixes.**\n\nIf you created molecular overlays using a different protocol than the one described in this tutorial please make sure that the file layout and the naming convention match the ones described in \"Step 6 -- Sorting Molecular Overlays.\" In particular, it is important that the database molecule MOL2 files have the following file endings:\n\n- _dbase.mol2 / _dbase.mol2.gz \n\nand the query molecules should end in \n\n- _query.mol2 / _query.mol2.gz \n\nEverything in front of the underscore character can be arbitrary but must also be consistent between \"query\" and \"dbase\" pairs, as shown in \"Step 6 -- Sorting Molecular Overlays\" and in the file listing below:\n\n\n\n\n\n\n\n! ls -1 tutorial-results/06_rocs_overlays_sorted/\n\n\n\n\npartition_1_hits_1_dbase.mol2\npartition_1_hits_1_query.mol2\npartition_2_hits_1_dbase.mol2\npartition_2_hits_1_query.mol2\npartition_3_hits_1_dbase.mol2\npartition_3_hits_1_query.mol2\npartition_4_hits_1_dbase.mol2\npartition_4_hits_1_query.mol2\npartition_5_hits_1_dbase.mol2\npartition_5_hits_1_query.mol2\npartition_6_hits_1_dbase.mol2\npartition_6_hits_1_query.mol2\npartition_7_hits_1_dbase.mol2\npartition_7_hits_1_query.mol2\n\n\n\nFor the functional group matching, we recommend using a threshold of 1.3 angstroms or less, since 1.5 angstrom constitutes the typical length of an atomic bond.\n\n\n! python tools/funcgroup_matching.py \\\n  --input tutorial-results/06_rocs_overlays_sorted \\\n  --output tutorial-results/07_funcgroup_matching \\\n  --max_distance 1.3 \\\n  --processes 0\n\n\n\n\nProcessing partition_1_hits_1_dbase.mol2/partition_1_hits_1_query.mol2 | scanned 12 molecules | 21 mol/sec\nProcessing partition_2_hits_1_dbase.mol2/partition_2_hits_1_query.mol2 | scanned 14 molecules | 21 mol/sec\nProcessing partition_3_hits_1_dbase.mol2/partition_3_hits_1_query.mol2 | scanned 11 molecules | 20 mol/sec\nProcessing partition_4_hits_1_dbase.mol2/partition_4_hits_1_query.mol2 | scanned 13 molecules | 23 mol/sec\nProcessing partition_5_hits_1_dbase.mol2/partition_5_hits_1_query.mol2 | scanned 11 molecules | 20 mol/sec\nProcessing partition_6_hits_1_dbase.mol2/partition_6_hits_1_query.mol2 | scanned 19 molecules | 22 mol/sec\nProcessing partition_7_hits_1_dbase.mol2/partition_7_hits_1_query.mol2 | scanned 13 molecules | 23 mol/sec\n\n\n\nThe functional group matching results are collected in tabular form as regular text (.tsv) files with tab-separated columns. \n\n\n! ls -1 tutorial-results/07_funcgroup_matching\n\n\n\n\npartition_1_hits_1_atomtype.tsv\npartition_1_hits_1_charge.tsv\npartition_2_hits_1_atomtype.tsv\npartition_2_hits_1_charge.tsv\npartition_3_hits_1_atomtype.tsv\npartition_3_hits_1_charge.tsv\npartition_4_hits_1_atomtype.tsv\npartition_4_hits_1_charge.tsv\npartition_5_hits_1_atomtype.tsv\npartition_5_hits_1_charge.tsv\npartition_6_hits_1_atomtype.tsv\npartition_6_hits_1_charge.tsv\npartition_7_hits_1_atomtype.tsv\npartition_7_hits_1_charge.tsv\n\n\n\nAs we can see from the file listing above, the functional group matching tool generated two tables for each partition. For instance, the functional group matching tables that correspond to partition_1 are\n\n\n\n\npartition_1_hits_1_atomtype.tsv\n\n\npartition_1_hits_1_charge.tsv\n\n\n\n\nBelow is an example of how a subsection of partition_1_hits_1_atomtype.tsv would look like if we would open it in a spreadsheet viewer (for example, LibreOffice Calc) for illustration:\n\n\n\n\nNote that the table screenshot above only shows the first six columns of the file. \n\n\n\n\nThe first column, dbase, refers to the database molecule's name\n\n\nThe second column lists the corresponding reference molecule.\n\n\nThe column headers after the second column correspond to the atom names of the reference (or query) molecule.\n\n\n\n\nFor instance, the first cell below the column header C1, which contains the entry \"O.2\" (shown in the annotated screenshot below):\n\n\n\n\nLists the MOL2 atom type of the atom in the database molecule ZINC90224566_8 that overlays (or \"matches\") with the C1 atom in 3KPZS_22. Similarly, we can see that no atom in ZINC90224566_8 matches the C2 atom of 3KPZS_22, and an S.o2 atom matches the C3 atom of 3KPZS_22. \n\n\nTo illustrate how to read this table more visually, we can open the corresponding MOL2 files for partition_1 in PyMOL:\n\n\n\n\nShown below is a screenshot of a PyMOL session showing the 3D structure overlay of ZINC90224566_8 and 3KPZS_22. The red arrows highlight the three columns that were discussed in the previous paragraph (ZINC90224566_8 is shown in green and 3KPZS_22 is shown in cyan):\n\n\n\n\nIn addition to the atom type matching table, the functional group matching tool also outputs a second table for each partition analyzed. The format of this second table is identical to the atom type matching table except that its cells contain the partial charge information of the matching atom:\n\n\n\n\nNote that the cells containing \"nan\" (which stands for \"not a number\") correspond to the empty cells in the atom type matching table we saw previously. Or in other words, \"nan\" cells indicate that no atom in the database molecule is matching a particular atom in the query molecule.\n\n\nIn the next step, \"Step 8 -- Selecting Functional Group Matches,\" we will select database molecules of interest by specific functional group matching patterns or criteria.\n\n\nStep 8 -- Selecting Functional Group Matches\n\n\nIn this section, we are going to use the functional group matching tables we created in \"\nStep 7 -- Matching Functional Groups\n\". \n\n\n\n\nThe \nfuncgroup_matching_selection.py\n tool operates on the functional group matching tables that we created in the previous section, \"Step 7 -- Matching Functional Groups.\" To select molecules of interest, we can define two selection strings:\n\n\n\n\n--atomtype_selection\n, which operates on the MOL2 atom types stored in the *_atomtype.tsv files  \n\n\n--charge_selection\n, which operates on the partial charges stored in the *_charge.tsv files\n\n\n\n\nThe selection strings work similar to the selection strings that were explained in Filtering \"\nStep 2 -- Presence and Absence of Functional Groups\n.\" In the following example, we are going to select those molecules that\n\n\n\n\nHave a sp3 sulfur match with the S1 atom in the reference molecule; the matched atom has to be positively charged\n\n\nAn sp2 oxygen match with the O2 atom in the reference molecule; the matched atom has to have a charge\n\n\n\n\nFor reference, these atoms or functional groups are highlighted in the 3kPZS reference molecule shown in the screenshot below:\n\n\n\n\nUsing the selection criteria discussed above, that is, selecting molecules that match the 3-keto and the sulfate-group sulfur in 3kPZS, we use \ntools/funcgroup_matching_selection.py\n as shown below:\n\n\n! python tools/funcgroup_matching_selection.py \\\n  --input tutorial-results/07_funcgroup_matching \\\n  --output tutorial-results/08_funcgroup_selection \\\n  --atomtype_selection \"((S1 == 'S.3') | (S1 == 'S.o2')) --> (O2 == 'O.2')\" \\\n  --charge_selection \"((S1 >= 1.0)) --> (O2 <= -0.5)\"\n\n\n\n\nProcessing partition_1_hits_1_atomtype.tsv/partition_1_hits_1_charge.tsv | scanned 11 molecules | 140 mol/sec\nProcessing partition_2_hits_1_atomtype.tsv/partition_2_hits_1_charge.tsv | scanned 13 molecules | 407 mol/sec\nProcessing partition_3_hits_1_atomtype.tsv/partition_3_hits_1_charge.tsv | scanned 10 molecules | 354 mol/sec\nProcessing partition_4_hits_1_atomtype.tsv/partition_4_hits_1_charge.tsv | scanned 12 molecules | 379 mol/sec\nProcessing partition_5_hits_1_atomtype.tsv/partition_5_hits_1_charge.tsv | scanned 10 molecules | 361 mol/sec\nProcessing partition_6_hits_1_atomtype.tsv/partition_6_hits_1_charge.tsv | scanned 18 molecules | 577 mol/sec\nProcessing partition_7_hits_1_atomtype.tsv/partition_7_hits_1_charge.tsv | scanned 12 molecules | 411 mol/sec\n\n\n\nThe output of this command will generate new *_atomtype.tsv and *_charge.tsv tables that only contain the matching molecules. However, it is often useful to collect the corresponding structures in MOL2 files, in sorted order, for inspection. To generate those MOL2 files, that contain the structures corresponding to the output tables, we can provide the overlays from \"Step 6 -- Sorting Molecular Overlays\" (06_rocs_overlays_sorted) as an argument to the \n--input_mol2\n parameters:\n\n\n! python tools/funcgroup_matching_selection.py \\\n  --input tutorial-results/07_funcgroup_matching \\\n  --input_mol2 tutorial-results/06_rocs_overlays_sorted \\\n  --output tutorial-results/08_funcgroup_selection \\\n  --atomtype_selection \"((S1 == 'S.3') | (S1 == 'S.o2')) --> (O2 == 'O.2')\" \\\n  --charge_selection \"((S1 >= 1.0)) --> (O2 <= -0.5)\"\n\n\n\n\nProcessing partition_1_hits_1_atomtype.tsv/partition_1_hits_1_charge.tsv | scanned 11 molecules | 96 mol/sec\nProcessing partition_2_hits_1_atomtype.tsv/partition_2_hits_1_charge.tsv | scanned 13 molecules | 333 mol/sec\nProcessing partition_3_hits_1_atomtype.tsv/partition_3_hits_1_charge.tsv | scanned 10 molecules | 228 mol/sec\nProcessing partition_4_hits_1_atomtype.tsv/partition_4_hits_1_charge.tsv | scanned 12 molecules | 234 mol/sec\nProcessing partition_5_hits_1_atomtype.tsv/partition_5_hits_1_charge.tsv | scanned 10 molecules | 253 mol/sec\nProcessing partition_6_hits_1_atomtype.tsv/partition_6_hits_1_charge.tsv | scanned 18 molecules | 457 mol/sec\nProcessing partition_7_hits_1_atomtype.tsv/partition_7_hits_1_charge.tsv | scanned 12 molecules | 275 mol/sec\n\n\n\nNow, let's have a look at one of the overlayed database molecule-reference molecule pairs from the functional group match selection:\n\n\n\n\nFor illustration, the numbers 0.6 and 0.9 correspond to the distance between the matched oxygen and sulfur atoms, respectively:\n\n\n\n\nConclusion\n\n\nWhile this tutorial provides a brief hands-on explanation of the different tools within screenlamp, and how to use them in concert, a real-world application would typically include millions of small molecules instead of the very small subset that we used in this tutorial. Also, the hypothesis-based selection (for instance, that matching the 3-keto and sulfate-sulfur in 3kPZS) is highly project-specific. To read more about this hypothesis-based selection approach, beyond this purely technical tutorial, please see our research publication \n'Raschka, Sebastian, Anne M. Scott, Nan Liu, Santosh Gunturu, Mar Huertas, Weiming Li, and Leslie A. Kuhn (2017). \"Enabling the hypothesis-driven prioritization of small molecules in large databases: Screenlamp and its application to GPCR inhibitor discovery\"'\n\n\nWhere to Go Next: Using and Building Pipelines for Automation\n\n\nNow that this tutorial introduced you to the individual tools within screenlamp, it is straightforward to build pipelines that execute the individual steps automatically. For instance, a pipeline that automates the 8 steps we worked through in this tutorial is provided as \ntools/pipelines/pipeline-example-1.py\n.\n\n\nEssentially, this pipeline provides a more convenient way to interact with screenlamp in the way it was described in this tutorial:\n\n\n\n\nSelect molecules based on database properties.\n\n\nSelect molecules by the presence of particular functional groups.\n\n\nSelect molecules by the distance between certain functional groups.\n\n\nGenerate multiple favorable-energy conformers of each selected molecule.\n\n\nOverlay the conformers of the reference and database molecules\n\n\nPost process (sort) the overlay results and select molecules using similarity thresholds\n\n\nGenerate functional group matching tables\n\n\nSelect molecules based on functional group matching patterns\n\n\n\n\n(You may use this pipeline as a template and modify it if you like to add additional steps or like to remove certain steps).\n\n\nBy default, this pipeline uses the selection parameters used in this tutorial via the corresponding configuration file (\ntools/pipelines/pipeline-example-1-config.yaml\n). Since the reference molecule in your own project is likely a different one than the one we used in this tutorial, the configuration file offers a user-friendly way to tailor the analysis to your needs. \n\n\nFor more information about this pipeline, please also see the more detailed \n\"Tutorial on Using a Pre-constructed Screenlamp Pipeline\"\n.",
            "title": "Toolkit Tutorial"
        },
        {
            "location": "/user_guide/tools-tutorial-1/index.html#screenlamp-toolkit-tutorial",
            "text": "This tutorial explains how the individual screenlamp tools (located in the  screenlamp/tools  subdirectory) work in the context of a small virtual screening example.   The workflow we are going to use is similar to the  Pipeline Tutorial , which uses a pre-constructed, automated virtual pipeline based using the tools explained in this tutorial. While the  Pipeline Tutorial  provides a high-level overview and a more convenient, pre-constructed pipeline, this tool aims to explain the building blocks behind it so that users can understand and learn how to construct their own pipelines and/or modify the existing pipeline presented in the  Pipeline Tutorial .  To explain the main steps in a typical filtering pipeline using screenlamp, this tutorial will work through the following individual steps performed by the pipeline in the  Pipeline Tutorial  incrementally:   (A higher-resolution PDF version of this flowchart is available  here .)",
            "title": "Screenlamp Toolkit Tutorial"
        },
        {
            "location": "/user_guide/tools-tutorial-1/index.html#obtaining-and-preparing-the-dataset",
            "text": "",
            "title": "Obtaining and Preparing the Dataset"
        },
        {
            "location": "/user_guide/tools-tutorial-1/index.html#mol2-input-files",
            "text": "The tools presented in this tutorial are compatible with MOL2 files of arbitrary size. However, to minimize the computation time for illustration throughout this tutorial, we are only going to use a small subset of molecules.  A typical use case for these would be the screening of all ~18,000,000  Drug-Like  molecules from  ZINC , which is available in MOL2 format on ZINC  here . Please note that screenlamp supports both Tripos MOL2 ( *.mol2 ) files and gzipped Tripos MOL2 files ( *.mol2.gz ) out of the box. Thus, if your input dataset is in gzipped format, you can use it right away without having to make any adjustments or decompressing it. However, please note that the decompressing and compressing operations that are performed when working with gzipped files have an additional toll on computational performance.  With kind permission from John Irwin and the ZINC team, we are using a random subset of 70,000 small molecules that we prepared for this tutorial. This subset from ZINC is split into 7 multi-MOL2 file with 10,000 molecules each:  partition_mol2_1.mol2  to  partition_mol2_7.mol2 .   For this tutorial, please download the dataset by clicking the following link and unzip it on your machine that you are using for the virtual screening run:  https://sebastianraschka.com/datasets/screenlamp/pipeline-tutorial_1/partition_1-7.zip",
            "title": "MOL2 Input Files"
        },
        {
            "location": "/user_guide/tools-tutorial-1/index.html#datatable-for-prefiltering",
            "text": "For this particular tutorial, you'll also need a data table containing general information about these molecules. Although the partitions you downloaded above are only a small, modified subset of the  ZINC  drug-like molecules, we could use the full ~18,000,000 molecule Drug-like table available for download at  http://zinc.docking.org/subsets/drug-like . To download the tab-separated table, click the  Properties  link on the  ZINC Drug-like  page.   However, Please note that the size of the data table is about ~1.8 Gb, and thus, the download may take a while depending on your internet connection. Alternatively, we recommend using a smaller data table containing only ~170,000 molecules; to download this table, please use the following link:  https://sebastianraschka.com/datasets/screenlamp/pipeline-tutorial_1/small_table_p1-7.txt",
            "title": "Datatable for Prefiltering"
        },
        {
            "location": "/user_guide/tools-tutorial-1/index.html#query-molecule",
            "text": "The third data file you'll need for ligand-based virtual screening is the query molecule. For this tutorial, please download the following multi-conformer MOL2 file:  https://sebastianraschka.com/datasets/screenlamp/pipeline-tutorial_1/3kpzs_query.mol2   Important Note  All code in this tutorial is executed using a Python 3.6 interpreter. The code has not been tested in Python 2.7.",
            "title": "Query Molecule"
        },
        {
            "location": "/user_guide/tools-tutorial-1/index.html#data-storage-and-project-layout",
            "text": "After downloading the files described in the previous subsection, create a new directory called  tk-tutorial_data  to store these files. Before you continue with the tutorial, please make sure that the  tk-tutorial_data  directory contains the following files and adheres to the following directory structure:   Next, we are going to create a new directory,  tutorial-results , to store the results we are going to generate in this tutorial:  ! mkdir tutorial-results   \u26a0 Throughout this tutorial, the '!' command denotes a new command line terminal prompt (for example, bash shell).   \u26a0 This tutorial assumes that the screenlamp tools are available from a directory called 'tools', but you can store the screenlamp tools in any directory you like as long as you replace 'tools' with the correct path to this directory.  Before we start exploring the tools contained in screenlamp's  tools  folder, let's start with a simple script that we are going to use throughout this tutorial to count the number of structures in a mol2 file or directory containing mol2 files.  Using the  count_mol2.py  script, we can now count the number of structures in each mol2 file in our input directory like so:  ! python tools/count_mol2.py -i tk-tutorial_data/partition_1-7/  partition_1.mol2 : 10000\npartition_2.mol2 : 10000\npartition_3.mol2 : 10000\npartition_4.mol2 : 10000\npartition_5.mol2 : 10000\npartition_6.mol2 : 10000\npartition_7.mol2 : 10000\nTotal : 70000  As we can see, each of the 7 partitions in our dataset contains 10,000 molecules; we will be working with 70,000 structures in total.",
            "title": "Data Storage and Project Layout"
        },
        {
            "location": "/user_guide/tools-tutorial-1/index.html#general-blacklist-whitelist-filtering",
            "text": "This section provides a brief introduction to the general concept of how the filtering of structures is performed within screenlamp. The general workflow consists of two step   Creating an \"ID file\" (more about this later)  Use the \"ID file\" to select the corresponding 3D-structures from MOL2 files   Furthermore, there are 2 kinds of filtering procedures. Via whitelist-filtering, we select all molecules that are  listed in  the ID file. Vice versa, blacklist-filtering is used to select all molecules that are  not listed in  the ID file.",
            "title": "General Blacklist &amp; Whitelist Filtering"
        },
        {
            "location": "/user_guide/tools-tutorial-1/index.html#generating-id-files-from-molecules",
            "text": "First, we are going to generate an ID file of all structures in the mol2 files of the 7 partitions.    \u26a0 \nIn the context of this tutorial, an \"ID file\" is a plaintext file that contains the molecule identifiers fetched from the mol2 files.  We can create such an ID file using the  mol2_to_id.py  screenlamp script as shown below:  ! python tools/mol2_to_id.py \\\n  --input tk-tutorial_data/partition_1-7/ \\\n  --output tutorial-results/all-mol2ids.txt  Processing partition_1.mol2 | scanned 10000 molecules | 9992 mol/sec\nProcessing partition_2.mol2 | scanned 10000 molecules | 13691 mol/sec\nProcessing partition_3.mol2 | scanned 10000 molecules | 17576 mol/sec\nProcessing partition_4.mol2 | scanned 10000 molecules | 15460 mol/sec\nProcessing partition_5.mol2 | scanned 10000 molecules | 13929 mol/sec\nProcessing partition_6.mol2 | scanned 10000 molecules | 14212 mol/sec\nProcessing partition_7.mol2 | scanned 10000 molecules | 14279 mol/sec\nFinished  To check that the creation of the ID file was successful and to see how it looks like, we will use the Unix/Linux  head  command line tool to display the first 10 rows of the newly created ID file:  ! head tutorial-results/all-mol2ids.txt  ZINC57271411\nZINC50764925\nZINC65255333\nZINC06394508\nZINC65292537\nZINC65375610\nZINC31820077\nZINC65395084\nZINC00205726\nZINC01458151  To illustrate the concept of whitelist and blacklist filtering in the following sections, let us now create a small ID list file, we name it  5-mol2ids.txt , that contains 5 IDs only, using the  echo  command in a Unix/Linux terminal:  ! echo \"\\\nZINC65255333\\n\\\nZINC06394508\\n\\\nZINC65292537\\n\\\nZINC65375610\\n\\\nZINC31820077\" > tutorial-results/5-mol2ids.txt  The execution of the preceeding command will create a text file that looks as follows:",
            "title": "Generating ID Files from Molecules"
        },
        {
            "location": "/user_guide/tools-tutorial-1/index.html#whitelist-filtering",
            "text": "Now, using the script  id_to_mol2.py , we can filter a directory of mol2 files for molecules that are listed in an ID file using the  --whitefilter True  option. Executing the following command will look for the structures corresponding to the five molecule IDs included in the  5-mol2ids.txt  that we created in the previous section, and write the corresponding structure files to a new directory that we will call  whitelist_example :  ! python tools/id_to_mol2.py \\\n  --input tk-tutorial_data/partition_1-7/ \\\n  --output tutorial-results/whitelist-example \\\n  --id_file tutorial-results/5-mol2ids.txt \\\n  --whitelist True  Processing partition_1.mol2 | scanned 10000 molecules | 15319 mol/sec\nProcessing partition_2.mol2 | scanned 10000 molecules | 14400 mol/sec\nProcessing partition_3.mol2 | scanned 10000 molecules | 14980 mol/sec\nProcessing partition_4.mol2 | scanned 10000 molecules | 14893 mol/sec\nProcessing partition_5.mol2 | scanned 10000 molecules | 14170 mol/sec\nProcessing partition_6.mol2 | scanned 10000 molecules | 12873 mol/sec\nProcessing partition_7.mol2 | scanned 10000 molecules | 12457 mol/sec\nFinished  The output directory,  tutorial-results/whitelist-example , should now contain only mol2 structures that are labeled with IDs contained in the  5-mol2ids.txt  text file.  Please note that  id_to_mol2.py  creates a new file for each mol2 file it scanned; however, the creation of such a file does not imply that structures were found for this particular partition via whitelist filtering and could remain empty. For example, the five structure IDs in the  5-mol2ids.txt  all refer to structures from  partition_1  as we can check by running the already familiar  count_mol2.py  script:  ! python tools/count_mol2.py \\\n  --input tutorial-results/whitelist-example  partition_1.mol2 : 5\npartition_2.mol2 : 0\npartition_3.mol2 : 0\npartition_4.mol2 : 0\npartition_5.mol2 : 0\npartition_6.mol2 : 0\npartition_7.mol2 : 0\nTotal : 5",
            "title": "Whitelist Filtering"
        },
        {
            "location": "/user_guide/tools-tutorial-1/index.html#blacklist-filtering",
            "text": "Similar to the whitelisting example in the previous section, we can use a ID file for blacklist filtering. Blacklist filtering means that all molecules that are  not  listed in an ID file will be selected. In order to perform blacklist filtering, we use the setting  --whitelist False  as shown below:  ! python tools/id_to_mol2.py \\\n  --input tk-tutorial_data/partition_1-7/ \\\n  --output tutorial-results/blacklist-example \\\n  --id_file tutorial-results/5-mol2ids.txt \\\n  --whitelist False  Processing partition_1.mol2 | scanned 10000 molecules | 12772 mol/sec\nProcessing partition_2.mol2 | scanned 10000 molecules | 8715 mol/sec\nProcessing partition_3.mol2 | scanned 10000 molecules | 9105 mol/sec\nProcessing partition_4.mol2 | scanned 10000 molecules | 13333 mol/sec\nProcessing partition_5.mol2 | scanned 10000 molecules | 9869 mol/sec\nProcessing partition_6.mol2 | scanned 10000 molecules | 12444 mol/sec\nProcessing partition_7.mol2 | scanned 10000 molecules | 12276 mol/sec\nFinished  This time, we expect 69995 structures to be obtained after the filtering, since we scanned 70,000 molecules and had 5 molecules on our ID blacklist:  ! python tools/count_mol2.py \\\n  --input tutorial-results/blacklist-example  partition_1.mol2 : 9995\npartition_2.mol2 : 10000\npartition_3.mol2 : 10000\npartition_4.mol2 : 10000\npartition_5.mol2 : 10000\npartition_6.mol2 : 10000\npartition_7.mol2 : 10000\nTotal : 69995",
            "title": "Blacklist Filtering"
        },
        {
            "location": "/user_guide/tools-tutorial-1/index.html#step-1-filtering-via-features-from-data-tables",
            "text": "In this section, we will apply the first filtering step, which constitutes step 1 in the pipeline overview:   Filtering via screenlamp is typically done in 2 steps:   Step 1: Create an ID file containing the names of the molecules of interest.  Step 2: Obtain the structures of molecules of interest, using the ID file, from MOL2 files.   In this filtering step, we are going to create an ID file of molecules of interest from a pre-existing data table, for instance, the \"properties\" files available on  ZINC . For this example, we are going to use the  small_table_p1-7.txt  subset that we downloaded earlier (see  \"Obtaining and Preparing the Dataset\" ), since the whole data table of drug like molecules is ~2 Gb in size, and thus it may take a long time to download it on machines with a low-bandwidth internet connection. However, in case you have already downloaded the drug-like properties file (3_prop.xls) from ZINC, please feel free to use it instead.    \u26a0 Note that while 3_prop.xls has a file ending that is typical for Microsoft Excel, it is not an Excel file but a plain text file with tab-separated columns.  To get a brief impression of the file contents, we use the  head  tool to display the first ten entries:  ! head tk-tutorial_data/small_table_p1-7.txt  ZINC_ID MWT LogP    Desolv_apolar   Desolv_polar    HBD HBA tPSA    Charge  NRB SMILES\nZINC00000010    217.2   1.42    5.57    -41.98  0   4   66  -1  2   C[C@@]1(C(=O)C=C(O1)C(=O)[O-])c2ccccc2\nZINC00000012    289.356 1.28    4.89    -24.55  2   4   66  0   5   c1ccc(cc1)C(c2ccccc2)[S@](=O)CC(=O)NO\nZINC00000017    281.337 1.33    3.06    -23.33  2   6   87  0   4   CCC[S@](=O)c1ccc2c(c1)[nH]/c(=N\\C(=O)OC)/[nH]2\nZINC00000017    281.337 1.33    3.07    -19.2   2   6   87  0   4   CCC[S@](=O)c1ccc2c(c1)[nH]/c(=N/C(=O)OC)/[nH]2\nZINC00000018    212.31799999999998  2.0 5.87    -8.2    1   3   32  0   4   CC(C)C[C@@H]1C(=O)N(C(=S)N1)CC=C\nZINC00000021    288.411 3.85    4.02    -40.52  1   3   30  1   6   CCC(=O)O[C@]1(CC[NH+](C[C@@H]1CC=C)C)c2ccccc2\nZINC00000022    218.27599999999998  3.21    0.47    -48.57  1   3   52  -1  5   C[C@@H](c1ccc(cc1)NCC(=C)C)C(=O)[O-]\nZINC00000025    251.35299999999998  3.6 2.4 -41.56  2   2   40  1   5   C[C@H](Cc1ccccc1)[NH2+][C@@H](C#N)c2ccccc2\nZINC00000030    297.422 2.94    0.89    -37.97  3   3   47  1   6   C[C@@H](CC(c1ccccc1)(c2ccccc2)C(=O)N)[NH+](C)C  Since it can sometimes be hard to read tab-separated tables as regular text output, the screenshot below shows the same table excerpt opened in a spreadsheet program such as LibreOffice Calc or Microsoft Excel:   Using the  datatable_to_id.py  script, we can select only those molecule IDs (here: stored in the ZINC_ID column) that match certain criteria, which we can flexibly define based on the column data in this table. For example, we can select only those molecules that have at most 7 rotatable bonds and have a molecular weight of at least 200 g/mol using the selection string  \"(NRB <= 7) & (MWT >= 200)\"  as follows:  ! python tools/datatable_to_id.py \\\n  --input tk-tutorial_data/small_table_p1-7.txt \\\n  --output tutorial-results/01_selected_mol2s.txt \\\n  --id_column \"ZINC_ID\" \\\n  --selection \"(NRB <= 7) & (MWT >= 200)\"  Using columns: ['ZINC_ID', 'NRB', 'MWT']\nUsing selection: (chunk.NRB <= 7) & (chunk.MWT >= 200)\nProcessed 169984 rows | 351943 rows/sec\nSelected: 162622  The selection syntax is quite simple: Parentheses must surround each criterion, and multiple criteria can be chained together using the logical AND symbol  '&' . For example, to add a third criterion to the selection string to exclude larger molecules that are heavier than 400 g/mol, the selection string becomes  \"(NRB <= 7) & (MWT >= 200) & (MWT <= 400)\" .  The following relational operators are supported in the selection string:   !=  : not equal to  ==  : equal to  <   : less than  >   : greater than  >=  : equal to or greater than  <=  : equal to or greater than   If you encounter issues with individual selection strings, please check that the specified column is indeed present in the table you provided. Also, the  datatable_to_id.py  tool assumes that the input table is tab-separated. If you have tables that use a different delimiter to separate columns, please specify the column separator using the  --separator  parameter. For example, if our input table was a CSV file, we would pass the following, additional argument to the  tools/datatable_to_id.py  function:  --separator \",\" .  Below are some additional examples of correct and incorrect selection strings that can help you with debugging the selection strings if you should encounter problems:   Correct:  \"(MWT >= 200) & (NRB <= 7)\"  Wrong:  \"( MWT >= 200) & ( NRB <= 7)\"  [spacing between parentheses and column names]  Wrong:  \"MWT >= 200 & NRB <= 7\"  [expressions seperated by logical '&' operator not enclosed in parentheses]  Wrong:  \"(mwt >= 200) & (nrb <= 7)\"  [column names don't match the columns in the data table file]  Wrong:  \"(mwt>=200) & (nrb<=7)\"  [no whitespace before and after operators for comparison]   As mentioned at the beginning of this section, filtering consists of two steps:   Creating an ID file of molecule names  Selecting molecules from MOL2 files using the ID file from step 1   We already completed step 1, and now, we are going the ID file we just created to create MOL2 files that only contain the molecules of interest (i.e., molecules with a maximum number of 7 rotatable bonds and a molecular weight of at least 200 g/mol2). Consequently, we use the ID file  tutorial-results/01_selected_mol2s.txt  to select the molecules of interest from out MOL2 database at  tk-tutorial_data/partition_1-7/  as follows:  ! python tools/id_to_mol2.py \\\n  --input tk-tutorial_data/partition_1-7/ \\\n  --output tutorial-results/01_selected_mol2s/ \\\n  --id_file tutorial-results/01_selected_mol2s.txt \\\n  --whitelist True  Processing partition_1.mol2 | scanned 10000 molecules | 12021 mol/sec\nProcessing partition_2.mol2 | scanned 10000 molecules | 9435 mol/sec\nProcessing partition_3.mol2 | scanned 10000 molecules | 7823 mol/sec\nProcessing partition_4.mol2 | scanned 10000 molecules | 10801 mol/sec\nProcessing partition_5.mol2 | scanned 10000 molecules | 8901 mol/sec\nProcessing partition_6.mol2 | scanned 10000 molecules | 8661 mol/sec\nProcessing partition_7.mol2 | scanned 10000 molecules | 8167 mol/sec\nFinished  ! python tools/count_mol2.py \\\n  --input tutorial-results/01_selected_mol2s/  partition_1.mol2 : 8628\npartition_2.mol2 : 8501\npartition_3.mol2 : 8537\npartition_4.mol2 : 8476\npartition_5.mol2 : 8535\npartition_6.mol2 : 8518\npartition_7.mol2 : 8555\nTotal : 59750  As we can see from the output of  count_mol2.py , we now have a slightly smaller database consisting of 59750 molecules -- we started with 70,000 structures to which we applied the selection criteria  \"(NRB <= 7) & (MWT >= 200)\" .",
            "title": "Step 1 -- Filtering via Features from Data Tables"
        },
        {
            "location": "/user_guide/tools-tutorial-1/index.html#filtering-step-2-presence-and-absence-of-functional-groups",
            "text": "In this second filtering step, we will select molecules that contain certain types of atoms and functional groups.   In the simple example presented in this section, we will consider molecules that contain at least one sp3 sulfur atom (as it can be found in sulfate groups) and at least one sp2 oxygen atom (keto group).   When we filter by atom type, we can use the following MOL2 labels to specify filtering criteria:   atom_id  atom_name  atom_type  subst_id  subst_name  charge   Note that the most useful specifiers are  atom_type  and  charge  in the context of selecting atoms and functional groups of interest. The  atom_type  specifier is used to refer to the atom types in MOL2 structures (for example, O.2, O.3, H, S.2, and so forth). The  charge  specifier refers to the partial charge column in MOL2 files.  Before we discuss the selection string syntax in more detail, let us execute an example where we select only those molecules that contain at least one sp3 sulfur atom (as it can be found in sulfate groups) and at least one sp2 oxygen atom (keto-group):  ! python tools/funcgroup_presence_to_id.py \\\n  --input tutorial-results/01_selected_mol2s/ \\\n  --output tutorial-results/02_fgroup_presence_mol2s.txt \\\n  --selection \"((atom_type == 'S.3') | (atom_type == 'S.o2')) --> (atom_type == 'O.2')\" \\\n  --processes 0  Using selection: [\"((pdmol.df.atom_type == 'S.3') | (pdmol.df.atom_type == 'S.o2'))\", \"(pdmol.df.atom_type == 'O.2')\"]\nProcessing partition_1.mol2 | 276 mol/sec\nProcessing partition_2.mol2 | 270 mol/sec\nProcessing partition_3.mol2 | 278 mol/sec\nProcessing partition_4.mol2 | 270 mol/sec\nProcessing partition_5.mol2 | 267 mol/sec\nProcessing partition_6.mol2 | 280 mol/sec\nProcessing partition_7.mol2 | 253 mol/sec\nFinished  Note that we used all available processes on our machine by setting  --processes 0 , to speed up the computation. Alternatively, if you don't want to utilize all available CPUs, you can specify the number of CPUs to use manually, for example, by setting  --processes 1  to only use 1 CPU.  To better understand how the selection string \"((atom_type == 'S.3') | (atom_type == 'S.o2')) --> (atom_type == 'O.2')\" works, let us break it down into 2 parts:   \"((atom_type == 'S.3') | (atom_type == 'S.o2'))\"  \"--> (atom_type == 'O.2')\"   In the first part, we use the logical OR operator '|' to select molecules that either contain an 'S.3' atom OR an 'S.o2' atom. Then, after this criterion has been applied to select the specified subset of molecules, the next criterion will be used, which is the criterion followed by the '-->' string. In this case, the remaining molecules will be checked for the presence of an 'O.2' atom.    \u26a0 In this context, you can think of the '-->' string as a \"THEN\" conditional statement. E.g., \"select via filter ((atom_type == 'S.3') | (atom_type == 'S.o2')) THEN select via filter (atom_type == 'O.2')\"   Note that you can string an arbitrary number of criteria using the '-->' operator. For example, if we additionally require molecules to contain a fluor atom, we can modify the selection string as follows (the modification is highlighted in bold font):  \"((atom_type == 'S.3') | (atom_type == 'S.o2')) --> (atom_type == 'O.2')  --> (atom_type == 'F') \"  Lastly, we can also incorporate partial charge information. For instance, if we want to specify a partial charge range for the O.2 atom type, we could do it as follows, using the logical \"&\" operator:  \"((atom_type == 'S.3') | (atom_type == 'S.o2')) --> ((atom_type == 'O.2')  & (charge <= -0.3) & (charge >= -0.9)) \"  Please note that it doesn't make sense to use the logical AND operator (&) on the same column. For example, the selection string \"((atom_type == 'S.3') | (atom_type == 'S.o2'))\" means that a molecule must contain an atom that is either of type S.3 OR S.o2. However, the selection string \"((atom_type == 'S.3') & (atom_type == 'S.o2'))\" would mean that a molecule must contain an atom that has the type S.3 AND S.o2 at the same time, which is impossible, because an atom can only have 1 type at the same time (in the MOL2 file format).   Below, you can find a short list of Dos and Don'ts regarding the selection syntax :  a) Don't use the AND operator (&) on the same column within a selection: \"((atom_type == 'S.3') | (atom_type == 'S.o2')) & (atom_type == 'O.2')\"   This selects molecules with an S.3 or S.o2 atom that is also an O.2 atom at the same time. This is impossible!   b) Use the AND operator on different columns within a slection: \"((atom_type == 'S.3') | (atom_type == 'S.o2')) & (charge < 0.0)\"   This selects molecules with an S.3 or S.o2 atom that also has a negative charge.   c) Filter for multiple atoms by chaining criteria via the  -->  string: \"((atom_type == 'S.3') | (atom_type == 'S.o2')) --> (atom_type == 'O.2')\"   This selects molecules with an S.3 or S.o2 atom. Then, based on those molecules, it selects only those molecules that also contain an O.2 atom.    As you remember from the \" Step 1 -- Filtering via Features from Data Tables \" section, filtering in screenlamp consists of two stages:   Creating an ID file of molecule names  Selecting molecules from MOL2 files using the ID file from step 1   We have already completed step 1 so that we can use the ID file we created to select the MOL2 structures from the MOL2 directory as follows:  ! python tools/id_to_mol2.py \\\n  --input tutorial-results/01_selected_mol2s/ \\\n  --output tutorial-results/02_fgroup_presence_mol2s \\\n  --id_file tutorial-results/02_fgroup_presence_mol2s.txt \\\n  --whitelist True  Processing partition_1.mol2 | scanned 8628 molecules | 13872 mol/sec\nProcessing partition_2.mol2 | scanned 8501 molecules | 12075 mol/sec\nProcessing partition_3.mol2 | scanned 8537 molecules | 9794 mol/sec\nProcessing partition_4.mol2 | scanned 8476 molecules | 12817 mol/sec\nProcessing partition_5.mol2 | scanned 8535 molecules | 15391 mol/sec\nProcessing partition_6.mol2 | scanned 8518 molecules | 12703 mol/sec\nProcessing partition_7.mol2 | scanned 8555 molecules | 11566 mol/sec\nFinished  ! python tools/count_mol2.py \\\n--input tutorial-results/02_fgroup_presence_mol2s  partition_1.mol2 : 2140\npartition_2.mol2 : 2118\npartition_3.mol2 : 2064\npartition_4.mol2 : 2107\npartition_5.mol2 : 2068\npartition_6.mol2 : 2189\npartition_7.mol2 : 2186\nTotal : 14872  As we can see, we only have 14,872 by applying the atom- and functional group based selection criteria. To summarize the steps so far, in \"Filtering Step 1\" we selected 59,750 (molecules that have fewer than 7 rotatable bonds and are heavier than 200 g/mol) out of 70,000 molecules. Then, in this section (\"Filtering Step 2\"), we selected 14,872 out of those 59,750, molecules that have at least 1 keto and 1 sp3 sulfur atom.",
            "title": "Filtering Step 2 -- Presence and Absence of Functional Groups"
        },
        {
            "location": "/user_guide/tools-tutorial-1/index.html#step-3-filtering-by-distance-between-functional-groups",
            "text": "In this third step, we will now select only those molecules that have a sp3 sulfur atom and a keto-group within a 13-20 angstrom distance.    \u26a0 Technically, we could have skipped the section \"Filtering Step 2\" and directly proceeded with the distance-based atom selection described in this section. However, note that distance calculations are computationally more expensive than merely checking for the presence of certain atoms and functional groups. Thus, but separating those two tasks, we can filter out molecules that don't contain a keto and a sp3 sulfur atoms first.  The selection string syntax is analogous to the  --selection  parameter described in the \"Filtering Step 2\" --  please revisit this section if you need a refresher. However, it shall be noted that the distance selection only works for a pair of atoms. For example, the following string  \"((atom_type == 'S.3') | (atom_type == 'S.o2')) --> (atom_type == 'O.2')\"  checks the distance between an atom A, which is either an S.3 or an S.o2 atom, and an atom B, which is an O.2 atom. If you want to compute the distance between multiple atoms, for example, the distance of atom A to atoms B and C, you need to repeat the distance selection multiple times. For example, you would perform the distance selection between A and B first, and then, in a second iteration, you would perform the distance selection on the results of the first selection, to select molecules based on the distance between atom A and C.  Now, let us execute the first step of a filtering step in screenlamp and create an ID file of molecules that have an sp3 sulfur and an O.2 atom within a 13-20 angstrom distance.   ! python tools/funcgroup_distance_to_id.py \\\n  --input tutorial-results/02_fgroup_presence_mol2s \\\n  --output tutorial-results/03_fgroup_distance_mol2s.txt \\\n  --selection \"((atom_type == 'S.3') | (atom_type == 'S.o2')) --> (atom_type == 'O.2')\" \\\n  --distance \"13-20\" \\\n  --processes 0  Using selection: [\"((pdmol.df.atom_type == 'S.3') | (pdmol.df.atom_type == 'S.o2'))\", \"(pdmol.df.atom_type == 'O.2')\"]\nProcessing partition_1.mol2 | 196 mol/sec\nProcessing partition_2.mol2 | 235 mol/sec\nProcessing partition_3.mol2 | 244 mol/sec\nProcessing partition_4.mol2 | 228 mol/sec\nProcessing partition_5.mol2 | 226 mol/sec\nProcessing partition_6.mol2 | 228 mol/sec\nProcessing partition_7.mol2 | 220 mol/sec\nFinished  Following the already familiar procedure, we can now select the MOL2 structures using the generated ID file:  ! python tools/id_to_mol2.py \\\n  --input tutorial-results/02_fgroup_presence_mol2s \\\n  --output tutorial-results/03_fgroup_distance_mol2s \\\n  --id_file tutorial-results/03_fgroup_distance_mol2s.txt \\\n  --whitelist True  Processing partition_1.mol2 | scanned 2140 molecules | 18214 mol/sec\nProcessing partition_2.mol2 | scanned 2118 molecules | 16030 mol/sec\nProcessing partition_3.mol2 | scanned 2064 molecules | 12371 mol/sec\nProcessing partition_4.mol2 | scanned 2107 molecules | 14275 mol/sec\nProcessing partition_5.mol2 | scanned 2068 molecules | 14494 mol/sec\nProcessing partition_6.mol2 | scanned 2189 molecules | 12596 mol/sec\nProcessing partition_7.mol2 | scanned 2186 molecules | 14133 mol/sec\nFinished  ! python tools/count_mol2.py \\\n  --input tutorial-results/03_fgroup_distance_mol2s  partition_1.mol2 : 16\npartition_2.mol2 : 16\npartition_3.mol2 : 13\npartition_4.mol2 : 15\npartition_5.mol2 : 12\npartition_6.mol2 : 20\npartition_7.mol2 : 15\nTotal : 107  After applying this distance-based filtering step, we can see that only 107 molecules out of the 14,872 from \" Filtering Step 2 -- Presence and Absence of Functional Groups \" remain.",
            "title": "Step 3 -- Filtering by Distance between Functional Groups"
        },
        {
            "location": "/user_guide/tools-tutorial-1/index.html#step-4-generating-conformers",
            "text": "In this section, we are going to generate low-energy conformers of the molecules we have selected so far. In the next section, we are going to use these favorable-energy conformations and overlay them with a query molecule.   Generating low-energy conformers of either database or reference molecule is highly recommended to account for the flexibility of molecules (for instance, rotatable bonds) when overlaying molecules (in the next step, \"Step 5 -- Overlaying Reference and Database molecules\"). However, note that working with low-energy conformers increases the computational cost involved in computing the optimal overlays. For example, assuming that we have 10,000 database molecules and one reference molecule, generating 200 low-energy conformers of each of those database molecules would result in a database of 10,000x200 = 2,000,000 molecules. Consequently, we will have to sample 2,000,000x1 overlays (200 overlays per database molecule) instead of 10,000 overlays to obtain the best-overlaying pairs. To take it a step further, we could also consider multiple conformers of the reference molecule. For example, if we create 200 conformers of the one reference molecule as well, we will have to overlay 2000,000x200 = 40,000,000 pairs. To summarize, the three different options as input for overlaying the reference molecule with the database molecule are given below, in increasing order of computational cost, which is proportional to the thoroughness of the sampling procedure:  1) Overlay a single conformer for both database and the reference molecule\n2) Overlay a single reference molecule conformer with multiple database molecule conformers\n3) Overlay multiple reference molecule conformers with multiple database molecule conformers  In this tutorial, we will use option 3), where we create up to 200 conformers of each database molecule using OpenEye Omega and overlay them with an existing multi-conformer reference molecule that is already provided with the tutorial files ( 3kpzs_query.mol2 , which contains 35 favorable-energy conformers of the reference molecule 3kPZS).  Again, please note the creating multiple conformers of a molecule is optional. The program we are going to use is OpenEye Omega, but you may use alternative tools as well, as long as they can output those conformer structures in MOL2 file format.    \u26a0 Please also note that the conformers of a given molecule (database or reference molecule) files should have the same molecule ID in the MOL2 files to parse the output of \"[Step 5 -- Overlaying Reference and Database molecules](#Step-5----Overlaying-Reference-and-Database-molecules)\" without additional workarounds. For example, if you have a multi-conformer MOL2 file such as 3kpzs_query.mol2, make sure that the molecule IDs in the MOL2 file are all \"3kPZS\" and don't have any suffixes or prefixes such as \"3kPZS_1, 3KPZS_2, ...\". The reason why we want to avoid prefixes and suffixes in those conformer names is that the overlay tool OpenEye ROCS identifies conformers by their structure, not their names, and such molecule IDs would only result in annoying name mangling, which makes the results harder to parse downstream in the analysis pipeline.    \u26a0  Optionally, [\"Step 3 -- Filtering by Distance between Functional Groups\"](Step-3----Filtering-by-Distance-between-Functional-Groups) can also be repeated on the output of this step, the low-energy conformers, to sort out conformers where functional groups are in a spatial arrangement that may not be consistent with prior knowledge -- for example, experimental insights that a molecule interacts via certain groups in a particular way with its binding partner.  While you can use OpenEye Omega directly from the command line as described in the documentation at https://www.eyesopen.com/omega, screenlamp provides a wrapper tool that generates multiconformer files of all mol2 files in a given directory using its default settings, which can be used as shown below (note that you need to provide an  --executable  path pointing to the Omega program on your machine:  ! python tools/run_omega.py \\\n  --input tutorial-results/03_fgroup_distance_mol2s \\\n  --output tutorial-results/04_omega_confomers/ \\\n  --executable \"/Applications/OMEGA 2.5.1.4.app/Contents/MacOS/omega2-2.5.1.4\" \\\n  --processes 0  Processing tutorial-results/03_fgroup_distance_mol2s/partition_1.mol2\nSlave started on host Sebastians-MacBook-Pro\nSlave started on host Sebastians-MacBook-Pro\nSlave started on host Sebastians-MacBook-Pro\n\n          :jGf:             .d8888b. 88d8b.d8b. .d8888b. .d8888b. .d8888b.\n        :jGDDDDf:           88'  `88 88'`88'`88 88ooood8 88'  `88 88'  `88\n      ,fDDDGjLDDDf,         88.  .88 88  88  88 88.  ... 88.  .88 88.  .88\n    ,fDDLt:   :iLDDL;       `88888P' dP  dP  dP `88888P' `8888P88 `88888P8\n  ;fDLt:         :tfDG;                                       .88\n,jft:   ,ijfffji,   :iff                                  d8888P\n     .jGDDDDDDDDDGt.      \n    ;GDDGt:''':tDDDG,          Copyright (c) 2004-2013\n   .DDDG:       :GDDG.         OpenEye Scientific Software, Inc.\n   ;DDDj         tDDDi    \n   ,DDDf         fDDD,         Version: 2.5.1.4\n    LDDDt.     .fDDDj          Built:   20130515\n    .tDDDDfjtjfDDDGt           OEChem version: 1.9.1\n      :ifGDDDDDGfi.            Platform: osx-10.8-clang++4-x64\n          .:::.                \n  ......................       \n  DDDDDDDDDDDDDDDDDDDDDD       \n  DDDDDDDDDDDDDDDDDDDDDD\n\nSupported run modes:\n  Single processor\n  MPI Multiprocessor\n\n  Licensed for the exclusive use of The Laboratory of Leslie Kuhn.\n  Licensed for use only in Michigan State University.\n  License expires on October 20, 2017.\n\n\nTo cite OMEGA please use the following:\n  OMEGA 2.5.1.4: OpenEye Scientific Software, Santa Fe, NM.\n  http://www.eyesopen.com.\n\n  Hawkins, P.C.D.; Skillman, A.G.; Warren, G.L.; Ellingson, B.A.; Stahl, M.T.\n  Conformer Generation with OMEGA: Algorithm and Validation Using High\n  Quality Structures from the Protein Databank and the Cambridge \n  Structural Database. J. Chem. Inf. Model. 2010, 50, 572-584.\n\nRunning as MPI Master\n...ce_mol2s/partition_1.mol2|****************************************|100.00%\nProcessing tutorial-results/03_fgroup_distance_mol2s/partition_2.mol2\nSlave started on host Sebastians-MacBook-Pro\nSlave started on host Sebastians-MacBook-Pro\n\n          :jGf:             .d8888b. 88d8b.d8b. .d8888b. .d8888b. .d8888b.\n        :jGDDDDf:           88'  `88 88'`88'`88 88ooood8 88'  `88 88'  `88\n      ,fDDDGjLDDDf,         88.  .88 88  88  88 88.  ... 88.  .88 88.  .88\n    ,fDDLt:   :iLDDL;       `88888P' dP  dP  dP `88888P' `8888P88 `88888P8\n  ;fDLt:         :tfDG;                                       .88\n,jft:   ,ijfffji,   :iff                                  d8888P\n     .jGDDDDDDDDDGt.      \n    ;GDDGt:''':tDDDG,          Copyright (c) 2004-2013\n   .DDDG:       :GDDG.         OpenEye Scientific Software, Inc.\n   ;DDDj         tDDDi    \n   ,DDDf         fDDD,         Version: 2.5.1.4\n    LDDDt.     .fDDDj          Built:   20130515\n    .tDDDDfjtjfDDDGt           OEChem version: 1.9.1\n      :ifGDDDDDGfi.            Platform: osx-10.8-clang++4-x64\n          .:::.                \n  ......................       \n  DDDDDDDDDDDDDDDDDDDDDD       \n  DDDDDDDDDDDDDDDDDDDDDD\n\nSupported run modes:\n  Single processor\n  MPI Multiprocessor\n\n  Licensed for the exclusive use of The Laboratory of Leslie Kuhn.\n  Licensed for use only in Michigan State University.\n  License expires on October 20, 2017.\n\n\nTo cite OMEGA please use the following:\n  OMEGA 2.5.1.4: OpenEye Scientific Software, Santa Fe, NM.\n  http://www.eyesopen.com.\n\n  Hawkins, P.C.D.; Skillman, A.G.; Warren, G.L.; Ellingson, B.A.; Stahl, M.T.\n  Conformer Generation with OMEGA: Algorithm and Validation Using High\n  Quality Structures from the Protein Databank and the Cambridge \n  Structural Database. J. Chem. Inf. Model. 2010, 50, 572-584.\n\nRunning as MPI Master\nSlave started on host Sebastians-MacBook-Pro\n...ce_mol2s/partition_2.mol2|****************************************|100.00%\nProcessing tutorial-results/03_fgroup_distance_mol2s/partition_3.mol2\nSlave started on host Sebastians-MacBook-Pro\nSlave started on host Sebastians-MacBook-Pro\nSlave started on host Sebastians-MacBook-Pro\n\n          :jGf:             .d8888b. 88d8b.d8b. .d8888b. .d8888b. .d8888b.\n        :jGDDDDf:           88'  `88 88'`88'`88 88ooood8 88'  `88 88'  `88\n      ,fDDDGjLDDDf,         88.  .88 88  88  88 88.  ... 88.  .88 88.  .88\n    ,fDDLt:   :iLDDL;       `88888P' dP  dP  dP `88888P' `8888P88 `88888P8\n  ;fDLt:         :tfDG;                                       .88\n,jft:   ,ijfffji,   :iff                                  d8888P\n     .jGDDDDDDDDDGt.      \n    ;GDDGt:''':tDDDG,          Copyright (c) 2004-2013\n   .DDDG:       :GDDG.         OpenEye Scientific Software, Inc.\n   ;DDDj         tDDDi    \n   ,DDDf         fDDD,         Version: 2.5.1.4\n    LDDDt.     .fDDDj          Built:   20130515\n    .tDDDDfjtjfDDDGt           OEChem version: 1.9.1\n      :ifGDDDDDGfi.            Platform: osx-10.8-clang++4-x64\n          .:::.                \n  ......................       \n  DDDDDDDDDDDDDDDDDDDDDD       \n  DDDDDDDDDDDDDDDDDDDDDD\n\nSupported run modes:\n  Single processor\n  MPI Multiprocessor\n\n  Licensed for the exclusive use of The Laboratory of Leslie Kuhn.\n  Licensed for use only in Michigan State University.\n  License expires on October 20, 2017.\n\n\nTo cite OMEGA please use the following:\n  OMEGA 2.5.1.4: OpenEye Scientific Software, Santa Fe, NM.\n  http://www.eyesopen.com.\n\n  Hawkins, P.C.D.; Skillman, A.G.; Warren, G.L.; Ellingson, B.A.; Stahl, M.T.\n  Conformer Generation with OMEGA: Algorithm and Validation Using High\n  Quality Structures from the Protein Databank and the Cambridge \n  Structural Database. J. Chem. Inf. Model. 2010, 50, 572-584.\n\nRunning as MPI Master\n...ce_mol2s/partition_3.mol2|****************************************|100.00%\nProcessing tutorial-results/03_fgroup_distance_mol2s/partition_4.mol2\nSlave started on host Sebastians-MacBook-Pro\nSlave started on host Sebastians-MacBook-Pro\nSlave started on host Sebastians-MacBook-Pro\n\n          :jGf:             .d8888b. 88d8b.d8b. .d8888b. .d8888b. .d8888b.\n        :jGDDDDf:           88'  `88 88'`88'`88 88ooood8 88'  `88 88'  `88\n      ,fDDDGjLDDDf,         88.  .88 88  88  88 88.  ... 88.  .88 88.  .88\n    ,fDDLt:   :iLDDL;       `88888P' dP  dP  dP `88888P' `8888P88 `88888P8\n  ;fDLt:         :tfDG;                                       .88\n,jft:   ,ijfffji,   :iff                                  d8888P\n     .jGDDDDDDDDDGt.      \n    ;GDDGt:''':tDDDG,          Copyright (c) 2004-2013\n   .DDDG:       :GDDG.         OpenEye Scientific Software, Inc.\n   ;DDDj         tDDDi    \n   ,DDDf         fDDD,         Version: 2.5.1.4\n    LDDDt.     .fDDDj          Built:   20130515\n    .tDDDDfjtjfDDDGt           OEChem version: 1.9.1\n      :ifGDDDDDGfi.            Platform: osx-10.8-clang++4-x64\n          .:::.                \n  ......................       \n  DDDDDDDDDDDDDDDDDDDDDD       \n  DDDDDDDDDDDDDDDDDDDDDD\n\nSupported run modes:\n  Single processor\n  MPI Multiprocessor\n\n  Licensed for the exclusive use of The Laboratory of Leslie Kuhn.\n  Licensed for use only in Michigan State University.\n  License expires on October 20, 2017.\n\n\nTo cite OMEGA please use the following:\n  OMEGA 2.5.1.4: OpenEye Scientific Software, Santa Fe, NM.\n  http://www.eyesopen.com.\n\n  Hawkins, P.C.D.; Skillman, A.G.; Warren, G.L.; Ellingson, B.A.; Stahl, M.T.\n  Conformer Generation with OMEGA: Algorithm and Validation Using High\n  Quality Structures from the Protein Databank and the Cambridge \n  Structural Database. J. Chem. Inf. Model. 2010, 50, 572-584.\n\nRunning as MPI Master\n...ce_mol2s/partition_4.mol2|****************************************|100.00%\nProcessing tutorial-results/03_fgroup_distance_mol2s/partition_5.mol2\nSlave started on host Sebastians-MacBook-Pro\nSlave started on host Sebastians-MacBook-Pro\nSlave started on host Sebastians-MacBook-Pro\n\n          :jGf:             .d8888b. 88d8b.d8b. .d8888b. .d8888b. .d8888b.\n        :jGDDDDf:           88'  `88 88'`88'`88 88ooood8 88'  `88 88'  `88\n      ,fDDDGjLDDDf,         88.  .88 88  88  88 88.  ... 88.  .88 88.  .88\n    ,fDDLt:   :iLDDL;       `88888P' dP  dP  dP `88888P' `8888P88 `88888P8\n  ;fDLt:         :tfDG;                                       .88\n,jft:   ,ijfffji,   :iff                                  d8888P\n     .jGDDDDDDDDDGt.      \n    ;GDDGt:''':tDDDG,          Copyright (c) 2004-2013\n   .DDDG:       :GDDG.         OpenEye Scientific Software, Inc.\n   ;DDDj         tDDDi    \n   ,DDDf         fDDD,         Version: 2.5.1.4\n    LDDDt.     .fDDDj          Built:   20130515\n    .tDDDDfjtjfDDDGt           OEChem version: 1.9.1\n      :ifGDDDDDGfi.            Platform: osx-10.8-clang++4-x64\n          .:::.                \n  ......................       \n  DDDDDDDDDDDDDDDDDDDDDD       \n  DDDDDDDDDDDDDDDDDDDDDD\n\nSupported run modes:\n  Single processor\n  MPI Multiprocessor\n\n  Licensed for the exclusive use of The Laboratory of Leslie Kuhn.\n  Licensed for use only in Michigan State University.\n  License expires on October 20, 2017.\n\n\nTo cite OMEGA please use the following:\n  OMEGA 2.5.1.4: OpenEye Scientific Software, Santa Fe, NM.\n  http://www.eyesopen.com.\n\n  Hawkins, P.C.D.; Skillman, A.G.; Warren, G.L.; Ellingson, B.A.; Stahl, M.T.\n  Conformer Generation with OMEGA: Algorithm and Validation Using High\n  Quality Structures from the Protein Databank and the Cambridge \n  Structural Database. J. Chem. Inf. Model. 2010, 50, 572-584.\n\nRunning as MPI Master\n...ce_mol2s/partition_5.mol2|****************************************|100.00%\nProcessing tutorial-results/03_fgroup_distance_mol2s/partition_6.mol2\nSlave started on host Sebastians-MacBook-Pro\nSlave started on host Sebastians-MacBook-Pro\nSlave started on host Sebastians-MacBook-Pro\n\n          :jGf:             .d8888b. 88d8b.d8b. .d8888b. .d8888b. .d8888b.\n        :jGDDDDf:           88'  `88 88'`88'`88 88ooood8 88'  `88 88'  `88\n      ,fDDDGjLDDDf,         88.  .88 88  88  88 88.  ... 88.  .88 88.  .88\n    ,fDDLt:   :iLDDL;       `88888P' dP  dP  dP `88888P' `8888P88 `88888P8\n  ;fDLt:         :tfDG;                                       .88\n,jft:   ,ijfffji,   :iff                                  d8888P\n     .jGDDDDDDDDDGt.      \n    ;GDDGt:''':tDDDG,          Copyright (c) 2004-2013\n   .DDDG:       :GDDG.         OpenEye Scientific Software, Inc.\n   ;DDDj         tDDDi    \n   ,DDDf         fDDD,         Version: 2.5.1.4\n    LDDDt.     .fDDDj          Built:   20130515\n    .tDDDDfjtjfDDDGt           OEChem version: 1.9.1\n      :ifGDDDDDGfi.            Platform: osx-10.8-clang++4-x64\n          .:::.                \n  ......................       \n  DDDDDDDDDDDDDDDDDDDDDD       \n  DDDDDDDDDDDDDDDDDDDDDD\n\nSupported run modes:\n  Single processor\n  MPI Multiprocessor\n\n  Licensed for the exclusive use of The Laboratory of Leslie Kuhn.\n  Licensed for use only in Michigan State University.\n  License expires on October 20, 2017.\n\n\nTo cite OMEGA please use the following:\n  OMEGA 2.5.1.4: OpenEye Scientific Software, Santa Fe, NM.\n  http://www.eyesopen.com.\n\n  Hawkins, P.C.D.; Skillman, A.G.; Warren, G.L.; Ellingson, B.A.; Stahl, M.T.\n  Conformer Generation with OMEGA: Algorithm and Validation Using High\n  Quality Structures from the Protein Databank and the Cambridge \n  Structural Database. J. Chem. Inf. Model. 2010, 50, 572-584.\n\nRunning as MPI Master\n...ce_mol2s/partition_6.mol2|****************************************|100.00%\nProcessing tutorial-results/03_fgroup_distance_mol2s/partition_7.mol2\nSlave started on host Sebastians-MacBook-Pro\nSlave started on host Sebastians-MacBook-Pro\nSlave started on host Sebastians-MacBook-Pro\n\n          :jGf:             .d8888b. 88d8b.d8b. .d8888b. .d8888b. .d8888b.\n        :jGDDDDf:           88'  `88 88'`88'`88 88ooood8 88'  `88 88'  `88\n      ,fDDDGjLDDDf,         88.  .88 88  88  88 88.  ... 88.  .88 88.  .88\n    ,fDDLt:   :iLDDL;       `88888P' dP  dP  dP `88888P' `8888P88 `88888P8\n  ;fDLt:         :tfDG;                                       .88\n,jft:   ,ijfffji,   :iff                                  d8888P\n     .jGDDDDDDDDDGt.      \n    ;GDDGt:''':tDDDG,          Copyright (c) 2004-2013\n   .DDDG:       :GDDG.         OpenEye Scientific Software, Inc.\n   ;DDDj         tDDDi    \n   ,DDDf         fDDD,         Version: 2.5.1.4\n    LDDDt.     .fDDDj          Built:   20130515\n    .tDDDDfjtjfDDDGt           OEChem version: 1.9.1\n      :ifGDDDDDGfi.            Platform: osx-10.8-clang++4-x64\n          .:::.                \n  ......................       \n  DDDDDDDDDDDDDDDDDDDDDD       \n  DDDDDDDDDDDDDDDDDDDDDD\n\nSupported run modes:\n  Single processor\n  MPI Multiprocessor\n\n  Licensed for the exclusive use of The Laboratory of Leslie Kuhn.\n  Licensed for use only in Michigan State University.\n  License expires on October 20, 2017.\n\n\nTo cite OMEGA please use the following:\n  OMEGA 2.5.1.4: OpenEye Scientific Software, Santa Fe, NM.\n  http://www.eyesopen.com.\n\n  Hawkins, P.C.D.; Skillman, A.G.; Warren, G.L.; Ellingson, B.A.; Stahl, M.T.\n  Conformer Generation with OMEGA: Algorithm and Validation Using High\n  Quality Structures from the Protein Databank and the Cambridge \n  Structural Database. J. Chem. Inf. Model. 2010, 50, 572-584.\n\nRunning as MPI Master\n...ce_mol2s/partition_7.mol2|****************************************|100.00%  By default, Omega samples up to 50,000 conformer structures and keeps up to 200 conformers with favorable energy per molecule. Additional arguments can be provided using  --settings  flag of  run_omega.py . For example, to increase the maximum number of conformers to keep from 200 to 500, you can provide the following argument:  \"--settings -maxconfs 500 \\\" .  Now that we created the conformers of the database molecules, let us count the number of structures that we would consider for the pair-wise overlays in the next step:  ! python tools/count_mol2.py \\\n  --input tutorial-results/04_omega_confomers/  partition_1.mol2 : 2940\npartition_2.mol2 : 2768\npartition_3.mol2 : 2263\npartition_4.mol2 : 2550\npartition_5.mol2 : 2394\npartition_6.mol2 : 3433\npartition_7.mol2 : 2693\nTotal : 19041  As we can see, we now have 19,041 structures to consider, which means Omega created ~200 low-energy (favorable) conformers of the 107 single-conformer input structures in  03_fgroup_distance_mol2s .",
            "title": "Step 4 -- Generating Conformers"
        },
        {
            "location": "/user_guide/tools-tutorial-1/index.html#step-5-overlaying-reference-and-database-molecules",
            "text": "In this section we are going to overlay the database conformers we generated in  tutorial-results/04_omega_confomers/  that we generated in the previous step (\" Step 4 -- Generating Conformers \") with 35 conformers of the reference molecule (called 3kPZS), which are provided in the tutorial dataset as  3kpzs_query.mol2 .    \u26a0 Note that if you are working with your own reference molecule, conformers can be generated similar to generating database molecules as described in section \"[Step 4 -- Generating Conformers](Step-4----Generating-Conformers)\".   Screenlamp provides a wrapper tool  run_rocs.py  that wraps OpenEye ROCS for generating molecular overlays. For more information about ROCS, please see https://www.eyesopen.com/rocs. The  run_rocs.py  wrapper uses ROCS's default settings plus additional settings provided as arguments to the  --settings  parameter of  run_rocs.py . For more information about the ROCS settings, please refer to the official documentation at https://www.eyesopen.com/rocs. The settings we are going to use will overlay each query conformer with each database conformer, and it will only keep the best overlay for each multi-conformer per. For instance, if we have 200 conformers of a database molecule A and 200 conformers of a reference molecule B, only the single best overlay out of the 200x200 overlays will be kept.  ! python tools/run_rocs.py \\\n  --input tutorial-results/04_omega_confomers/ \\\n  --output tutorial-results/05_rocs_overlays/ \\\n  --query tk-tutorial_data/3kpzs_query.mol2 \\\n  --executable \"/Applications/ROCS 3.2.1.4.app/Contents/MacOS/rocs-3.2.1.4\" \\\n  --settings \"-rankby TanimotoCombo -maxhits 0 -besthits 0 -progress percent\" \\\n  --processes 0  Processing partition_1.mol2\n          :jGf:               \n        :jGDDDDf:             \n      ,fDDDGjLDDDf,           'a8  ,a'8b   a''8b    a''8b  a8f'8\n    ,fDDLt:   :iLDDL;          88 a/  88  d'   8b  d'  88  88'  \n  ;fDLt:         :tfDG;        88P    8f d8    88 d8       '88aa\n,jft:   ,ijfffji,   :iff       8P        88    8P 88      a  '888\n     .jGDDDDDDDDDGt.           8i        88   d8  Y8   ,d 8    8P\n    ;GDDGt:''':tDDDG,          a8/        `88aa'    '8aa'  'baa8'\n   .DDDG:       :GDDG.    \n   ;DDDj         tDDDi    \n   ,DDDf         fDDD,         Copyright (C) 1997-2015\n    LDDDt.     .fDDDj          OpenEye Scientific Software, Inc.\n    .tDDDDfjtjfDDDGt      \n      :ifGDDDDDGfi.            Version: 3.2.1.4\n          .:::.                Built:   20150831\n  ......................       OEChem version: 2.0.4\n  DDDDDDDDDDDDDDDDDDDDDD       Platform: osx-10.10-clang++6-x64\n  DDDDDDDDDDDDDDDDDDDDDD\n\nSupported run modes:\n  Single processor\n  MPI Multiprocessor\n\n  Licensed for the exclusive use of The Laboratory of Leslie Kuhn.\n  Licensed for use only in Michigan State University.\n  License expires on October 20, 2017.\n\n\nTo cite ROCS please use the following:\n  ROCS 3.2.1.4: OpenEye Scientific Software, Santa Fe, NM.\n  http://www.eyesopen.com.\n\n  Hawkins, P.C.D.; Skillman, A.G.; Nicholls, A. Comparison of Shape-Matching\n  and Docking as Virtual Screening Tools. J. Med. Chem., 2007, 50, 74.\n\nSlave started on host Sebastians-MacBook-Pro\nSlave started on host Sebastians-MacBook-Pro\nSlave started on host Sebastians-MacBook-Pro\nRunning as MPI Master\n  database file: tutorial-results/04_omega_confomers/partition_1.mol2\n\nQuery being read from:          tk-tutorial_data/3kpzs_query.mol2\nFile prefix is:                 tutorial-results/05_rocs_overlays/partition_1\nOutput directory:               /Users/sebastian/code/screenlamp/docs/sources/user_guide\nLog file will be written to:    tutorial-results/05_rocs_overlays/partition_1.log\nStatistics will be written to:  tutorial-results/05_rocs_overlays/partition_1_1.rpt\nHit structures will written to: tutorial-results/05_rocs_overlays/partition_1_hits_1.mol2\nStatus file will be written to: tutorial-results/05_rocs_overlays/partition_1_1.status\n\nQuery(#1): 3KPZS has 35 conformer(s)\nDatabase 1 of 1:                tutorial-results/04_omega_confomers/partition_1.mol2\n...onfomers/partition_1.mol2|****************************************|100.00%\n\n16 molecules in 41 seconds -> 0.4 molecules/sec\n                              2510 overlays/sec\n\n16 hits found\n=================================================\n\nMolecule read failures: 0\n#warnings             : 0\n#errors               : 0\n#queries processed    : 1\nProcessing partition_2.mol2\nSlave started on host Sebastians-MacBook-Pro\nSlave started on host Sebastians-MacBook-Pro\n          :jGf:               \n        :jGDDDDf:             \n      ,fDDDGjLDDDf,           'a8  ,a'8b   a''8b    a''8b  a8f'8\n    ,fDDLt:   :iLDDL;          88 a/  88  d'   8b  d'  88  88'  \n  ;fDLt:         :tfDG;        88P    8f d8    88 d8       '88aa\n,jft:   ,ijfffji,   :iff       8P        88    8P 88      a  '888\n     .jGDDDDDDDDDGt.           8i        88   d8  Y8   ,d 8    8P\n    ;GDDGt:''':tDDDG,          a8/        `88aa'    '8aa'  'baa8'\n   .DDDG:       :GDDG.    \n   ;DDDj         tDDDi    \n   ,DDDf         fDDD,         Copyright (C) 1997-2015\n    LDDDt.     .fDDDj          OpenEye Scientific Software, Inc.\n    .tDDDDfjtjfDDDGt      \n      :ifGDDDDDGfi.            Version: 3.2.1.4\n          .:::.                Built:   20150831\n  ......................       OEChem version: 2.0.4\n  DDDDDDDDDDDDDDDDDDDDDD       Platform: osx-10.10-clang++6-x64\n  DDDDDDDDDDDDDDDDDDDDDD\n\nSupported run modes:\n  Single processor\n  MPI Multiprocessor\n\n  Licensed for the exclusive use of The Laboratory of Leslie Kuhn.\n  Licensed for use only in Michigan State University.\n  License expires on October 20, 2017.\n\n\nTo cite ROCS please use the following:\n  ROCS 3.2.1.4: OpenEye Scientific Software, Santa Fe, NM.\n  http://www.eyesopen.com.\n\n  Hawkins, P.C.D.; Skillman, A.G.; Nicholls, A. Comparison of Shape-Matching\n  and Docking as Virtual Screening Tools. J. Med. Chem., 2007, 50, 74.\n\nSlave started on host Sebastians-MacBook-Pro\nRunning as MPI Master\n  database file: tutorial-results/04_omega_confomers/partition_2.mol2\n\nQuery being read from:          tk-tutorial_data/3kpzs_query.mol2\nFile prefix is:                 tutorial-results/05_rocs_overlays/partition_2\nOutput directory:               /Users/sebastian/code/screenlamp/docs/sources/user_guide\nLog file will be written to:    tutorial-results/05_rocs_overlays/partition_2.log\nStatistics will be written to:  tutorial-results/05_rocs_overlays/partition_2_1.rpt\nHit structures will written to: tutorial-results/05_rocs_overlays/partition_2_hits_1.mol2\nStatus file will be written to: tutorial-results/05_rocs_overlays/partition_2_1.status\n\nQuery(#1): 3KPZS has 35 conformer(s)\nDatabase 1 of 1:                tutorial-results/04_omega_confomers/partition_2.mol2\n...onfomers/partition_2.mol2|****************************************|100.00%\n\n16 molecules in 47 seconds -> 0.3 molecules/sec\n                              2061 overlays/sec\n\n16 hits found\n=================================================\n\nMolecule read failures: 0\n#warnings             : 0\n#errors               : 0\n#queries processed    : 1\nProcessing partition_3.mol2\nSlave started on host Sebastians-MacBook-Pro\nSlave started on host Sebastians-MacBook-Pro\nSlave started on host Sebastians-MacBook-Pro\n          :jGf:               \n        :jGDDDDf:             \n      ,fDDDGjLDDDf,           'a8  ,a'8b   a''8b    a''8b  a8f'8\n    ,fDDLt:   :iLDDL;          88 a/  88  d'   8b  d'  88  88'  \n  ;fDLt:         :tfDG;        88P    8f d8    88 d8       '88aa\n,jft:   ,ijfffji,   :iff       8P        88    8P 88      a  '888\n     .jGDDDDDDDDDGt.           8i        88   d8  Y8   ,d 8    8P\n    ;GDDGt:''':tDDDG,          a8/        `88aa'    '8aa'  'baa8'\n   .DDDG:       :GDDG.    \n   ;DDDj         tDDDi    \n   ,DDDf         fDDD,         Copyright (C) 1997-2015\n    LDDDt.     .fDDDj          OpenEye Scientific Software, Inc.\n    .tDDDDfjtjfDDDGt      \n      :ifGDDDDDGfi.            Version: 3.2.1.4\n          .:::.                Built:   20150831\n  ......................       OEChem version: 2.0.4\n  DDDDDDDDDDDDDDDDDDDDDD       Platform: osx-10.10-clang++6-x64\n  DDDDDDDDDDDDDDDDDDDDDD\n\nSupported run modes:\n  Single processor\n  MPI Multiprocessor\n\n  Licensed for the exclusive use of The Laboratory of Leslie Kuhn.\n  Licensed for use only in Michigan State University.\n  License expires on October 20, 2017.\n\n\nTo cite ROCS please use the following:\n  ROCS 3.2.1.4: OpenEye Scientific Software, Santa Fe, NM.\n  http://www.eyesopen.com.\n\n  Hawkins, P.C.D.; Skillman, A.G.; Nicholls, A. Comparison of Shape-Matching\n  and Docking as Virtual Screening Tools. J. Med. Chem., 2007, 50, 74.\n\nRunning as MPI Master\n  database file: tutorial-results/04_omega_confomers/partition_3.mol2\n\nQuery being read from:          tk-tutorial_data/3kpzs_query.mol2\nFile prefix is:                 tutorial-results/05_rocs_overlays/partition_3\nOutput directory:               /Users/sebastian/code/screenlamp/docs/sources/user_guide\nLog file will be written to:    tutorial-results/05_rocs_overlays/partition_3.log\nStatistics will be written to:  tutorial-results/05_rocs_overlays/partition_3_1.rpt\nHit structures will written to: tutorial-results/05_rocs_overlays/partition_3_hits_1.mol2\nStatus file will be written to: tutorial-results/05_rocs_overlays/partition_3_1.status\n\nQuery(#1): 3KPZS has 35 conformer(s)\nDatabase 1 of 1:                tutorial-results/04_omega_confomers/partition_3.mol2\n...onfomers/partition_3.mol2|****************************************|100.00%\n\n13 molecules in 30 seconds -> 0.4 molecules/sec\n                              2640 overlays/sec\n\n13 hits found\n=================================================\n\nMolecule read failures: 0\n#warnings             : 0\n#errors               : 0\n#queries processed    : 1\nProcessing partition_4.mol2\nSlave started on host Sebastians-MacBook-Pro\nSlave started on host Sebastians-MacBook-Pro\n          :jGf:               \n        :jGDDDDf:             \n      ,fDDDGjLDDDf,           'a8  ,a'8b   a''8b    a''8b  a8f'8\n    ,fDDLt:   :iLDDL;          88 a/  88  d'   8b  d'  88  88'  \n  ;fDLt:         :tfDG;        88P    8f d8    88 d8       '88aa\n,jft:   ,ijfffji,   :iff       8P        88    8P 88      a  '888\n     .jGDDDDDDDDDGt.           8i        88   d8  Y8   ,d 8    8P\n    ;GDDGt:''':tDDDG,          a8/        `88aa'    '8aa'  'baa8'\n   .DDDG:       :GDDG.    \n   ;DDDj         tDDDi    \n   ,DDDf         fDDD,         Copyright (C) 1997-2015\n    LDDDt.     .fDDDj          OpenEye Scientific Software, Inc.\n    .tDDDDfjtjfDDDGt      \n      :ifGDDDDDGfi.            Version: 3.2.1.4\n          .:::.                Built:   20150831\n  ......................       OEChem version: 2.0.4\n  DDDDDDDDDDDDDDDDDDDDDD       Platform: osx-10.10-clang++6-x64\n  DDDDDDDDDDDDDDDDDDDDDD\n\nSupported run modes:\n  Single processor\n  MPI Multiprocessor\n\n  Licensed for the exclusive use of The Laboratory of Leslie Kuhn.\n  Licensed for use only in Michigan State University.\n  License expires on October 20, 2017.\n\n\nTo cite ROCS please use the following:\n  ROCS 3.2.1.4: OpenEye Scientific Software, Santa Fe, NM.\n  http://www.eyesopen.com.\n\n  Hawkins, P.C.D.; Skillman, A.G.; Nicholls, A. Comparison of Shape-Matching\n  and Docking as Virtual Screening Tools. J. Med. Chem., 2007, 50, 74.\n\nSlave started on host Sebastians-MacBook-Pro\nRunning as MPI Master\n  database file: tutorial-results/04_omega_confomers/partition_4.mol2\n\nQuery being read from:          tk-tutorial_data/3kpzs_query.mol2\nFile prefix is:                 tutorial-results/05_rocs_overlays/partition_4\nOutput directory:               /Users/sebastian/code/screenlamp/docs/sources/user_guide\nLog file will be written to:    tutorial-results/05_rocs_overlays/partition_4.log\nStatistics will be written to:  tutorial-results/05_rocs_overlays/partition_4_1.rpt\nHit structures will written to: tutorial-results/05_rocs_overlays/partition_4_hits_1.mol2\nStatus file will be written to: tutorial-results/05_rocs_overlays/partition_4_1.status\n\nQuery(#1): 3KPZS has 35 conformer(s)\nDatabase 1 of 1:                tutorial-results/04_omega_confomers/partition_4.mol2\n...onfomers/partition_4.mol2|****************************************|100.00%\n\n15 molecules in 42 seconds -> 0.4 molecules/sec\n                              2125 overlays/sec\n\n15 hits found\n=================================================\n\nMolecule read failures: 0\n#warnings             : 0\n#errors               : 0\n#queries processed    : 1\nProcessing partition_5.mol2\nSlave started on host Sebastians-MacBook-Pro\nSlave started on host Sebastians-MacBook-Pro\n          :jGf:               \n        :jGDDDDf:             \n      ,fDDDGjLDDDf,           'a8  ,a'8b   a''8b    a''8b  a8f'8\n    ,fDDLt:   :iLDDL;          88 a/  88  d'   8b  d'  88  88'  \n  ;fDLt:         :tfDG;        88P    8f d8    88 d8       '88aa\n,jft:   ,ijfffji,   :iff       8P        88    8P 88      a  '888\n     .jGDDDDDDDDDGt.           8i        88   d8  Y8   ,d 8    8P\n    ;GDDGt:''':tDDDG,          a8/        `88aa'    '8aa'  'baa8'\n   .DDDG:       :GDDG.    \n   ;DDDj         tDDDi    \n   ,DDDf         fDDD,         Copyright (C) 1997-2015\n    LDDDt.     .fDDDj          OpenEye Scientific Software, Inc.\n    .tDDDDfjtjfDDDGt      \n      :ifGDDDDDGfi.            Version: 3.2.1.4\n          .:::.                Built:   20150831\n  ......................       OEChem version: 2.0.4\n  DDDDDDDDDDDDDDDDDDDDDD       Platform: osx-10.10-clang++6-x64\n  DDDDDDDDDDDDDDDDDDDDDD\n\nSupported run modes:\n  Single processor\n  MPI Multiprocessor\n\n  Licensed for the exclusive use of The Laboratory of Leslie Kuhn.\n  Licensed for use only in Michigan State University.\n  License expires on October 20, 2017.\n\n\nTo cite ROCS please use the following:\n  ROCS 3.2.1.4: OpenEye Scientific Software, Santa Fe, NM.\n  http://www.eyesopen.com.\n\n  Hawkins, P.C.D.; Skillman, A.G.; Nicholls, A. Comparison of Shape-Matching\n  and Docking as Virtual Screening Tools. J. Med. Chem., 2007, 50, 74.\n\nSlave started on host Sebastians-MacBook-Pro\nRunning as MPI Master\n  database file: tutorial-results/04_omega_confomers/partition_5.mol2\n\nQuery being read from:          tk-tutorial_data/3kpzs_query.mol2\nFile prefix is:                 tutorial-results/05_rocs_overlays/partition_5\nOutput directory:               /Users/sebastian/code/screenlamp/docs/sources/user_guide\nLog file will be written to:    tutorial-results/05_rocs_overlays/partition_5.log\nStatistics will be written to:  tutorial-results/05_rocs_overlays/partition_5_1.rpt\nHit structures will written to: tutorial-results/05_rocs_overlays/partition_5_hits_1.mol2\nStatus file will be written to: tutorial-results/05_rocs_overlays/partition_5_1.status\n\nQuery(#1): 3KPZS has 35 conformer(s)\nDatabase 1 of 1:                tutorial-results/04_omega_confomers/partition_5.mol2\n...onfomers/partition_5.mol2|****************************************|100.00%\n\n12 molecules in 40 seconds -> 0.3 molecules/sec\n                              2095 overlays/sec\n\n12 hits found\n=================================================\n\nMolecule read failures: 0\n#warnings             : 0\n#errors               : 0\n#queries processed    : 1\nProcessing partition_6.mol2\nSlave started on host Sebastians-MacBook-Pro\nSlave started on host Sebastians-MacBook-Pro\nSlave started on host Sebastians-MacBook-Pro\n          :jGf:               \n        :jGDDDDf:             \n      ,fDDDGjLDDDf,           'a8  ,a'8b   a''8b    a''8b  a8f'8\n    ,fDDLt:   :iLDDL;          88 a/  88  d'   8b  d'  88  88'  \n  ;fDLt:         :tfDG;        88P    8f d8    88 d8       '88aa\n,jft:   ,ijfffji,   :iff       8P        88    8P 88      a  '888\n     .jGDDDDDDDDDGt.           8i        88   d8  Y8   ,d 8    8P\n    ;GDDGt:''':tDDDG,          a8/        `88aa'    '8aa'  'baa8'\n   .DDDG:       :GDDG.    \n   ;DDDj         tDDDi    \n   ,DDDf         fDDD,         Copyright (C) 1997-2015\n    LDDDt.     .fDDDj          OpenEye Scientific Software, Inc.\n    .tDDDDfjtjfDDDGt      \n      :ifGDDDDDGfi.            Version: 3.2.1.4\n          .:::.                Built:   20150831\n  ......................       OEChem version: 2.0.4\n  DDDDDDDDDDDDDDDDDDDDDD       Platform: osx-10.10-clang++6-x64\n  DDDDDDDDDDDDDDDDDDDDDD\n\nSupported run modes:\n  Single processor\n  MPI Multiprocessor\n\n  Licensed for the exclusive use of The Laboratory of Leslie Kuhn.\n  Licensed for use only in Michigan State University.\n  License expires on October 20, 2017.\n\n\nTo cite ROCS please use the following:\n  ROCS 3.2.1.4: OpenEye Scientific Software, Santa Fe, NM.\n  http://www.eyesopen.com.\n\n  Hawkins, P.C.D.; Skillman, A.G.; Nicholls, A. Comparison of Shape-Matching\n  and Docking as Virtual Screening Tools. J. Med. Chem., 2007, 50, 74.\n\nRunning as MPI Master\n  database file: tutorial-results/04_omega_confomers/partition_6.mol2\n\nQuery being read from:          tk-tutorial_data/3kpzs_query.mol2\nFile prefix is:                 tutorial-results/05_rocs_overlays/partition_6\nOutput directory:               /Users/sebastian/code/screenlamp/docs/sources/user_guide\nLog file will be written to:    tutorial-results/05_rocs_overlays/partition_6.log\nStatistics will be written to:  tutorial-results/05_rocs_overlays/partition_6_1.rpt\nHit structures will written to: tutorial-results/05_rocs_overlays/partition_6_hits_1.mol2\nStatus file will be written to: tutorial-results/05_rocs_overlays/partition_6_1.status\n\nQuery(#1): 3KPZS has 35 conformer(s)\nDatabase 1 of 1:                tutorial-results/04_omega_confomers/partition_6.mol2\n...onfomers/partition_6.mol2|****************************************|100.00%\n\n20 molecules in 66 seconds -> 0.3 molecules/sec\n                              1821 overlays/sec\n\n20 hits found\n=================================================\n\nMolecule read failures: 0\n#warnings             : 0\n#errors               : 0\n#queries processed    : 1\nProcessing partition_7.mol2\nSlave started on host Sebastians-MacBook-Pro\nSlave started on host Sebastians-MacBook-Pro\nSlave started on host Sebastians-MacBook-Pro\n          :jGf:               \n        :jGDDDDf:             \n      ,fDDDGjLDDDf,           'a8  ,a'8b   a''8b    a''8b  a8f'8\n    ,fDDLt:   :iLDDL;          88 a/  88  d'   8b  d'  88  88'  \n  ;fDLt:         :tfDG;        88P    8f d8    88 d8       '88aa\n,jft:   ,ijfffji,   :iff       8P        88    8P 88      a  '888\n     .jGDDDDDDDDDGt.           8i        88   d8  Y8   ,d 8    8P\n    ;GDDGt:''':tDDDG,          a8/        `88aa'    '8aa'  'baa8'\n   .DDDG:       :GDDG.    \n   ;DDDj         tDDDi    \n   ,DDDf         fDDD,         Copyright (C) 1997-2015\n    LDDDt.     .fDDDj          OpenEye Scientific Software, Inc.\n    .tDDDDfjtjfDDDGt      \n      :ifGDDDDDGfi.            Version: 3.2.1.4\n          .:::.                Built:   20150831\n  ......................       OEChem version: 2.0.4\n  DDDDDDDDDDDDDDDDDDDDDD       Platform: osx-10.10-clang++6-x64\n  DDDDDDDDDDDDDDDDDDDDDD\n\nSupported run modes:\n  Single processor\n  MPI Multiprocessor\n\n  Licensed for the exclusive use of The Laboratory of Leslie Kuhn.\n  Licensed for use only in Michigan State University.\n  License expires on October 20, 2017.\n\n\nTo cite ROCS please use the following:\n  ROCS 3.2.1.4: OpenEye Scientific Software, Santa Fe, NM.\n  http://www.eyesopen.com.\n\n  Hawkins, P.C.D.; Skillman, A.G.; Nicholls, A. Comparison of Shape-Matching\n  and Docking as Virtual Screening Tools. J. Med. Chem., 2007, 50, 74.\n\nRunning as MPI Master\n  database file: tutorial-results/04_omega_confomers/partition_7.mol2\n\nQuery being read from:          tk-tutorial_data/3kpzs_query.mol2\nFile prefix is:                 tutorial-results/05_rocs_overlays/partition_7\nOutput directory:               /Users/sebastian/code/screenlamp/docs/sources/user_guide\nLog file will be written to:    tutorial-results/05_rocs_overlays/partition_7.log\nStatistics will be written to:  tutorial-results/05_rocs_overlays/partition_7_1.rpt\nHit structures will written to: tutorial-results/05_rocs_overlays/partition_7_hits_1.mol2\nStatus file will be written to: tutorial-results/05_rocs_overlays/partition_7_1.status\n\nQuery(#1): 3KPZS has 35 conformer(s)\nDatabase 1 of 1:                tutorial-results/04_omega_confomers/partition_7.mol2\n...onfomers/partition_7.mol2|****************************************|100.00%\n\n15 molecules in 40 seconds -> 0.4 molecules/sec\n                              2356 overlays/sec\n\n15 hits found\n=================================================\n\nMolecule read failures: 0\n#warnings             : 0\n#errors               : 0\n#queries processed    : 1  Although we had 19,041 database conformers, our conformer database only consists 107 unique structures (see \" Filtering Step 3 -- Distance between Functional Groups\"), so we expect ROCS to yield 107 best-overlay pairs, which we can check via the familiar  count_mol2.py  tool.    \u26a0 Note that in your own analyses, the number of input structures to Omega and output overlays from ROCS is not always the same. Potential sources for this, which we observed, is either that Omega cannot parse certain input structures and/or ROCS sometimes includes duplicates in the results.   ! python tools/count_mol2.py \\\n  --input tutorial-results/05_rocs_overlays/  partition_1_hits_1.mol2 : 16\npartition_2_hits_1.mol2 : 16\npartition_3_hits_1.mol2 : 13\npartition_4_hits_1.mol2 : 15\npartition_5_hits_1.mol2 : 12\npartition_6_hits_1.mol2 : 20\npartition_7_hits_1.mol2 : 15\nTotal : 107",
            "title": "Step 5 -- Overlaying Reference and Database Molecules"
        },
        {
            "location": "/user_guide/tools-tutorial-1/index.html#step-6-sorting-molecular-overlays",
            "text": "In this section, we are going to sort the pair-wise overlays be overlay score and select only those molecules that meet at certain similarity threshold before we continue with the functional group matching in \" Step 7 -- Matching Functional Groups \".   To make screenlamp's functional group matching procedure (\" Step 7 -- Matching Functional Groups \") requires a general data input format to support a variety of overlay tools (other than ROCS). To bring the ROCS results into a more general format, we are going to use the  sort_rocs_mol2.py  utility tool provided in screenlamp.  Essentially, the  sort_rocs_mol2.py  tool will create a pair of  \\*_query.mol2  and  \\*_dbase.mol2  files that contain the same number of structures each based on the ROCS overlays. The  \\*_dbase.mol2  file contains the database molecule and the  \\*_query.mol2  contains the conformer of the reference molecule that corresponds to the best-matching database-reference pair. Besides, we use the  --sortby  parameter to sort the molecules by TanimotoCombo and ColorTanimoto score (in descending order, best matches come first) for visualization and remove bad overlays by setting minimum score thresholds based on the TanimotoCombo and ColorTanimoto similarity scores. The TanimotoCombo score measures the similarity between a pair of molecules based on the overall volumetric match (ShapeTanimoto) and the electrostatic similarity (ColorTanimoto). For more information about the different scoring metrics implemented in ROCS, please refer to the official ROCS documentation at https://www.eyesopen.com/rocs.  ! python tools/sort_rocs_mol2.py \\\n  --input tutorial-results/05_rocs_overlays/ \\\n  --query tk-tutorial_data/3kpzs_query.mol2 \\\n  --output tutorial-results/06_rocs_overlays_sorted \\\n  --sortby TanimotoCombo,ColorTanimoto \\\n  --selection \"(TanimotoCombo >= 0.75) & (ColorTanimoto >= 0.1)\"\\\n  --id_suffix True  Processing partition_1_hits_1.mol2 | scanned 12 molecules | 2039 mol/sec\nProcessing partition_2_hits_1.mol2 | scanned 14 molecules | 5392 mol/sec\nProcessing partition_3_hits_1.mol2 | scanned 11 molecules | 3583 mol/sec\nProcessing partition_4_hits_1.mol2 | scanned 13 molecules | 5349 mol/sec\nProcessing partition_5_hits_1.mol2 | scanned 11 molecules | 4619 mol/sec\nProcessing partition_6_hits_1.mol2 | scanned 19 molecules | 4531 mol/sec\nProcessing partition_7_hits_1.mol2 | scanned 13 molecules | 5286 mol/sec   Note about the id_suffix parameter  Note that if  --id_suffix True , a molecule ID suffix will be added to the query molecules in the order the ROCS query molecules appear in a multi-conformer query file. For instance, if all query molecules are labeled \"3kPZS\", then the same structures in the output file are labeled 3kPZS_1, 3kPZS_2, and so on. Note that those modified conformer will correspond to the conformer names in the ROCS report tables. However, they may appear in an unsorted order in the _query files, which are sorted by the overlay score of the database molecules. For example, if the database molecule is called ZINC123_112, first entry in the _query file that corresponds to *_dbase file may by labeled 3kPZS_11 if the 11th 3kPZS conformer is the best match according to ROCS.   After using the  sort_rocs_mol2.py  utility script, we have a new directory that contains pairs of  *_dbase.mol2  and  *_query.mol2  conformers from the ROCS overlays:  ! python tools/count_mol2.py \\\n  --input tutorial-results/06_rocs_overlays_sorted  partition_1_hits_1_dbase.mol2 : 11\npartition_1_hits_1_query.mol2 : 11\npartition_2_hits_1_dbase.mol2 : 13\npartition_2_hits_1_query.mol2 : 13\npartition_3_hits_1_dbase.mol2 : 10\npartition_3_hits_1_query.mol2 : 10\npartition_4_hits_1_dbase.mol2 : 12\npartition_4_hits_1_query.mol2 : 12\npartition_5_hits_1_dbase.mol2 : 10\npartition_5_hits_1_query.mol2 : 10\npartition_6_hits_1_dbase.mol2 : 18\npartition_6_hits_1_query.mol2 : 18\npartition_7_hits_1_dbase.mol2 : 12\npartition_7_hits_1_query.mol2 : 12\nTotal : 172",
            "title": "Step 6 -- Sorting Molecular Overlays"
        },
        {
            "location": "/user_guide/tools-tutorial-1/index.html#step-7-matching-functional-groups",
            "text": "Now that we have generated the multi-mol2 file pairs of the pair-wise overlays ('*_query.mol2', and '*_dbase.mol2') in \" Step 6 -- Sorting Molecular Overlays ,\" we can proceed with the tabulation of functional group matches.     \u26a0\n**Note about file suffixes.**\n\nIf you created molecular overlays using a different protocol than the one described in this tutorial please make sure that the file layout and the naming convention match the ones described in \"Step 6 -- Sorting Molecular Overlays.\" In particular, it is important that the database molecule MOL2 files have the following file endings:\n\n- _dbase.mol2 / _dbase.mol2.gz \n\nand the query molecules should end in \n\n- _query.mol2 / _query.mol2.gz \n\nEverything in front of the underscore character can be arbitrary but must also be consistent between \"query\" and \"dbase\" pairs, as shown in \"Step 6 -- Sorting Molecular Overlays\" and in the file listing below:   ! ls -1 tutorial-results/06_rocs_overlays_sorted/  partition_1_hits_1_dbase.mol2\npartition_1_hits_1_query.mol2\npartition_2_hits_1_dbase.mol2\npartition_2_hits_1_query.mol2\npartition_3_hits_1_dbase.mol2\npartition_3_hits_1_query.mol2\npartition_4_hits_1_dbase.mol2\npartition_4_hits_1_query.mol2\npartition_5_hits_1_dbase.mol2\npartition_5_hits_1_query.mol2\npartition_6_hits_1_dbase.mol2\npartition_6_hits_1_query.mol2\npartition_7_hits_1_dbase.mol2\npartition_7_hits_1_query.mol2  For the functional group matching, we recommend using a threshold of 1.3 angstroms or less, since 1.5 angstrom constitutes the typical length of an atomic bond.  ! python tools/funcgroup_matching.py \\\n  --input tutorial-results/06_rocs_overlays_sorted \\\n  --output tutorial-results/07_funcgroup_matching \\\n  --max_distance 1.3 \\\n  --processes 0  Processing partition_1_hits_1_dbase.mol2/partition_1_hits_1_query.mol2 | scanned 12 molecules | 21 mol/sec\nProcessing partition_2_hits_1_dbase.mol2/partition_2_hits_1_query.mol2 | scanned 14 molecules | 21 mol/sec\nProcessing partition_3_hits_1_dbase.mol2/partition_3_hits_1_query.mol2 | scanned 11 molecules | 20 mol/sec\nProcessing partition_4_hits_1_dbase.mol2/partition_4_hits_1_query.mol2 | scanned 13 molecules | 23 mol/sec\nProcessing partition_5_hits_1_dbase.mol2/partition_5_hits_1_query.mol2 | scanned 11 molecules | 20 mol/sec\nProcessing partition_6_hits_1_dbase.mol2/partition_6_hits_1_query.mol2 | scanned 19 molecules | 22 mol/sec\nProcessing partition_7_hits_1_dbase.mol2/partition_7_hits_1_query.mol2 | scanned 13 molecules | 23 mol/sec  The functional group matching results are collected in tabular form as regular text (.tsv) files with tab-separated columns.   ! ls -1 tutorial-results/07_funcgroup_matching  partition_1_hits_1_atomtype.tsv\npartition_1_hits_1_charge.tsv\npartition_2_hits_1_atomtype.tsv\npartition_2_hits_1_charge.tsv\npartition_3_hits_1_atomtype.tsv\npartition_3_hits_1_charge.tsv\npartition_4_hits_1_atomtype.tsv\npartition_4_hits_1_charge.tsv\npartition_5_hits_1_atomtype.tsv\npartition_5_hits_1_charge.tsv\npartition_6_hits_1_atomtype.tsv\npartition_6_hits_1_charge.tsv\npartition_7_hits_1_atomtype.tsv\npartition_7_hits_1_charge.tsv  As we can see from the file listing above, the functional group matching tool generated two tables for each partition. For instance, the functional group matching tables that correspond to partition_1 are   partition_1_hits_1_atomtype.tsv  partition_1_hits_1_charge.tsv   Below is an example of how a subsection of partition_1_hits_1_atomtype.tsv would look like if we would open it in a spreadsheet viewer (for example, LibreOffice Calc) for illustration:   Note that the table screenshot above only shows the first six columns of the file.    The first column, dbase, refers to the database molecule's name  The second column lists the corresponding reference molecule.  The column headers after the second column correspond to the atom names of the reference (or query) molecule.   For instance, the first cell below the column header C1, which contains the entry \"O.2\" (shown in the annotated screenshot below):   Lists the MOL2 atom type of the atom in the database molecule ZINC90224566_8 that overlays (or \"matches\") with the C1 atom in 3KPZS_22. Similarly, we can see that no atom in ZINC90224566_8 matches the C2 atom of 3KPZS_22, and an S.o2 atom matches the C3 atom of 3KPZS_22.   To illustrate how to read this table more visually, we can open the corresponding MOL2 files for partition_1 in PyMOL:   Shown below is a screenshot of a PyMOL session showing the 3D structure overlay of ZINC90224566_8 and 3KPZS_22. The red arrows highlight the three columns that were discussed in the previous paragraph (ZINC90224566_8 is shown in green and 3KPZS_22 is shown in cyan):   In addition to the atom type matching table, the functional group matching tool also outputs a second table for each partition analyzed. The format of this second table is identical to the atom type matching table except that its cells contain the partial charge information of the matching atom:   Note that the cells containing \"nan\" (which stands for \"not a number\") correspond to the empty cells in the atom type matching table we saw previously. Or in other words, \"nan\" cells indicate that no atom in the database molecule is matching a particular atom in the query molecule.  In the next step, \"Step 8 -- Selecting Functional Group Matches,\" we will select database molecules of interest by specific functional group matching patterns or criteria.",
            "title": "Step 7 -- Matching Functional Groups"
        },
        {
            "location": "/user_guide/tools-tutorial-1/index.html#step-8-selecting-functional-group-matches",
            "text": "In this section, we are going to use the functional group matching tables we created in \" Step 7 -- Matching Functional Groups \".    The  funcgroup_matching_selection.py  tool operates on the functional group matching tables that we created in the previous section, \"Step 7 -- Matching Functional Groups.\" To select molecules of interest, we can define two selection strings:   --atomtype_selection , which operates on the MOL2 atom types stored in the *_atomtype.tsv files    --charge_selection , which operates on the partial charges stored in the *_charge.tsv files   The selection strings work similar to the selection strings that were explained in Filtering \" Step 2 -- Presence and Absence of Functional Groups .\" In the following example, we are going to select those molecules that   Have a sp3 sulfur match with the S1 atom in the reference molecule; the matched atom has to be positively charged  An sp2 oxygen match with the O2 atom in the reference molecule; the matched atom has to have a charge   For reference, these atoms or functional groups are highlighted in the 3kPZS reference molecule shown in the screenshot below:   Using the selection criteria discussed above, that is, selecting molecules that match the 3-keto and the sulfate-group sulfur in 3kPZS, we use  tools/funcgroup_matching_selection.py  as shown below:  ! python tools/funcgroup_matching_selection.py \\\n  --input tutorial-results/07_funcgroup_matching \\\n  --output tutorial-results/08_funcgroup_selection \\\n  --atomtype_selection \"((S1 == 'S.3') | (S1 == 'S.o2')) --> (O2 == 'O.2')\" \\\n  --charge_selection \"((S1 >= 1.0)) --> (O2 <= -0.5)\"  Processing partition_1_hits_1_atomtype.tsv/partition_1_hits_1_charge.tsv | scanned 11 molecules | 140 mol/sec\nProcessing partition_2_hits_1_atomtype.tsv/partition_2_hits_1_charge.tsv | scanned 13 molecules | 407 mol/sec\nProcessing partition_3_hits_1_atomtype.tsv/partition_3_hits_1_charge.tsv | scanned 10 molecules | 354 mol/sec\nProcessing partition_4_hits_1_atomtype.tsv/partition_4_hits_1_charge.tsv | scanned 12 molecules | 379 mol/sec\nProcessing partition_5_hits_1_atomtype.tsv/partition_5_hits_1_charge.tsv | scanned 10 molecules | 361 mol/sec\nProcessing partition_6_hits_1_atomtype.tsv/partition_6_hits_1_charge.tsv | scanned 18 molecules | 577 mol/sec\nProcessing partition_7_hits_1_atomtype.tsv/partition_7_hits_1_charge.tsv | scanned 12 molecules | 411 mol/sec  The output of this command will generate new *_atomtype.tsv and *_charge.tsv tables that only contain the matching molecules. However, it is often useful to collect the corresponding structures in MOL2 files, in sorted order, for inspection. To generate those MOL2 files, that contain the structures corresponding to the output tables, we can provide the overlays from \"Step 6 -- Sorting Molecular Overlays\" (06_rocs_overlays_sorted) as an argument to the  --input_mol2  parameters:  ! python tools/funcgroup_matching_selection.py \\\n  --input tutorial-results/07_funcgroup_matching \\\n  --input_mol2 tutorial-results/06_rocs_overlays_sorted \\\n  --output tutorial-results/08_funcgroup_selection \\\n  --atomtype_selection \"((S1 == 'S.3') | (S1 == 'S.o2')) --> (O2 == 'O.2')\" \\\n  --charge_selection \"((S1 >= 1.0)) --> (O2 <= -0.5)\"  Processing partition_1_hits_1_atomtype.tsv/partition_1_hits_1_charge.tsv | scanned 11 molecules | 96 mol/sec\nProcessing partition_2_hits_1_atomtype.tsv/partition_2_hits_1_charge.tsv | scanned 13 molecules | 333 mol/sec\nProcessing partition_3_hits_1_atomtype.tsv/partition_3_hits_1_charge.tsv | scanned 10 molecules | 228 mol/sec\nProcessing partition_4_hits_1_atomtype.tsv/partition_4_hits_1_charge.tsv | scanned 12 molecules | 234 mol/sec\nProcessing partition_5_hits_1_atomtype.tsv/partition_5_hits_1_charge.tsv | scanned 10 molecules | 253 mol/sec\nProcessing partition_6_hits_1_atomtype.tsv/partition_6_hits_1_charge.tsv | scanned 18 molecules | 457 mol/sec\nProcessing partition_7_hits_1_atomtype.tsv/partition_7_hits_1_charge.tsv | scanned 12 molecules | 275 mol/sec  Now, let's have a look at one of the overlayed database molecule-reference molecule pairs from the functional group match selection:   For illustration, the numbers 0.6 and 0.9 correspond to the distance between the matched oxygen and sulfur atoms, respectively:",
            "title": "Step 8 -- Selecting Functional Group Matches"
        },
        {
            "location": "/user_guide/tools-tutorial-1/index.html#conclusion",
            "text": "While this tutorial provides a brief hands-on explanation of the different tools within screenlamp, and how to use them in concert, a real-world application would typically include millions of small molecules instead of the very small subset that we used in this tutorial. Also, the hypothesis-based selection (for instance, that matching the 3-keto and sulfate-sulfur in 3kPZS) is highly project-specific. To read more about this hypothesis-based selection approach, beyond this purely technical tutorial, please see our research publication  'Raschka, Sebastian, Anne M. Scott, Nan Liu, Santosh Gunturu, Mar Huertas, Weiming Li, and Leslie A. Kuhn (2017). \"Enabling the hypothesis-driven prioritization of small molecules in large databases: Screenlamp and its application to GPCR inhibitor discovery\"'",
            "title": "Conclusion"
        },
        {
            "location": "/user_guide/tools-tutorial-1/index.html#where-to-go-next-using-and-building-pipelines-for-automation",
            "text": "Now that this tutorial introduced you to the individual tools within screenlamp, it is straightforward to build pipelines that execute the individual steps automatically. For instance, a pipeline that automates the 8 steps we worked through in this tutorial is provided as  tools/pipelines/pipeline-example-1.py .  Essentially, this pipeline provides a more convenient way to interact with screenlamp in the way it was described in this tutorial:   Select molecules based on database properties.  Select molecules by the presence of particular functional groups.  Select molecules by the distance between certain functional groups.  Generate multiple favorable-energy conformers of each selected molecule.  Overlay the conformers of the reference and database molecules  Post process (sort) the overlay results and select molecules using similarity thresholds  Generate functional group matching tables  Select molecules based on functional group matching patterns   (You may use this pipeline as a template and modify it if you like to add additional steps or like to remove certain steps).  By default, this pipeline uses the selection parameters used in this tutorial via the corresponding configuration file ( tools/pipelines/pipeline-example-1-config.yaml ). Since the reference molecule in your own project is likely a different one than the one we used in this tutorial, the configuration file offers a user-friendly way to tailor the analysis to your needs.   For more information about this pipeline, please also see the more detailed  \"Tutorial on Using a Pre-constructed Screenlamp Pipeline\" .",
            "title": "Where to Go Next: Using and Building Pipelines for Automation"
        },
        {
            "location": "/user_guide/pipeline-tutorial-1/index.html",
            "text": "Tutorial on Using a Pre-constructed Screenlamp Pipeline\n\n\nOverview\n\n\nThis tutorial explains how to use a pre-built screenlamp pipeline to perform an automated virtual screening on a small example dataset.\n\n\nIn this particular screening pipeline, we are searching for mimics of a query molecule that contain a keto-group and sulfur atom in a specified distance to each other (13-20 angstroms) and have a high overall chemical and volumetric similarity towards the query. Then, we are selecting a subset of database molecules where the keto-group of the query molecule overlays with a keto-group in the database molecules, and where the sulfur atom in the query overlays with a sulfur atom in the database molecules. The overall virtual screening pipeline is summarized in the flowchart below. For more details on the individual screening steps, please see the \nToolkit Tutorial\n, which walks you through these steps using the same database and approach.\n\n\n\n\n(A higher-resolution PDF version of this flowchart is available \nhere\n.)\n\n\nRequirements\n\n\nBefore you continue with the tutorial, please see the \nsetup instructions\n for screenlamp if this is your first screening run.\n\n\nObtaining and Preparing the Dataset\n\n\nMOL2 Input Files\n\n\nThe automated screenlamp pipeline that is being used in this tutorial is compatible with Tripos MOL2 files of arbitrary database origin and size. A typical use case for this pipeline would be the screening of all ~18,000,000 \nDrug-Like\n molecules from \nZINC\n, which is available in MOL2 format on ZINC \nhere\n. Please note that screenlamp supports both Tripos MOL2 (\n*.mol2\n) files and gzipped Tripos MOL2 files (\n*.mol2.gz\n) out of the box. Thus, if your input dataset is in gzipped format, you can use it right away without having to make any adjustments or decompressing it. However, please note that the decompressing and compressing operations that are performed when working with gzipped files have an additional toll on computational performance.\n\n\nPlease keep in mind that this screening pipeline with 18,000,000 input molecules and the preconfigured settings takes about a day to complete on a multi-core desktop computer\n. Thus, it is recommended to work through this tutorial using a smaller dataset. With kind permission from John Irwin and the ZINC team, we recommend using a random subset of 70,000 small molecules that we prepared for this tutorial. It takes approximately 10 minutes for a multi-core Desktop computer to execute all steps in the automated, virtual screening pipeline described earlier. This subset from ZINC is split into 7 multi-MOL2 file with 10,000 molecules each: \npartition_mol2_1.mol2\n to \npartition_mol2_7.mol2\n. \n\n\nFor this tutorial, please download the dataset by clicking the following link and unzip it on your machine that you are using for the virtual screening run: \nhttps://sebastianraschka.com/datasets/screenlamp/pipeline-tutorial_1/partition_1-7.zip\n\n\ndata table for Prefiltering\n\n\nFor this particular tutorial, you'll also need a data table containing general information about these molecules. Although the partitions you downloaded above are only a small, modified subset of \nZINC\n molecules, we are going to use the full ~18,000,000 molecule Drug-like table available for download at \nhttp://zinc.docking.org/subsets/drug-like\n. To download the tab-separated table, click on the \nProperties\n link on the \nZINC Drug-like\n page. Please note that the size of the data table is about ~1.8 Gb, and thus, the download may take a while depending on your internet connection. Alternatively, a smaller data table containing only ~170,000 molecules, please use the following link: \nhttps://sebastianraschka.com/datasets/screenlamp/pipeline-tutorial_1/small_table_p1-7.txt\n\n\nQuery Molecule\n\n\nThe third data file you'll need for ligand-based virtual screening is the query molecule. For this tutorial, please download the following multi-conformer MOL2 file: \nhttps://sebastianraschka.com/datasets/screenlamp/pipeline-tutorial_1/3kpzs_query.mol2\n\n\nEditing the Configuration File\n\n\nOnce you obtained the database molecules (mol2 partitions), the data table of molecular properties, and the query molecule, you can prepare the configuration file that stores the information about your local file paths and screening settings.\n\n\nAs your configuration file template, you can use the following YAML file the \nscreenlamp/tools/pipelines/pipeline-example-1-config.yaml\n, create a local copy of it and modify the file paths according to your system's configuration.\n\n\nRunning the Automated Screening Pipeline\n\n\nAfter you customized your configuration file, you start the screening pipeline as shown in the example command snippet below:\n\n\npython path/to/screenlamp/tools/pipelines/pipeline-example-1.py --config_file /path/to/your/config/pipeline-example-1-config.yaml --incremental true\n\n\n\n\nBy setting \n--incremental true\n, you will be prompted to confirm each step by pressing enter, which is recommended for the first time use.\n\n\nFor your reference, a zip archive of all files being generated via the execution of the screenlamp pipeline can be obtained via the following download link: \nhttps://sebastianraschka.com/datasets/screenlamp/pipeline-tutorial_1/pipeline-tutorial_1_outputs.zip\n.\n\n\nCanceling and Resuming a Screening Run\n\n\nNote that throughout the screening pipeline execution, you will see a short description of the commands being executed. Also, the current pipeline step being executed will be shown in the terminal window. In case you cancel the or abort a screening run, you can resume it at the last step being executed using the \n--start_at_step\n flag. For example, if you quit the screening run at Step 2 by pressing CTRL+C\n\n\n################################################\nStep 02: PREFILTER BY FUNCTIONAL GROUP PRESENCE\n################################################\n\nRunning command:\npython /Users/sebastian/code/screenlamp/tools/funcgroup_presence_to_id.py --input /Users/sebastian/Desktop/screenlamp_pipe/01_selected-mol2s --output /Users/sebastian/Desktop/screenlamp_pipe/02_3keto-and-sulfur-mol2ids.txt --selection ((atom_type == 'S.3') | (atom_type == 'S.o2')) --> (atom_type == 'O.2') --processes 0\n\nPress Enter to proceed or CTRL+C to quit\n\n\n\n\nyou can resume the run by using \n--start_at_step 2\n as shown in the example below:\n\n\npython path/to/screenlamp/tools/pipelines/pipeline-example-1.py --config_file /path/to/your/config/pipeline-example-1-config.yaml --incremental true --start_at_step 2",
            "title": "Pipeline Tutorial"
        },
        {
            "location": "/user_guide/pipeline-tutorial-1/index.html#tutorial-on-using-a-pre-constructed-screenlamp-pipeline",
            "text": "",
            "title": "Tutorial on Using a Pre-constructed Screenlamp Pipeline"
        },
        {
            "location": "/user_guide/pipeline-tutorial-1/index.html#overview",
            "text": "This tutorial explains how to use a pre-built screenlamp pipeline to perform an automated virtual screening on a small example dataset.  In this particular screening pipeline, we are searching for mimics of a query molecule that contain a keto-group and sulfur atom in a specified distance to each other (13-20 angstroms) and have a high overall chemical and volumetric similarity towards the query. Then, we are selecting a subset of database molecules where the keto-group of the query molecule overlays with a keto-group in the database molecules, and where the sulfur atom in the query overlays with a sulfur atom in the database molecules. The overall virtual screening pipeline is summarized in the flowchart below. For more details on the individual screening steps, please see the  Toolkit Tutorial , which walks you through these steps using the same database and approach.   (A higher-resolution PDF version of this flowchart is available  here .)",
            "title": "Overview"
        },
        {
            "location": "/user_guide/pipeline-tutorial-1/index.html#requirements",
            "text": "Before you continue with the tutorial, please see the  setup instructions  for screenlamp if this is your first screening run.",
            "title": "Requirements"
        },
        {
            "location": "/user_guide/pipeline-tutorial-1/index.html#obtaining-and-preparing-the-dataset",
            "text": "",
            "title": "Obtaining and Preparing the Dataset"
        },
        {
            "location": "/user_guide/pipeline-tutorial-1/index.html#mol2-input-files",
            "text": "The automated screenlamp pipeline that is being used in this tutorial is compatible with Tripos MOL2 files of arbitrary database origin and size. A typical use case for this pipeline would be the screening of all ~18,000,000  Drug-Like  molecules from  ZINC , which is available in MOL2 format on ZINC  here . Please note that screenlamp supports both Tripos MOL2 ( *.mol2 ) files and gzipped Tripos MOL2 files ( *.mol2.gz ) out of the box. Thus, if your input dataset is in gzipped format, you can use it right away without having to make any adjustments or decompressing it. However, please note that the decompressing and compressing operations that are performed when working with gzipped files have an additional toll on computational performance.  Please keep in mind that this screening pipeline with 18,000,000 input molecules and the preconfigured settings takes about a day to complete on a multi-core desktop computer . Thus, it is recommended to work through this tutorial using a smaller dataset. With kind permission from John Irwin and the ZINC team, we recommend using a random subset of 70,000 small molecules that we prepared for this tutorial. It takes approximately 10 minutes for a multi-core Desktop computer to execute all steps in the automated, virtual screening pipeline described earlier. This subset from ZINC is split into 7 multi-MOL2 file with 10,000 molecules each:  partition_mol2_1.mol2  to  partition_mol2_7.mol2 .   For this tutorial, please download the dataset by clicking the following link and unzip it on your machine that you are using for the virtual screening run:  https://sebastianraschka.com/datasets/screenlamp/pipeline-tutorial_1/partition_1-7.zip",
            "title": "MOL2 Input Files"
        },
        {
            "location": "/user_guide/pipeline-tutorial-1/index.html#data-table-for-prefiltering",
            "text": "For this particular tutorial, you'll also need a data table containing general information about these molecules. Although the partitions you downloaded above are only a small, modified subset of  ZINC  molecules, we are going to use the full ~18,000,000 molecule Drug-like table available for download at  http://zinc.docking.org/subsets/drug-like . To download the tab-separated table, click on the  Properties  link on the  ZINC Drug-like  page. Please note that the size of the data table is about ~1.8 Gb, and thus, the download may take a while depending on your internet connection. Alternatively, a smaller data table containing only ~170,000 molecules, please use the following link:  https://sebastianraschka.com/datasets/screenlamp/pipeline-tutorial_1/small_table_p1-7.txt",
            "title": "data table for Prefiltering"
        },
        {
            "location": "/user_guide/pipeline-tutorial-1/index.html#query-molecule",
            "text": "The third data file you'll need for ligand-based virtual screening is the query molecule. For this tutorial, please download the following multi-conformer MOL2 file:  https://sebastianraschka.com/datasets/screenlamp/pipeline-tutorial_1/3kpzs_query.mol2",
            "title": "Query Molecule"
        },
        {
            "location": "/user_guide/pipeline-tutorial-1/index.html#editing-the-configuration-file",
            "text": "Once you obtained the database molecules (mol2 partitions), the data table of molecular properties, and the query molecule, you can prepare the configuration file that stores the information about your local file paths and screening settings.  As your configuration file template, you can use the following YAML file the  screenlamp/tools/pipelines/pipeline-example-1-config.yaml , create a local copy of it and modify the file paths according to your system's configuration.",
            "title": "Editing the Configuration File"
        },
        {
            "location": "/user_guide/pipeline-tutorial-1/index.html#running-the-automated-screening-pipeline",
            "text": "After you customized your configuration file, you start the screening pipeline as shown in the example command snippet below:  python path/to/screenlamp/tools/pipelines/pipeline-example-1.py --config_file /path/to/your/config/pipeline-example-1-config.yaml --incremental true  By setting  --incremental true , you will be prompted to confirm each step by pressing enter, which is recommended for the first time use.  For your reference, a zip archive of all files being generated via the execution of the screenlamp pipeline can be obtained via the following download link:  https://sebastianraschka.com/datasets/screenlamp/pipeline-tutorial_1/pipeline-tutorial_1_outputs.zip .",
            "title": "Running the Automated Screening Pipeline"
        },
        {
            "location": "/user_guide/pipeline-tutorial-1/index.html#canceling-and-resuming-a-screening-run",
            "text": "Note that throughout the screening pipeline execution, you will see a short description of the commands being executed. Also, the current pipeline step being executed will be shown in the terminal window. In case you cancel the or abort a screening run, you can resume it at the last step being executed using the  --start_at_step  flag. For example, if you quit the screening run at Step 2 by pressing CTRL+C  ################################################\nStep 02: PREFILTER BY FUNCTIONAL GROUP PRESENCE\n################################################\n\nRunning command:\npython /Users/sebastian/code/screenlamp/tools/funcgroup_presence_to_id.py --input /Users/sebastian/Desktop/screenlamp_pipe/01_selected-mol2s --output /Users/sebastian/Desktop/screenlamp_pipe/02_3keto-and-sulfur-mol2ids.txt --selection ((atom_type == 'S.3') | (atom_type == 'S.o2')) --> (atom_type == 'O.2') --processes 0\n\nPress Enter to proceed or CTRL+C to quit  you can resume the run by using  --start_at_step 2  as shown in the example below:  python path/to/screenlamp/tools/pipelines/pipeline-example-1.py --config_file /path/to/your/config/pipeline-example-1-config.yaml --incremental true --start_at_step 2",
            "title": "Canceling and Resuming a Screening Run"
        },
        {
            "location": "/contact/index.html",
            "text": "Contact\n\n\nIf you encounter bugs or other technical issues with the screenlamp software package, please send an email to \nkuhnlab@msu.edu\n or use the \nIssue Tracker\n. For questions about the \nscreenlamp research article\n, please contact the publisher or \ncorresponding author\n directly instead.",
            "title": "Contact"
        },
        {
            "location": "/contact/index.html#contact",
            "text": "If you encounter bugs or other technical issues with the screenlamp software package, please send an email to  kuhnlab@msu.edu  or use the  Issue Tracker . For questions about the  screenlamp research article , please contact the publisher or  corresponding author  directly instead.",
            "title": "Contact"
        },
        {
            "location": "/changelog/index.html",
            "text": "Release Notes\n\n\nVersion 1.0.0 (2017-10-31)\n\n\n\n\nFirst release\n\n\n\n\nDownloads\n\n\n\n\nSource code (zip)\n\n\nSource code (tar.gz)",
            "title": "Release Notes"
        },
        {
            "location": "/changelog/index.html#release-notes",
            "text": "",
            "title": "Release Notes"
        },
        {
            "location": "/changelog/index.html#version-100-2017-10-31",
            "text": "First release",
            "title": "Version 1.0.0 (2017-10-31)"
        },
        {
            "location": "/changelog/index.html#downloads",
            "text": "Source code (zip)  Source code (tar.gz)",
            "title": "Downloads"
        },
        {
            "location": "/license/index.html",
            "text": "Apache License\n                   Version 2.0, January 2004\n                http://www.apache.org/licenses/\n\n\n\n\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n\n\n\nDefinitions.\n\n\n\n\n\"License\" shall mean the terms and conditions for use, reproduction,\n  and distribution as defined by Sections 1 through 9 of this document.\n\n\n\"Licensor\" shall mean the copyright owner or entity authorized by\n  the copyright owner that is granting the License.\n\n\n\"Legal Entity\" shall mean the union of the acting entity and all\n  other entities that control, are controlled by, or are under common\n  control with that entity. For the purposes of this definition,\n  \"control\" means (i) the power, direct or indirect, to cause the\n  direction or management of such entity, whether by contract or\n  otherwise, or (ii) ownership of fifty percent (50%) or more of the\n  outstanding shares, or (iii) beneficial ownership of such entity.\n\n\n\"You\" (or \"Your\") shall mean an individual or Legal Entity\n  exercising permissions granted by this License.\n\n\n\"Source\" form shall mean the preferred form for making modifications,\n  including but not limited to software source code, documentation\n  source, and configuration files.\n\n\n\"Object\" form shall mean any form resulting from mechanical\n  transformation or translation of a Source form, including but\n  not limited to compiled object code, generated documentation,\n  and conversions to other media types.\n\n\n\"Work\" shall mean the work of authorship, whether in Source or\n  Object form, made available under the License, as indicated by a\n  copyright notice that is included in or attached to the work\n  (an example is provided in the Appendix below).\n\n\n\"Derivative Works\" shall mean any work, whether in Source or Object\n  form, that is based on (or derived from) the Work and for which the\n  editorial revisions, annotations, elaborations, or other modifications\n  represent, as a whole, an original work of authorship. For the purposes\n  of this License, Derivative Works shall not include works that remain\n  separable from, or merely link (or bind by name) to the interfaces of,\n  the Work and Derivative Works thereof.\n\n\n\"Contribution\" shall mean any work of authorship, including\n  the original version of the Work and any modifications or additions\n  to that Work or Derivative Works thereof, that is intentionally\n  submitted to Licensor for inclusion in the Work by the copyright owner\n  or by an individual or Legal Entity authorized to submit on behalf of\n  the copyright owner. For the purposes of this definition, \"submitted\"\n  means any form of electronic, verbal, or written communication sent\n  to the Licensor or its representatives, including but not limited to\n  communication on electronic mailing lists, source code control systems,\n  and issue tracking systems that are managed by, or on behalf of, the\n  Licensor for the purpose of discussing and improving the Work, but\n  excluding communication that is conspicuously marked or otherwise\n  designated in writing by the copyright owner as \"Not a Contribution.\"\n\n\n\"Contributor\" shall mean Licensor and any individual or Legal Entity\n  on behalf of whom a Contribution has been received by Licensor and\n  subsequently incorporated within the Work.\n\n\n\n\n\n\nGrant of Copyright License. Subject to the terms and conditions of\n  this License, each Contributor hereby grants to You a perpetual,\n  worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n  copyright license to reproduce, prepare Derivative Works of,\n  publicly display, publicly perform, sublicense, and distribute the\n  Work and such Derivative Works in Source or Object form.\n\n\n\n\n\n\nGrant of Patent License. Subject to the terms and conditions of\n  this License, each Contributor hereby grants to You a perpetual,\n  worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n  (except as stated in this section) patent license to make, have made,\n  use, offer to sell, sell, import, and otherwise transfer the Work,\n  where such license applies only to those patent claims licensable\n  by such Contributor that are necessarily infringed by their\n  Contribution(s) alone or by combination of their Contribution(s)\n  with the Work to which such Contribution(s) was submitted. If You\n  institute patent litigation against any entity (including a\n  cross-claim or counterclaim in a lawsuit) alleging that the Work\n  or a Contribution incorporated within the Work constitutes direct\n  or contributory patent infringement, then any patent licenses\n  granted to You under this License for that Work shall terminate\n  as of the date such litigation is filed.\n\n\n\n\n\n\nRedistribution. You may reproduce and distribute copies of the\n  Work or Derivative Works thereof in any medium, with or without\n  modifications, and in Source or Object form, provided that You\n  meet the following conditions:\n\n\n\n\n\n\n(a) You must give any other recipients of the Work or\n      Derivative Works a copy of this License; and\n\n\n(b) You must cause any modified files to carry prominent notices\n      stating that You changed the files; and\n\n\n(c) You must retain, in the Source form of any Derivative Works\n      that You distribute, all copyright, patent, trademark, and\n      attribution notices from the Source form of the Work,\n      excluding those notices that do not pertain to any part of\n      the Derivative Works; and\n\n\n(d) If the Work includes a \"NOTICE\" text file as part of its\n      distribution, then any Derivative Works that You distribute must\n      include a readable copy of the attribution notices contained\n      within such NOTICE file, excluding those notices that do not\n      pertain to any part of the Derivative Works, in at least one\n      of the following places: within a NOTICE text file distributed\n      as part of the Derivative Works; within the Source form or\n      documentation, if provided along with the Derivative Works; or,\n      within a display generated by the Derivative Works, if and\n      wherever such third-party notices normally appear. The contents\n      of the NOTICE file are for informational purposes only and\n      do not modify the License. You may add Your own attribution\n      notices within Derivative Works that You distribute, alongside\n      or as an addendum to the NOTICE text from the Work, provided\n      that such additional attribution notices cannot be construed\n      as modifying the License.\n\n\nYou may add Your own copyright statement to Your modifications and\n  may provide additional or different license terms and conditions\n  for use, reproduction, or distribution of Your modifications, or\n  for any such Derivative Works as a whole, provided Your use,\n  reproduction, and distribution of the Work otherwise complies with\n  the conditions stated in this License.\n\n\n\n\n\n\nSubmission of Contributions. Unless You explicitly state otherwise,\n  any Contribution intentionally submitted for inclusion in the Work\n  by You to the Licensor shall be under the terms and conditions of\n  this License, without any additional terms or conditions.\n  Notwithstanding the above, nothing herein shall supersede or modify\n  the terms of any separate license agreement you may have executed\n  with Licensor regarding such Contributions.\n\n\n\n\n\n\nTrademarks. This License does not grant permission to use the trade\n  names, trademarks, service marks, or product names of the Licensor,\n  except as required for reasonable and customary use in describing the\n  origin of the Work and reproducing the content of the NOTICE file.\n\n\n\n\n\n\nDisclaimer of Warranty. Unless required by applicable law or\n  agreed to in writing, Licensor provides the Work (and each\n  Contributor provides its Contributions) on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n  implied, including, without limitation, any warranties or conditions\n  of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n  PARTICULAR PURPOSE. You are solely responsible for determining the\n  appropriateness of using or redistributing the Work and assume any\n  risks associated with Your exercise of permissions under this License.\n\n\n\n\n\n\nLimitation of Liability. In no event and under no legal theory,\n  whether in tort (including negligence), contract, or otherwise,\n  unless required by applicable law (such as deliberate and grossly\n  negligent acts) or agreed to in writing, shall any Contributor be\n  liable to You for damages, including any direct, indirect, special,\n  incidental, or consequential damages of any character arising as a\n  result of this License or out of the use or inability to use the\n  Work (including but not limited to damages for loss of goodwill,\n  work stoppage, computer failure or malfunction, or any and all\n  other commercial damages or losses), even if such Contributor\n  has been advised of the possibility of such damages.\n\n\n\n\n\n\nAccepting Warranty or Additional Liability. While redistributing\n  the Work or Derivative Works thereof, You may choose to offer,\n  and charge a fee for, acceptance of support, warranty, indemnity,\n  or other liability obligations and/or rights consistent with this\n  License. However, in accepting such obligations, You may act only\n  on Your own behalf and on Your sole responsibility, not on behalf\n  of any other Contributor, and only if You agree to indemnify,\n  defend, and hold each Contributor harmless for any liability\n  incurred by, or claims asserted against, such Contributor by reason\n  of your accepting any such warranty or additional liability.\n\n\n\n\n\n\n\n\n\n\nEND OF TERMS AND CONDITIONS\n\n\nCopyright 2017 Michigan State University\n\n\nThe screenlamp software was developed by Sebastian Raschka\nand Leslie A. Kuhn in the Protein Structure Lab \n(http://www.kuhnlab.bmb.msu.edu) at Michigan State University.\n\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "title": "License"
        },
        {
            "location": "/cite/index.html",
            "text": "Citing screenlamp\n\n\nScreenlamp is research software and has been made available to other researchers under a permissive \nApache v2 open source license\n. If you use screenlamp in your scientific projects or any derivative work, the authors of the screenlamp software must be acknowledged and the following publication should be cited:\n\n\n\n\nRaschka, Sebastian, Anne M. Scott, Nan Liu, Santosh Gunturu, Mar Huertas, Weiming Li, and Leslie A. Kuhn (2017). \"Enabling the hypothesis-driven prioritization of ligand candidates in big databases: \nScreenlamp and its application to GPCR inhibitor discovery for invasive species control\"\n\n\n\n\nBibTeX Entry\n\n\n@article{raschkas2017,\n  abstract = {...},\n  doi = {...},\n  author = {Raschka, Sebastian and Scott, Anne M. and Liu, Nan and Gunturu, Santosh and Huertas, Mar and Li, Weiming andKuhn, Leslie A.},\n  issn = {...},\n  journal = {...},\n  month = {sep},\n  number = {...},\n  pages = {...},\n  publisher = {...},\n  title = {Enabling the hypothesis-driven prioritization of ligand candidates in big databases: Screenlamp and its application to GPCR inhibitor discovery for invasive species control},\n  url = {...},\n  volume = {...},\n  year = {2017}\n}",
            "title": "Citing screenlamp"
        },
        {
            "location": "/cite/index.html#citing-screenlamp",
            "text": "Screenlamp is research software and has been made available to other researchers under a permissive  Apache v2 open source license . If you use screenlamp in your scientific projects or any derivative work, the authors of the screenlamp software must be acknowledged and the following publication should be cited:   Raschka, Sebastian, Anne M. Scott, Nan Liu, Santosh Gunturu, Mar Huertas, Weiming Li, and Leslie A. Kuhn (2017). \"Enabling the hypothesis-driven prioritization of ligand candidates in big databases: \nScreenlamp and its application to GPCR inhibitor discovery for invasive species control\"",
            "title": "Citing screenlamp"
        },
        {
            "location": "/cite/index.html#bibtex-entry",
            "text": "@article{raschkas2017,\n  abstract = {...},\n  doi = {...},\n  author = {Raschka, Sebastian and Scott, Anne M. and Liu, Nan and Gunturu, Santosh and Huertas, Mar and Li, Weiming andKuhn, Leslie A.},\n  issn = {...},\n  journal = {...},\n  month = {sep},\n  number = {...},\n  pages = {...},\n  publisher = {...},\n  title = {Enabling the hypothesis-driven prioritization of ligand candidates in big databases: Screenlamp and its application to GPCR inhibitor discovery for invasive species control},\n  url = {...},\n  volume = {...},\n  year = {2017}\n}",
            "title": "BibTeX Entry"
        }
    ]
}